{"version":3,"file":"bundle.umd.js","sources":["../src/node_file_agents/file_read_agent.ts"],"sourcesContent":["import { AgentFunction, AgentFunctionInfo, assert } from \"graphai\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nexport const fileReadAgent: AgentFunction<\n  {\n    basePath: string;\n    outputType?: string;\n  },\n  {\n    array?: string[] | unknown[];\n    data?: string | unknown;\n  },\n  {\n    array?: string[];\n    file?: string;\n  }\n> = async ({ namedInputs, params }) => {\n  const { basePath, outputType } = params;\n\n  // arrayValidate(\"fileReadAgent\", namedInputs);\n  assert(!!basePath, \"fileReadAgent: params.basePath is UNDEFINED!\");\n\n  const fileToData = (fileName: string) => {\n    const file = path.resolve(path.join(basePath, fileName));\n    const buffer = fs.readFileSync(file);\n    if (outputType && outputType === \"base64\") {\n      return buffer.toString(\"base64\");\n    }\n    if (outputType && outputType === \"text\") {\n      return new TextDecoder().decode(buffer);\n    }\n    return buffer;\n  };\n\n  if (namedInputs.array) {\n    return {\n      array: namedInputs.array.map(fileToData),\n    };\n  }\n  if (namedInputs.file) {\n    return {\n      data: fileToData(namedInputs.file),\n    };\n  }\n  throw new Error(\"fileReadAgent no file\");\n};\n\nconst fileReadAgentInfo: AgentFunctionInfo = {\n  name: \"fileReadAgent\",\n  agent: fileReadAgent,\n  mock: fileReadAgent,\n  inputs: {\n    type: \"object\",\n    properties: {\n      array: {\n        type: \"array\",\n        description: \"file names\",\n      },\n    },\n    required: [\"array\"],\n  },\n  output: {\n    type: \"object\",\n  },\n  samples: [\n    {\n      inputs: { array: [\"test.txt\"] },\n      params: { basePath: __dirname + \"/../../tests/files/\" },\n      result: {\n        array: [Buffer.from([104, 101, 108, 108, 111, 10])],\n      },\n    },\n    {\n      inputs: { array: [\"test.txt\"] },\n      params: { basePath: __dirname + \"/../../tests/files/\", outputType: \"base64\" },\n      result: {\n        array: [\"aGVsbG8K\"],\n      },\n    },\n    {\n      inputs: { array: [\"test.txt\"] },\n      params: { basePath: __dirname + \"/../../tests/files/\", outputType: \"text\" },\n      result: {\n        array: [\"hello\\n\"],\n      },\n    },\n    {\n      inputs: { file: \"test.txt\" },\n      params: { basePath: __dirname + \"/../../tests/files/\", outputType: \"text\" },\n      result: {\n        data: \"hello\\n\",\n      },\n    },\n  ],\n  description: \"Read data from file system and returns data\",\n  category: [\"fs\"],\n  author: \"Receptron team\",\n  repository: \"https://github.com/snakajima/graphai\",\n  license: \"MIT\",\n};\nexport default fileReadAgentInfo;\n"],"names":["assert"],"mappings":";;;;;;IAIO,MAAM,aAAa,GAatB,OAAO,EAAE,WAAW,EAAE,MAAM,EAAE,KAAI;IACpC,IAAA,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,GAAG,MAAM;;IAGvC,IAAAA,cAAM,CAAC,CAAC,CAAC,QAAQ,EAAE,8CAA8C,CAAC;IAElE,IAAA,MAAM,UAAU,GAAG,CAAC,QAAgB,KAAI;IACtC,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YACxD,MAAM,MAAM,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC;IACpC,QAAA,IAAI,UAAU,IAAI,UAAU,KAAK,QAAQ,EAAE;IACzC,YAAA,OAAO,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;;IAElC,QAAA,IAAI,UAAU,IAAI,UAAU,KAAK,MAAM,EAAE;gBACvC,OAAO,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC;;IAEzC,QAAA,OAAO,MAAM;IACf,KAAC;IAED,IAAA,IAAI,WAAW,CAAC,KAAK,EAAE;YACrB,OAAO;gBACL,KAAK,EAAE,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC;aACzC;;IAEH,IAAA,IAAI,WAAW,CAAC,IAAI,EAAE;YACpB,OAAO;IACL,YAAA,IAAI,EAAE,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC;aACnC;;IAEH,IAAA,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC;IAC1C,CAAC;AAED,UAAM,iBAAiB,GAAsB;IAC3C,IAAA,IAAI,EAAE,eAAe;IACrB,IAAA,KAAK,EAAE,aAAa;IACpB,IAAA,IAAI,EAAE,aAAa;IACnB,IAAA,MAAM,EAAE;IACN,QAAA,IAAI,EAAE,QAAQ;IACd,QAAA,UAAU,EAAE;IACV,YAAA,KAAK,EAAE;IACL,gBAAA,IAAI,EAAE,OAAO;IACb,gBAAA,WAAW,EAAE,YAAY;IAC1B,aAAA;IACF,SAAA;YACD,QAAQ,EAAE,CAAC,OAAO,CAAC;IACpB,KAAA;IACD,IAAA,MAAM,EAAE;IACN,QAAA,IAAI,EAAE,QAAQ;IACf,KAAA;IACD,IAAA,OAAO,EAAE;IACP,QAAA;IACE,YAAA,MAAM,EAAE,EAAE,KAAK,EAAE,CAAC,UAAU,CAAC,EAAE;IAC/B,YAAA,MAAM,EAAE,EAAE,QAAQ,EAAE,SAAS,GAAG,qBAAqB,EAAE;IACvD,YAAA,MAAM,EAAE;oBACN,KAAK,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;IACpD,aAAA;IACF,SAAA;IACD,QAAA;IACE,YAAA,MAAM,EAAE,EAAE,KAAK,EAAE,CAAC,UAAU,CAAC,EAAE;gBAC/B,MAAM,EAAE,EAAE,QAAQ,EAAE,SAAS,GAAG,qBAAqB,EAAE,UAAU,EAAE,QAAQ,EAAE;IAC7E,YAAA,MAAM,EAAE;oBACN,KAAK,EAAE,CAAC,UAAU,CAAC;IACpB,aAAA;IACF,SAAA;IACD,QAAA;IACE,YAAA,MAAM,EAAE,EAAE,KAAK,EAAE,CAAC,UAAU,CAAC,EAAE;gBAC/B,MAAM,EAAE,EAAE,QAAQ,EAAE,SAAS,GAAG,qBAAqB,EAAE,UAAU,EAAE,MAAM,EAAE;IAC3E,YAAA,MAAM,EAAE;oBACN,KAAK,EAAE,CAAC,SAAS,CAAC;IACnB,aAAA;IACF,SAAA;IACD,QAAA;IACE,YAAA,MAAM,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE;gBAC5B,MAAM,EAAE,EAAE,QAAQ,EAAE,SAAS,GAAG,qBAAqB,EAAE,UAAU,EAAE,MAAM,EAAE;IAC3E,YAAA,MAAM,EAAE;IACN,gBAAA,IAAI,EAAE,SAAS;IAChB,aAAA;IACF,SAAA;IACF,KAAA;IACD,IAAA,WAAW,EAAE,6CAA6C;QAC1D,QAAQ,EAAE,CAAC,IAAI,CAAC;IAChB,IAAA,MAAM,EAAE,gBAAgB;IACxB,IAAA,UAAU,EAAE,sCAAsC;IAClD,IAAA,OAAO,EAAE,KAAK;;;;;;;;;"}