{"version":3,"file":"bundle.esm.js","sources":["../../agent_utils/lib/index.js","../src/node_file_agents/file_read_agent.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.arrayValidate = exports.isNamedInputs = exports.sample2GraphData = void 0;\nconst graphai_1 = require(\"graphai\");\nconst sample2GraphData = (sample, agentName) => {\n    const nodes = {};\n    const inputs = (() => {\n        if (Array.isArray(sample.inputs)) {\n            Array.from(sample.inputs.keys()).forEach((key) => {\n                nodes[\"sampleInput\" + key] = {\n                    value: sample.inputs[key],\n                };\n            });\n            return Object.keys(nodes).map((k) => \":\" + k);\n        }\n        nodes[\"sampleInput\"] = {\n            value: sample.inputs,\n        };\n        return Object.keys(sample.inputs).reduce((tmp, key) => {\n            tmp[key] = `:sampleInput.` + key;\n            return tmp;\n        }, {});\n    })();\n    nodes[\"node\"] = {\n        isResult: true,\n        agent: agentName,\n        params: sample.params,\n        inputs: inputs,\n        graph: sample.graph,\n    };\n    const graphData = {\n        version: 0.5,\n        nodes,\n    };\n    return graphData;\n};\nexports.sample2GraphData = sample2GraphData;\nconst isNamedInputs = (namedInputs) => {\n    return Object.keys(namedInputs || {}).length > 0;\n};\nexports.isNamedInputs = isNamedInputs;\nconst arrayValidate = (agentName, namedInputs, extra_message = \"\") => {\n    (0, graphai_1.assert)((0, exports.isNamedInputs)(namedInputs), `${agentName}: namedInputs is UNDEFINED!` + extra_message);\n    (0, graphai_1.assert)(!!namedInputs.array, `${agentName}: namedInputs.array is UNDEFINED!` + extra_message);\n    (0, graphai_1.assert)(Array.isArray(namedInputs.array), `${agentName}: namedInputs.array is not Array.` + extra_message);\n};\nexports.arrayValidate = arrayValidate;\n","import { AgentFunction, AgentFunctionInfo, assert } from \"graphai\";\nimport fs from \"fs\";\nimport { arrayValidate } from \"@graphai/agent_utils\";\n\nexport const fileReadAgent: AgentFunction<\n  {\n    basePath: string;\n    outputType?: string;\n  },\n  {\n    array: string[] | unknown[];\n  },\n  Array<never>,\n  {\n    array: string[];\n  }\n> = async ({ namedInputs, params }) => {\n  const { basePath, outputType } = params;\n\n  arrayValidate(\"fileReadAgent\", namedInputs);\n  assert(!!basePath, \"fileReadAgent: params.basePath is UNDEFINED!\");\n\n  const files = namedInputs.array.map((file: string) => {\n    const path = basePath + file;\n    const buffer = fs.readFileSync(path);\n    if (outputType && outputType === \"base64\") {\n      return buffer.toString(\"base64\");\n    }\n    if (outputType && outputType === \"text\") {\n      return new TextDecoder().decode(buffer);\n    }\n    return buffer;\n  });\n  return {\n    array: files,\n  };\n};\n\nconst fileReadAgentInfo: AgentFunctionInfo = {\n  name: \"fileReadAgent\",\n  agent: fileReadAgent,\n  mock: fileReadAgent,\n  inputs: {\n    type: \"object\",\n    properties: {\n      array: {\n        type: \"array\",\n        description: \"file names\",\n      },\n    },\n    required: [\"array\"],\n  },\n  output: {\n    type: \"object\",\n  },\n  samples: [\n    {\n      inputs: { array: [\"test.txt\"] },\n      params: { basePath: __dirname + \"/../../tests/files/\" },\n      result: {\n        array: [Buffer.from([104, 101, 108, 108, 111, 10])],\n      },\n    },\n    {\n      inputs: { array: [\"test.txt\"] },\n      params: { basePath: __dirname + \"/../../tests/files/\", outputType: \"base64\" },\n      result: {\n        array: [\"aGVsbG8K\"],\n      },\n    },\n    {\n      inputs: { array: [\"test.txt\"] },\n      params: { basePath: __dirname + \"/../../tests/files/\", outputType: \"text\" },\n      result: {\n        array: [\"hello\\n\"],\n      },\n    },\n  ],\n  description: \"Read data from file system and returns data\",\n  category: [\"fs\"],\n  author: \"Receptron team\",\n  repository: \"https://github.com/snakajima/graphai\",\n  license: \"MIT\",\n};\nexport default fileReadAgentInfo;\n"],"names":["arrayValidate"],"mappings":"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"}