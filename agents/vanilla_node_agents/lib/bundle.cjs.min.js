"use strict";var e=require("graphai"),t=require("fs"),a=require("path");const r=async({namedInputs:r,params:s})=>{const{basePath:i,outputType:n}=s;e.assert(!!i,"fileReadAgent: params.basePath is UNDEFINED!");const p=e=>{const r=a.resolve(a.join(i,e)),s=t.readFileSync(r);return n&&"base64"===n?s.toString("base64"):n&&"text"===n?(new TextDecoder).decode(s):s};if(r.array)return{array:r.array.map(p)};if(r.file)return{data:p(r.file)};throw new Error("fileReadAgent no file")},s={name:"fileReadAgent",agent:r,mock:r,inputs:{type:"object",properties:{array:{type:"array",description:"file names"}},required:["array"]},output:{type:"object"},samples:[{inputs:{array:["test.txt"]},params:{basePath:__dirname+"/../../tests/files/"},result:{array:[Buffer.from([104,101,108,108,111,10])]}},{inputs:{array:["test.txt"]},params:{basePath:__dirname+"/../../tests/files/",outputType:"base64"},result:{array:["aGVsbG8K"]}},{inputs:{array:["test.txt"]},params:{basePath:__dirname+"/../../tests/files/",outputType:"text"},result:{array:["hello\n"]}},{inputs:{file:"test.txt"},params:{basePath:__dirname+"/../../tests/files/",outputType:"text"},result:{data:"hello\n"}}],description:"Read data from file system and returns data",category:["fs"],author:"Receptron team",repository:"https://github.com/snakajima/graphai",license:"MIT"};exports.fileReadAgent=s;
//# sourceMappingURL=bundle.cjs.min.js.map
