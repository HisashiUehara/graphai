"use strict";var a,e=require("graphai"),t=require("fs"),r={};var s=(a||(a=1,function(a){Object.defineProperty(a,"__esModule",{value:!0}),a.arrayValidate=a.isNamedInputs=a.sample2GraphData=void 0;const t=e;a.sample2GraphData=(a,e)=>{const t={},r=Array.isArray(a.inputs)?(Array.from(a.inputs.keys()).forEach((e=>{t["sampleInput"+e]={value:a.inputs[e]}})),Object.keys(t).map((a=>":"+a))):(t.sampleInput={value:a.inputs},Object.keys(a.inputs).reduce(((a,e)=>(a[e]=":sampleInput."+e,a)),{}));return t.node={isResult:!0,agent:e,params:a.params,inputs:r,graph:a.graph},{version:.5,nodes:t}},a.isNamedInputs=a=>Object.keys(a||{}).length>0,a.arrayValidate=(e,r,s="")=>{(0,t.assert)((0,a.isNamedInputs)(r),`${e}: namedInputs is UNDEFINED!`+s),(0,t.assert)(!!r.array,`${e}: namedInputs.array is UNDEFINED!`+s),(0,t.assert)(Array.isArray(r.array),`${e}: namedInputs.array is not Array.`+s)}}(r)),r);const n=async({namedInputs:a,params:r})=>{const{basePath:n,outputType:p}=r;s.arrayValidate("fileReadAgent",a),e.assert(!!n,"fileReadAgent: params.basePath is UNDEFINED!");return{array:a.array.map((a=>{const e=n+a,r=t.readFileSync(e);return p&&"base64"===p?r.toString("base64"):p&&"text"===p?(new TextDecoder).decode(r):r}))}},p={name:"fileReadAgent",agent:n,mock:n,inputs:{type:"object",properties:{array:{type:"array",description:"file names"}},required:["array"]},output:{type:"object"},samples:[{inputs:{array:["test.txt"]},params:{basePath:__dirname+"/../../tests/files/"},result:{array:[Buffer.from([104,101,108,108,111,10])]}},{inputs:{array:["test.txt"]},params:{basePath:__dirname+"/../../tests/files/",outputType:"base64"},result:{array:["aGVsbG8K"]}},{inputs:{array:["test.txt"]},params:{basePath:__dirname+"/../../tests/files/",outputType:"text"},result:{array:["hello\n"]}}],description:"Read data from file system and returns data",category:["fs"],author:"Receptron team",repository:"https://github.com/snakajima/graphai",license:"MIT"};exports.fileReadAgent=p;
//# sourceMappingURL=bundle.cjs.min.js.map
