"use strict";var e,t=require("graphai"),s={};var o=(e||(e=1,function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.getMessages=e.getMergeValue=e.flatString=void 0,e.flatString=e=>Array.isArray(e)?e.filter((e=>e)).join("\n"):e??"",e.getMergeValue=(t,s,o,r)=>{const n=t[o],a=s[o];return n||a?[(0,e.flatString)(n),(0,e.flatString)(a)].filter((e=>e)).join("\n"):(0,e.flatString)(r)},e.getMessages=(e,t)=>[...e?[{role:"system",content:e}]:[],...t??[]]}(s)),s);const r=(e,t)=>{const s=e?.choices[0]&&e?.choices[0].message?e?.choices[0].message:null,o=s&&s.content?s.content:null,r=s?.tool_calls&&s?.tool_calls[0]?s?.tool_calls[0]:null,n=r?{id:r.id,name:r?.function?.name,arguments:(()=>{try{return JSON.parse(r?.function?.arguments)}catch(e){return}})()}:void 0;return s&&t.push(s),{...e,text:o,tool:n,message:s,messages:t}},n="this is response result",a={object:"chat.completion",id:"chatcmpl-9N7HxXYbwjmdbdiQE94MHoVluQhyt",choices:[{message:{role:"assistant",content:n},finish_reason:"stop",index:0,logprobs:null}],created:1715296589,model:"gpt-3.5-turbo-0125"},i={name:"openAIFetchAgent",agent:async({filterParams:e,params:t,namedInputs:s})=>{const{verbose:n,system:a,images:i,temperature:p,tools:c,tool_choice:l,max_tokens:m,stream:y,apiKey:g,prompt:u,messages:d,response_format:h}={...t,...s},b=o.getMergeValue(s,t,"mergeablePrompts",u),f=o.getMergeValue(s,t,"mergeableSystem",a),j=o.getMessages(f,d);if(!g)throw new Error("OPENAI_API_KEY key is not set in params. params: {apiKey: 'sk-xxx'}");if(b&&j.push({role:"user",content:b}),i){const e="gpt-4-vision-preview"===t.model?i[0]:{url:i[0],detail:"high"};j.push({role:"user",content:[{type:"image_url",image_url:e}]})}n&&console.log(j);const _={model:t.model||"gpt-4o",messages:j,tools:c,tool_choice:l,max_tokens:m,temperature:p??.7,stream:!!y,response_format:h},k=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${g}`},body:JSON.stringify(_)});if(!y){if(200===k.status){const e=await k.json();return r(e,j)}throw new Error("OPENAI API Error")}const x=k.body?.getReader();if(200!==k.status||!x)throw new Error("Request failed");const O=new TextDecoder("utf-8");let w=!1;const A=[];let v="";for(;!w;){const{done:t,value:s}=await x.read();if(t)w=t,x.releaseLock();else{v=O.decode(s,{stream:!0})+v;const t=v.split(/\n+/),o=[];for(const s of t)try{const t=s.replace(/^data:\s*/,"");if("[DONE]"===t)break;if(t){const s=JSON.parse(t).choices[0].delta.content;s&&(A.push(s),e&&e.streamTokenCallback&&s&&e.streamTokenCallback(s))}}catch(e){o.push(s)}v=o.join("\n")}}return r({choices:[{message:{role:"assistant",content:A.join(""),refusal:""}}]},j)},mock:async({filterParams:e})=>{for await(const s of n.split(""))e&&e.streamTokenCallback&&s&&(await t.sleep(100),e.streamTokenCallback(s));return a},inputs:{type:"object",properties:{model:{type:"string"},system:{type:"string"},tools:{type:"object"},tool_choice:{anyOf:[{type:"array"},{type:"object"}]},max_tokens:{type:"number"},verbose:{type:"boolean"},temperature:{type:"number"},apiKey:{anyOf:[{type:"string"},{type:"object"}]},stream:{type:"boolean"},prompt:{type:"string",description:"query string"},messages:{anyOf:[{type:"string"},{type:"object"},{type:"array"}],description:"chat messages"}}},output:{type:"object",properties:{id:{type:"string"},object:{type:"string"},created:{type:"integer"},model:{type:"string"},choices:{type:"array",items:[{type:"object",properties:{index:{type:"integer"},message:{type:"array",items:[{type:"object",properties:{content:{type:"string"},role:{type:"string"}},required:["content","role"]}]}},required:["index","message","logprobs","finish_reason"]}]},usage:{type:"object",properties:{prompt_tokens:{type:"integer"},completion_tokens:{type:"integer"},total_tokens:{type:"integer"}},required:["prompt_tokens","completion_tokens","total_tokens"]},text:{type:"string"},tool:{arguments:{type:"object"},name:{type:"string"}},message:{type:"object",properties:{content:{type:"string"},role:{type:"string"}},required:["content","role"]}},required:["id","object","created","model","choices","usage"]},params:{type:"object",properties:{model:{type:"string"},system:{type:"string"},tools:{type:"object"},tool_choice:{anyOf:[{type:"array"},{type:"object"}]},max_tokens:{type:"number"},verbose:{type:"boolean"},temperature:{type:"number"},apiKey:{anyOf:[{type:"string"},{type:"object"}]},stream:{type:"boolean"},prompt:{type:"string",description:"query string"},messages:{anyOf:[{type:"string"},{type:"object"},{type:"array"}],description:"chat messages"}}},outputFormat:{llmResponse:{key:"choices.$0.message.content",type:"string"}},samples:[{inputs:{prompt:n},params:{},result:a}],description:"OpenAI Fetch Agent",category:["llm"],author:"Receptron team",repository:"https://github.com/receptron/graphai",license:"MIT",stream:!0,npms:["openai"]};exports.openAIFetchAgent=i;
//# sourceMappingURL=bundle.cjs.min.js.map
