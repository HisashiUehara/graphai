"use strict";var e,t=require("graphai"),s={};var r=(e||(e=1,function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.getMessages=e.getMergeValue=e.flatString=void 0,e.flatString=e=>Array.isArray(e)?e.filter((e=>e)).join("\n"):e??"",e.getMergeValue=(t,s,r,o)=>{const n=t[r],a=s[r];return n||a?[(0,e.flatString)(n),(0,e.flatString)(a)].filter((e=>e)).join("\n"):(0,e.flatString)(o)},e.getMessages=(e,t)=>[...e?[{role:"system",content:e}]:[],...t??[]]}(s)),s);const o="this is response result",n={object:"chat.completion",id:"chatcmpl-9N7HxXYbwjmdbdiQE94MHoVluQhyt",choices:[{message:{role:"assistant",content:o},finish_reason:"stop",index:0,logprobs:null}],created:1715296589,model:"gpt-3.5-turbo-0125"},a={name:"openAIFetchAgent",agent:async({filterParams:e,params:t,namedInputs:s})=>{const{verbose:o,system:n,images:a,temperature:p,tools:i,tool_choice:c,max_tokens:l,baseURL:y,apiKey:m,stream:g,prompt:u,messages:b,forWeb:h,response_format:d}={...t,...s},f=r.getMergeValue(s,t,"mergeablePrompts",u),_=r.getMergeValue(s,t,"mergeableSystem",n),j=r.getMessages(_,b);if(!m)throw new Error("OPENAI_API_KEY key is not set in params. params: {apiKey: 'sk-xxx'}");if(f&&j.push({role:"user",content:f}),a){const e="gpt-4-vision-preview"===t.model?a[0]:{url:a[0],detail:"high"};j.push({role:"user",content:[{type:"image_url",image_url:e}]})}o&&console.log(j);const k={model:t.model||"gpt-4o",messages:j,tools:i,tool_choice:c,max_tokens:l,temperature:p??.7,response_format:d},x=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${m}`},body:JSON.stringify(k)});if(200===x.status){return((e,t)=>{const s=e?.choices[0]&&e?.choices[0].message?e?.choices[0].message:null,r=s&&s.content?s.content:null,o=s?.tool_calls&&s?.tool_calls[0]?s?.tool_calls[0]:null,n=o?{id:o.id,name:o?.function?.name,arguments:(()=>{try{return JSON.parse(o?.function?.arguments)}catch(e){return}})()}:void 0;return s&&t.push(s),{...e,text:r,tool:n,message:s,messages:t}})(await x.json(),j)}throw new Error("OPENAI API Error")},mock:async({filterParams:e})=>{for await(const s of o.split(""))e&&e.streamTokenCallback&&s&&(await t.sleep(100),e.streamTokenCallback(s));return n},inputs:{type:"object",properties:{model:{type:"string"},system:{type:"string"},tools:{type:"object"},tool_choice:{anyOf:[{type:"array"},{type:"object"}]},max_tokens:{type:"number"},verbose:{type:"boolean"},temperature:{type:"number"},baseURL:{type:"string"},apiKey:{anyOf:[{type:"string"},{type:"object"}]},stream:{type:"boolean"},prompt:{type:"string",description:"query string"},messages:{anyOf:[{type:"string"},{type:"object"},{type:"array"}],description:"chat messages"}}},output:{type:"object",properties:{id:{type:"string"},object:{type:"string"},created:{type:"integer"},model:{type:"string"},choices:{type:"array",items:[{type:"object",properties:{index:{type:"integer"},message:{type:"array",items:[{type:"object",properties:{content:{type:"string"},role:{type:"string"}},required:["content","role"]}]}},required:["index","message","logprobs","finish_reason"]}]},usage:{type:"object",properties:{prompt_tokens:{type:"integer"},completion_tokens:{type:"integer"},total_tokens:{type:"integer"}},required:["prompt_tokens","completion_tokens","total_tokens"]},text:{type:"string"},tool:{arguments:{type:"object"},name:{type:"string"}},message:{type:"object",properties:{content:{type:"string"},role:{type:"string"}},required:["content","role"]}},required:["id","object","created","model","choices","usage"]},params:{type:"object",properties:{model:{type:"string"},system:{type:"string"},tools:{type:"object"},tool_choice:{anyOf:[{type:"array"},{type:"object"}]},max_tokens:{type:"number"},verbose:{type:"boolean"},temperature:{type:"number"},baseURL:{type:"string"},apiKey:{anyOf:[{type:"string"},{type:"object"}]},stream:{type:"boolean"},prompt:{type:"string",description:"query string"},messages:{anyOf:[{type:"string"},{type:"object"},{type:"array"}],description:"chat messages"}}},outputFormat:{llmResponse:{key:"choices.$0.message.content",type:"string"}},samples:[{inputs:{prompt:o},params:{},result:n}],description:"OpenAI Fetch Agent",category:["llm"],author:"Receptron team",repository:"https://github.com/receptron/graphai",license:"MIT",stream:!0,npms:["openai"]};exports.openAIFetchAgent=a;
//# sourceMappingURL=bundle.cjs.min.js.map
