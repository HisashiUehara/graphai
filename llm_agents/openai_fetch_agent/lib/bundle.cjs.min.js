"use strict";var e,t=require("graphai"),o={};var r=(e||(e=1,function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.getMessages=e.getMergeValue=e.flatString=void 0,e.flatString=e=>Array.isArray(e)?e.filter((e=>e)).join("\n"):e??"",e.getMergeValue=(t,o,r,s)=>{const n=t[r],a=o[r];return n||a?[(0,e.flatString)(n),(0,e.flatString)(a)].filter((e=>e)).join("\n"):(0,e.flatString)(s)},e.getMessages=(e,t)=>[...e?[{role:"system",content:e}]:[],...t??[]]}(o)),o);const s="this is response result",n={object:"chat.completion",id:"chatcmpl-9N7HxXYbwjmdbdiQE94MHoVluQhyt",choices:[{message:{role:"assistant",content:s},finish_reason:"stop",index:0,logprobs:null}],created:1715296589,model:"gpt-3.5-turbo-0125"},a={name:"openAIFetchAgent",agent:async({params:e,namedInputs:t})=>{const{verbose:o,system:s,images:n,temperature:a,tools:p,tool_choice:i,max_tokens:c,apiKey:l,prompt:y,messages:m,response_format:g}={...e,...t},u=r.getMergeValue(t,e,"mergeablePrompts",y),h=r.getMergeValue(t,e,"mergeableSystem",s),b=r.getMessages(h,m);if(!l)throw new Error("OPENAI_API_KEY key is not set in params. params: {apiKey: 'sk-xxx'}");if(u&&b.push({role:"user",content:u}),n){const t="gpt-4-vision-preview"===e.model?n[0]:{url:n[0],detail:"high"};b.push({role:"user",content:[{type:"image_url",image_url:t}]})}o&&console.log(b);const d={model:e.model||"gpt-4o",messages:b,tools:p,tool_choice:i,max_tokens:c,temperature:a??.7,response_format:g},f=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${l}`},body:JSON.stringify(d)});if(200===f.status){return((e,t)=>{const o=e?.choices[0]&&e?.choices[0].message?e?.choices[0].message:null,r=o&&o.content?o.content:null,s=o?.tool_calls&&o?.tool_calls[0]?o?.tool_calls[0]:null,n=s?{id:s.id,name:s?.function?.name,arguments:(()=>{try{return JSON.parse(s?.function?.arguments)}catch(e){return}})()}:void 0;return o&&t.push(o),{...e,text:r,tool:n,message:o,messages:t}})(await f.json(),b)}throw new Error("OPENAI API Error")},mock:async({filterParams:e})=>{for await(const o of s.split(""))e&&e.streamTokenCallback&&o&&(await t.sleep(100),e.streamTokenCallback(o));return n},inputs:{type:"object",properties:{model:{type:"string"},system:{type:"string"},tools:{type:"object"},tool_choice:{anyOf:[{type:"array"},{type:"object"}]},max_tokens:{type:"number"},verbose:{type:"boolean"},temperature:{type:"number"},apiKey:{anyOf:[{type:"string"},{type:"object"}]},prompt:{type:"string",description:"query string"},messages:{anyOf:[{type:"string"},{type:"object"},{type:"array"}],description:"chat messages"}}},output:{type:"object",properties:{id:{type:"string"},object:{type:"string"},created:{type:"integer"},model:{type:"string"},choices:{type:"array",items:[{type:"object",properties:{index:{type:"integer"},message:{type:"array",items:[{type:"object",properties:{content:{type:"string"},role:{type:"string"}},required:["content","role"]}]}},required:["index","message","logprobs","finish_reason"]}]},usage:{type:"object",properties:{prompt_tokens:{type:"integer"},completion_tokens:{type:"integer"},total_tokens:{type:"integer"}},required:["prompt_tokens","completion_tokens","total_tokens"]},text:{type:"string"},tool:{arguments:{type:"object"},name:{type:"string"}},message:{type:"object",properties:{content:{type:"string"},role:{type:"string"}},required:["content","role"]}},required:["id","object","created","model","choices","usage"]},params:{type:"object",properties:{model:{type:"string"},system:{type:"string"},tools:{type:"object"},tool_choice:{anyOf:[{type:"array"},{type:"object"}]},max_tokens:{type:"number"},verbose:{type:"boolean"},temperature:{type:"number"},apiKey:{anyOf:[{type:"string"},{type:"object"}]},prompt:{type:"string",description:"query string"},messages:{anyOf:[{type:"string"},{type:"object"},{type:"array"}],description:"chat messages"}}},outputFormat:{llmResponse:{key:"choices.$0.message.content",type:"string"}},samples:[{inputs:{prompt:s},params:{},result:n}],description:"OpenAI Fetch Agent",category:["llm"],author:"Receptron team",repository:"https://github.com/receptron/graphai",license:"MIT",stream:!1,npms:["openai"]};exports.openAIFetchAgent=a;
//# sourceMappingURL=bundle.cjs.min.js.map
