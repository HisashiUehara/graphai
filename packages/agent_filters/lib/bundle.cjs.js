"use strict";var e=require("graphai"),t=require("ajv"),a=require("@noble/hashes/sha2");const r=(e,a)=>{if(!(new t).compile(e)(a))throw new Error("schema not matched");return!0};const n=async(e,t,a,r)=>{const n=async function*(e,t){const{params:a,namedInputs:r,debugInfo:n,filterParams:s}=t,o={params:a,debugInfo:n,filterParams:s,namedInputs:r},i=await fetch(e,{headers:{"Content-Type":"text/event-stream"},method:"POST",body:JSON.stringify(o)}),c=i.body?.getReader();if(200!==i.status||!c)throw new Error("Request failed");const u=new TextDecoder("utf-8");let d=!1;for(;!d;){const{done:e,value:t}=await c.read();if(e)d=e,c.releaseLock();else{const e=u.decode(t,{stream:!0});yield e}}}(t,a),s=[];for await(const t of n)r&&console.log(t),t&&(s.push(t),-1===s.join("").indexOf("___END___")&&e.filterParams.streamTokenCallback&&e.filterParams.streamTokenCallback(t));const o=s.join("").split("___END___")[1];return JSON.parse(o)},s=t=>Array.isArray(t)?t.map((e=>s(e))):e.isObject(t)?Object.keys(t).sort().reduce(((e,a)=>(e[a]=t[a],e)),{}):t,o=e=>{const{namedInputs:t,params:r,debugInfo:n}=e,{agentId:o}=n,i=a.sha256(JSON.stringify(s({namedInputs:t,params:r,agentId:o})));return btoa(String.fromCharCode(...i))};exports.agentFilterRunnerBuilder=e=>{const t=e;return(e,a)=>{let r=0;const n=e=>{const s=t[r++];return s?s.agent(e,n):a(e)};return n(e)}},exports.agentInputValidator=r,exports.cacheAgentFilterGenerator=e=>{const{getCache:t,setCache:a,getCacheKey:r}=e;return async(e,n)=>{if("pureAgent"===e.cacheType){const s=r?r(e):o(e),i=await t(s);if(i)return i;const c=await n(e);return await a(s,c),c}return"impureAgent"===e.cacheType&&(e.filterParams.cache={getCache:t,setCache:a,getCacheKey:o}),n(e)}},exports.httpAgentFilter=async(e,t)=>{const{params:a,debugInfo:r,filterParams:s,namedInputs:o}=e;if(s?.server){const{baseUrl:t,isDebug:i,serverAgentUrlDictionary:c}=s.server,u=r.agentId,d=void 0!==s.streamTokenCallback,l=c&&u&&c[u]?c[u]:[t,u].join("/");void 0===l&&console.log("httpAgentFilter: Url is not defined");const p={params:a,debugInfo:r,filterParams:s,namedInputs:o,inputs:o};return d?await n(e,l,p,i):await(async(e,t)=>{const a=await fetch(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});return await a.json()})(l,p)}return t(e)},exports.namedInputValidatorFilter=async(e,t)=>{const{inputSchema:a,namedInputs:n}=e;return a&&"array"!==a.type&&r(a,n||{}),t(e)},exports.sortObjectKeys=s,exports.streamAgentFilterGenerator=t=>async(a,r)=>(a.debugInfo.isResult&&(a.filterParams.streamTokenCallback=r=>{a.debugInfo.state===e.NodeState.Executing&&t(a,r)}),r(a));
//# sourceMappingURL=bundle.cjs.js.map
