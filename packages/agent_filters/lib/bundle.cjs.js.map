{"version":3,"file":"bundle.cjs.js","sources":["../src/filters/stream.ts","../src/filters/namedinput_validator.ts","../src/filters/http_client.ts","../src/filters/cache.ts","../src/utils/runner.ts"],"sourcesContent":["import type { AgentFilterFunction, AgentFunctionContext } from \"graphai\";\nimport { NodeState } from \"graphai\";\n\nexport const streamAgentFilterGenerator = <T>(callback: (context: AgentFunctionContext, data: T) => void) => {\n  const streamAgentFilter: AgentFilterFunction = async (context, next) => {\n    if (context.debugInfo.isResult) {\n      context.filterParams.streamTokenCallback = (data: T) => {\n        if (context.debugInfo.state === NodeState.Executing) {\n          callback(context, data);\n        }\n      };\n    }\n    return next(context);\n  };\n  return streamAgentFilter;\n};\n","import { AgentFilterFunction } from \"graphai\";\nimport Ajv from \"ajv\";\n\n// export for test\nexport const agentInputValidator = (inputSchema: any, namedInputs: any) => {\n  const ajv = new Ajv();\n  const validateSchema = ajv.compile(inputSchema);\n  if (!validateSchema(namedInputs)) {\n    // console.log(validateSchema.errors);\n    throw new Error(\"schema not matched\");\n  }\n  return true;\n};\n\nexport const namedInputValidatorFilter: AgentFilterFunction = async (context, next) => {\n  const { inputSchema, namedInputs } = context;\n\n  if (inputSchema) {\n    if (inputSchema.type !== \"array\") {\n      agentInputValidator(inputSchema, namedInputs || {});\n    }\n  }\n\n  return next(context);\n};\n","import { AgentFilterFunction, AgentFunctionContext, isObject } from \"graphai\";\n\nasync function* streamChatCompletion(url: string, postData: AgentFunctionContext, userHeaders: any) {\n  const { params, namedInputs, debugInfo, filterParams } = postData;\n  const postBody = { params, debugInfo, filterParams, namedInputs };\n  const headers = { ...userHeaders, \"Content-Type\": \"application/json\" };\n\n  const completion = await fetch(url, {\n    headers,\n    method: \"POST\",\n    body: JSON.stringify(postBody),\n  });\n\n  const reader = completion.body?.getReader();\n\n  if (completion.status !== 200 || !reader) {\n    throw new Error(\"Request failed\");\n  }\n\n  const decoder = new TextDecoder(\"utf-8\");\n  let done = false;\n  while (!done) {\n    const { done: readDone, value } = await reader.read();\n    if (readDone) {\n      done = readDone;\n      reader.releaseLock();\n    } else {\n      const token = decoder.decode(value, { stream: true });\n      yield token;\n    }\n  }\n}\n\nconst streamingRequest = async (context: AgentFunctionContext, url: string, postData: AgentFunctionContext, userHeaders: any, isDebug: boolean | undefined) => {\n  const generator = streamChatCompletion(url, postData, userHeaders);\n\n  const messages = [];\n  for await (const token of generator) {\n    if (isDebug) {\n      console.log(token);\n    }\n    // callback to stream filter\n    if (token) {\n      messages.push(token);\n      if (messages.join(\"\").indexOf(\"___END___\") === -1 && context.filterParams.streamTokenCallback) {\n        context.filterParams.streamTokenCallback(token);\n      }\n    }\n  }\n\n  const payload_data = messages.join(\"\").split(\"___END___\")[1];\n  const data = JSON.parse(payload_data);\n  return data;\n};\nconst httpRequest = async (url: string, postData: AgentFunctionContext, userHeaders: any) => {\n  const headers = { ...userHeaders, \"Content-Type\": \"application/json\" };\n  const response = await fetch(url, {\n    method: \"post\",\n    headers,\n    body: JSON.stringify(postData),\n  });\n  return await response.json();\n};\n\nexport const httpAgentFilter: AgentFilterFunction = async (context, next) => {\n  const { params, debugInfo, filterParams, namedInputs, config } = context;\n\n  if (filterParams?.server) {\n    const { baseUrl, isDebug, serverAgentUrlDictionary } = filterParams.server;\n    const headers = config?.headers ?? {};\n    if (!isObject(headers)) {\n      throw new Error(\"httpAgentFilter: headers is not object.\");\n    }\n    const agentId = debugInfo.agentId;\n    const isStreaming = filterParams.streamTokenCallback !== undefined;\n    const url = serverAgentUrlDictionary && agentId && serverAgentUrlDictionary[agentId] ? serverAgentUrlDictionary[agentId] : [baseUrl, agentId].join(\"/\");\n    if (url === undefined) {\n      console.log(\"httpAgentFilter: Url is not defined\");\n    }\n    const postData = {\n      params,\n      debugInfo,\n      filterParams,\n      namedInputs,\n      inputs: namedInputs, // alias.\n    };\n    if (isStreaming) {\n      return await streamingRequest(context, url, postData, headers, isDebug);\n    }\n    return await httpRequest(url, postData, headers);\n  }\n  return next(context);\n};\n","import { AgentFilterFunction, AgentFunctionContext, isObject } from \"graphai\";\nimport { sha256 } from \"@noble/hashes/sha2\";\n\ntype CacheAgentFilterSetCache = (key: string, data: any) => Promise<void>;\ntype CacheAgentFilterGetCache = (key: string) => Promise<any>;\ntype CacheAgentFilterGetCacheKey = (context: AgentFunctionContext) => string;\n\n// for cache key, sort object key\nexport const sortObjectKeys = (data: any[] | Record<string, any> | string | number | boolean): any => {\n  if (Array.isArray(data)) {\n    return data.map((d) => sortObjectKeys(d));\n  }\n  if (isObject(data)) {\n    return Object.keys(data)\n      .sort()\n      .reduce((tmp: Record<string, any>, key: string) => {\n        tmp[key] = data[key];\n        return tmp;\n      }, {});\n  }\n  return data;\n};\n\nconst getDefaultCacheKey = (context: AgentFunctionContext) => {\n  const { namedInputs, params, debugInfo } = context;\n  const { agentId } = debugInfo;\n  const cacheKeySeed = sha256(JSON.stringify(sortObjectKeys({ namedInputs, params, agentId })));\n  const cacheKey = btoa(String.fromCharCode(...cacheKeySeed));\n  return cacheKey;\n};\n\n// There are two types of cache\n//  - pureAgent whose results are always the same for each input\n//  - impureAgent with different results for the same inputs. For example, reading a file.\n// pureAgent performs caching within agent filter. impureAgent with different results for the same inputs. For example, reading a file.\n// impureAgent implements a cache mechanism on the agent side.\n// Actual cache reading/writing function is given to cacheAgentFilterGenerator\n\nexport const cacheAgentFilterGenerator = (cacheRepository: {\n  setCache: CacheAgentFilterSetCache;\n  getCache: CacheAgentFilterGetCache;\n  getCacheKey?: CacheAgentFilterGetCacheKey;\n}) => {\n  const { getCache, setCache, getCacheKey } = cacheRepository;\n  const cacheAgentFilter: AgentFilterFunction = async (context, next) => {\n    if (context.cacheType === \"pureAgent\") {\n      const cacheKey = getCacheKey ? getCacheKey(context) : getDefaultCacheKey(context);\n      const cache = await getCache(cacheKey);\n      if (cache) {\n        return cache;\n      }\n      const result = await next(context);\n      await setCache(cacheKey, result);\n      return result;\n    }\n\n    if (context.cacheType === \"impureAgent\") {\n      context.filterParams.cache = {\n        getCache,\n        setCache,\n        getCacheKey: getDefaultCacheKey,\n      };\n    }\n    return next(context);\n  };\n  return cacheAgentFilter;\n};\n","import { AgentFunctionContext, AgentFunction, AgentFilterInfo, ResultData } from \"graphai\";\n\n// for test and server.\nexport const agentFilterRunnerBuilder = (__agentFilters: AgentFilterInfo[]) => {\n  const agentFilters = __agentFilters;\n  const agentFilterRunner = (context: AgentFunctionContext, agent: AgentFunction) => {\n    let index = 0;\n\n    const next = (context: AgentFunctionContext): Promise<ResultData> => {\n      const agentFilter = agentFilters[index++];\n      if (agentFilter) {\n        return agentFilter.agent(context, next);\n      }\n      return agent(context);\n    };\n\n    return next(context);\n  };\n  return agentFilterRunner;\n};\n"],"names":["agentInputValidator","inputSchema","namedInputs","Ajv","compile","validateSchema","Error","streamingRequest","async","context","url","postData","userHeaders","isDebug","generator","params","debugInfo","filterParams","postBody","headers","completion","fetch","method","body","JSON","stringify","reader","getReader","status","decoder","TextDecoder","done","readDone","value","read","releaseLock","token","decode","stream","streamChatCompletion","messages","console","log","push","join","indexOf","streamTokenCallback","payload_data","split","parse","sortObjectKeys","data","Array","isArray","map","d","isObject","Object","keys","sort","reduce","tmp","key","getDefaultCacheKey","agentId","cacheKeySeed","sha256","btoa","String","fromCharCode","__agentFilters","agentFilters","agent","index","next","agentFilter","cacheRepository","getCache","setCache","getCacheKey","cacheType","cacheKey","cache","result","config","server","baseUrl","serverAgentUrlDictionary","isStreaming","undefined","inputs","response","json","httpRequest","type","callback","isResult","state","NodeState","Executing"],"mappings":"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"}