{"version":3,"file":"bundle.umd.js","sources":["../src/utils/utils.ts","../src/utils/nodeUtils.ts","../src/type.ts","../src/transaction_log.ts","../src/node.ts","../src/utils/prop_function.ts","../src/utils/data_source.ts","../src/utils/result.ts","../src/validators/common.ts","../src/validators/graph_data_validator.ts","../src/validator.ts","../src/validators/nodeValidator.ts","../src/validators/static_node_validator.ts","../src/validators/computed_node_validator.ts","../src/validators/agent_validator.ts","../src/validators/relation_validator.ts","../src/task_manager.ts","../src/graphai.ts"],"sourcesContent":["import { DataSource, AgentFunction, DefaultInputData } from \"@/type\";\n\nexport const sleep = async (milliseconds: number) => {\n  return await new Promise((resolve) => setTimeout(resolve, milliseconds));\n};\n\nexport const parseNodeName = (inputNodeId: any): DataSource => {\n  if (typeof inputNodeId === \"string\") {\n    const regex = /^:(.*)$/;\n    const match = inputNodeId.match(regex);\n    if (!match) {\n      return { value: inputNodeId }; // string literal\n    }\n    const parts = match[1].split(\".\");\n    if (parts.length == 1) {\n      return { nodeId: parts[0] };\n    }\n    return { nodeId: parts[0], propIds: parts.slice(1) };\n  }\n  return { value: inputNodeId }; // non-string literal\n};\n\nexport function assert(condition: boolean, message: string, isWarn: boolean = false): asserts condition {\n  if (!condition) {\n    if (!isWarn) {\n      throw new Error(message);\n    }\n    console.warn(\"warn: \" + message);\n  }\n}\n\nexport const isObject = (x: unknown) => {\n  return x !== null && typeof x === \"object\";\n};\n\nexport const isNull = (data: unknown) => {\n  return data === null || data === undefined;\n};\n\nexport const strIntentionalError = \"Intentional Error for Debugging\";\n\nexport const defaultAgentInfo = {\n  name: \"defaultAgentInfo\",\n  samples: [\n    {\n      inputs: [],\n      params: {},\n      result: {},\n    },\n  ],\n  description: \"\",\n  category: [],\n  author: \"\",\n  repository: \"\",\n  license: \"\",\n};\n\nexport const agentInfoWrapper = (agent: AgentFunction<any, any, any, any>) => {\n  return {\n    agent,\n    mock: agent,\n    ...defaultAgentInfo,\n  };\n};\n\nconst objectToKeyArray = (innerData: any) => {\n  const ret: string[][] = [];\n  Object.keys(innerData).forEach((key: string) => {\n    ret.push([key]);\n    if (Object.keys(innerData[key]).length > 0) {\n      objectToKeyArray(innerData[key]).forEach((tmp: string[]) => {\n        ret.push([key, ...tmp]);\n      });\n    }\n  });\n  return ret;\n};\n\nexport const debugResultKey = (agentId: string, result: any) => {\n  return objectToKeyArray({ [agentId]: debugResultKeyInner(result) }).map((objectKeys: string[]) => {\n    return \":\" + objectKeys.join(\".\");\n  });\n};\n\nconst debugResultKeyInner = (result: any) => {\n  if (result === null || result === undefined) {\n    return {};\n  }\n  if (typeof result === \"string\") {\n    return {};\n  }\n  if (Array.isArray(result)) {\n    return Array.from(result.keys()).reduce((tmp: Record<string, any>, index: number) => {\n      tmp[\"$\" + String(index)] = debugResultKeyInner(result[index]);\n      return tmp;\n    }, {});\n  }\n  return Object.keys(result).reduce((tmp: Record<string, any>, key: string) => {\n    tmp[key] = debugResultKeyInner(result[key]);\n    return tmp;\n  }, {});\n};\n\nexport const isLogicallyTrue = (value: any) => {\n  // Notice that empty aray is not true under GraphAI\n  if (Array.isArray(value) ? value.length === 0 : !value) {\n    return false;\n  }\n  return true;\n};\n\nexport const defaultTestContext = {\n  debugInfo: {\n    nodeId: \"test\",\n    retry: 0,\n    verbose: true,\n  },\n  params: {},\n  filterParams: {},\n  agents: {},\n  log: [],\n};\n\nexport const isNamedInputs = <NamedInput = DefaultInputData>(namedInputs: NamedInput) => {\n  return isObject(namedInputs) && !Array.isArray(namedInputs) && Object.keys(namedInputs || {}).length > 0;\n};\n","import { parseNodeName, isObject } from \"./utils\";\nimport { DataSource } from \"@/type\";\n\n// for dataSource\nexport const inputs2dataSources = (inputs: any): DataSource[] => {\n  if (Array.isArray(inputs)) {\n    return inputs.map((inp) => inputs2dataSources(inp)).flat();\n  }\n  if (isObject(inputs)) {\n    return Object.values(inputs)\n      .map((input) => inputs2dataSources(input))\n      .flat();\n  }\n  if (typeof inputs === \"string\") {\n    const templateMatch = [...inputs.matchAll(/\\${(:[^}]+)}/g)].map((m) => m[1]);\n    if (templateMatch.length > 0) {\n      return inputs2dataSources(templateMatch);\n    }\n  }\n\n  return parseNodeName(inputs) as any;\n};\n\nexport const dataSourceNodeIds = (sources: DataSource[]): string[] => {\n  return sources.filter((source: DataSource) => source.nodeId).map((source) => source.nodeId!);\n};\n","import type { TransactionLog } from \"@/transaction_log\";\nimport type { TaskManager } from \"@/task_manager\";\n\nexport enum NodeState {\n  Waiting = \"waiting\",\n  Queued = \"queued\",\n  Executing = \"executing\",\n  ExecutingServer = \"executing-server\",\n  Failed = \"failed\",\n  TimedOut = \"timed-out\",\n  Completed = \"completed\",\n  Injected = \"injected\",\n  Skipped = \"skipped\",\n}\n\nexport type DefaultResultData = Record<string, any> | string | number | boolean | Array<DefaultResultData>;\nexport type DefaultInputData = Record<string, any>;\nexport type ResultData<ResultType = DefaultResultData> = ResultType | undefined;\nexport type ResultDataDictionary<ResultType = DefaultResultData> = Record<string, ResultData<ResultType>>;\n\nexport type DefaultParamsType = Record<string, any>;\nexport type NodeDataParams<ParamsType = DefaultParamsType> = ParamsType; // Agent-specific parameters\n\nexport type PassThrough = Record<string, any>;\n\nexport type DataSource = {\n  nodeId?: string;\n  value?: any;\n  propIds?: string[];\n};\n\nexport type StaticNodeData = {\n  value: ResultData; // initial value for static node.\n  update?: string; // nodeId (+.propId) to get value after a loop\n  isResult?: boolean;\n  console?: Record<string, string | boolean>;\n};\nexport type AgentAnonymousFunction = (...params: any[]) => unknown;\n\nexport type AgentFilterParams = Record<string, any>;\n\nexport type GraphDataLoaderOption = { fileName: string; option?: any };\n\nexport type ComputedNodeData = {\n  agent: string | AgentAnonymousFunction;\n  inputs?: Array<any> | Record<string, any>;\n  anyInput?: boolean; // any input makes this node ready\n  params?: NodeDataParams;\n  filterParams?: AgentFilterParams; // agent filter\n  retry?: number;\n  timeout?: number; // msec\n  if?: string; // conditional execution\n  unless?: string; // conditional execution\n  graph?: GraphData | string;\n  graphLoader?: GraphDataLoaderOption;\n  isResult?: boolean;\n  priority?: number; // The default is 0.\n  passThrough?: PassThrough; // data that pass trough to result\n  console?: Record<string, string | boolean>;\n};\n\nexport type NodeData = StaticNodeData | ComputedNodeData;\n\nexport type LoopData = {\n  count?: number;\n  while?: string;\n};\n\nexport type GraphData = {\n  version?: number; // major version, 0.1, 0.2, ...\n  nodes: Record<string, NodeData>;\n  concurrency?: number;\n  loop?: LoopData;\n  verbose?: boolean;\n  retry?: number;\n  metadata?: any; // Stores information about GraphData. GraphAI itself is not used this data.\n};\n\nexport type GraphDataLoader = (loaderOption: GraphDataLoaderOption) => GraphData;\n\nexport type GraphOptions = {\n  agentFilters?: AgentFilterInfo[] | undefined;\n  taskManager?: TaskManager | undefined;\n  bypassAgentIds?: string[] | undefined;\n  config?: Record<string, unknown>;\n  graphLoader?: GraphDataLoader;\n};\n\nexport type AgentFunctionContext<ParamsType = DefaultParamsType, InputDataType = DefaultInputData, NamedInputDataType = DefaultInputData> = {\n  params: NodeDataParams<ParamsType>;\n  inputs: Array<InputDataType>;\n  inputSchema?: any;\n  namedInputs: NamedInputDataType;\n  debugInfo: {\n    verbose: boolean;\n    nodeId: string;\n    retry: number;\n    agentId?: string;\n    version?: number;\n    isResult?: boolean;\n  };\n  graphData?: GraphData; // for nested graph. TODO remove next version.\n  agents?: AgentFunctionInfoDictionary; // for nested graph. TODO remove next version.\n  taskManager?: TaskManager; // for nested graph. TODO remove next version.\n  forNestedGraph?: {\n    graphData: GraphData; // nested graph\n    agents: AgentFunctionInfoDictionary; // for nested graph\n    graphOptions: GraphOptions;\n    onLogCallback?: (log: TransactionLog, isUpdate: boolean) => void;\n  };\n  onLogCallback?: (log: TransactionLog, isUpdate: boolean) => void; // TODO remove next version.\n  filterParams: AgentFilterParams; // agent filter\n  agentFilters?: AgentFilterInfo[];\n  log?: TransactionLog[];\n  config?: Record<string, unknown>;\n};\n\nexport type AgentFunction<\n  ParamsType = DefaultParamsType,\n  ResultType = DefaultResultData,\n  InputDataType = DefaultInputData,\n  NamedInputDataType = DefaultInputData,\n> = (context: AgentFunctionContext<ParamsType, InputDataType, NamedInputDataType>) => Promise<ResultData<ResultType>>;\n\nexport type AgentFilterFunction<\n  ParamsType = DefaultParamsType,\n  ResultType = DefaultResultData,\n  InputDataType = DefaultInputData,\n  NamedInputDataType = DefaultInputData,\n> = (context: AgentFunctionContext<ParamsType, InputDataType, NamedInputDataType>, agent: AgentFunction) => Promise<ResultData<ResultType>>;\n\nexport type AgentFilterInfo = {\n  name: string;\n  agent: AgentFilterFunction;\n  agentIds?: string[];\n  nodeIds?: string[];\n  filterParams?: AgentFilterParams;\n};\n\nexport type AgentFunctionInfoSample = {\n  inputs: any;\n  params: DefaultParamsType;\n  result: any;\n  graph?: GraphData;\n};\n\nexport type AgentFunctionInfo = {\n  name: string;\n  agent: AgentFunction<any, any, any, any>;\n  mock: AgentFunction<any, any, any, any>;\n  inputs?: any;\n  output?: any;\n  outputFormat?: any;\n  params?: any;\n  samples: AgentFunctionInfoSample[];\n  description: string;\n  category: string[];\n  author: string;\n  repository: string;\n  license: string;\n\n  environmentVariables?: string[];\n  stream?: boolean;\n  apiKeys?: string[];\n  npms?: string[];\n};\n\nexport type AgentFunctionInfoDictionary = Record<string, AgentFunctionInfo>;\n\nexport type PropFunction = (result: ResultData, propId: string) => ResultData;\n","import { ResultData, NodeDataParams, NodeState } from \"@/type\";\nimport type { GraphAI } from \"@/graphai\";\nimport type { ComputedNode, StaticNode } from \"@/node\";\nimport { debugResultKey } from \"@/utils/utils\";\nimport { dataSourceNodeIds } from \"@/utils/nodeUtils\";\n\nexport class TransactionLog {\n  public nodeId: string;\n  public state: NodeState;\n  public startTime?: number;\n  public endTime?: number;\n  public retryCount?: number;\n  public agentId?: string;\n  public params?: NodeDataParams;\n  public inputs?: string[];\n  public inputsData?: Array<ResultData>;\n  public injectFrom?: string;\n  public errorMessage?: string;\n  public result?: ResultData;\n  public resultKeys?: string[];\n  public mapIndex?: number;\n  public isLoop?: boolean;\n  public repeatCount?: number;\n  public log?: TransactionLog[];\n  constructor(nodeId: string) {\n    this.nodeId = nodeId;\n    this.state = NodeState.Waiting;\n  }\n\n  public initForComputedNode(node: ComputedNode, graph: GraphAI) {\n    this.agentId = node.getAgentId();\n    this.params = node.params;\n    graph.appendLog(this);\n  }\n\n  public onInjected(node: StaticNode, graph: GraphAI, injectFrom?: string) {\n    const isUpdating = \"endTime\" in this;\n    this.result = node.result;\n    this.state = node.state;\n    this.endTime = Date.now();\n    this.injectFrom = injectFrom;\n    graph.setLoopLog(this);\n    // console.log(this)\n    if (isUpdating) {\n      graph.updateLog(this);\n    } else {\n      graph.appendLog(this);\n    }\n  }\n\n  public onComplete(node: ComputedNode, graph: GraphAI, localLog: TransactionLog[]) {\n    this.result = node.result;\n    this.resultKeys = debugResultKey(this.agentId || \"\", node.result);\n    this.state = node.state;\n    this.endTime = Date.now();\n    graph.setLoopLog(this);\n    if (localLog.length > 0) {\n      this.log = localLog;\n    }\n    graph.updateLog(this);\n  }\n\n  public beforeExecute(node: ComputedNode, graph: GraphAI, transactionId: number, inputs: ResultData[]) {\n    this.state = node.state;\n    this.retryCount = node.retryCount > 0 ? node.retryCount : undefined;\n    this.startTime = transactionId;\n    this.inputs = dataSourceNodeIds(node.dataSources);\n    this.inputsData = inputs.length > 0 ? inputs : undefined;\n    graph.setLoopLog(this);\n    graph.appendLog(this);\n  }\n\n  public beforeAddTask(node: ComputedNode, graph: GraphAI) {\n    this.state = node.state;\n    graph.setLoopLog(this);\n    graph.appendLog(this);\n  }\n\n  public onError(node: ComputedNode, graph: GraphAI, errorMessage: string) {\n    this.state = node.state;\n    this.errorMessage = errorMessage;\n    this.endTime = Date.now();\n    graph.setLoopLog(this);\n    graph.updateLog(this);\n  }\n\n  public onSkipped(node: ComputedNode, graph: GraphAI) {\n    this.state = node.state;\n    graph.setLoopLog(this);\n    graph.updateLog(this);\n  }\n}\n","import type { GraphAI, GraphData } from \"@/index\";\nimport { strIntentionalError } from \"@/utils/utils\";\nimport { inputs2dataSources, dataSourceNodeIds } from \"@/utils/nodeUtils\";\n\nimport {\n  NodeDataParams,\n  ResultData,\n  DataSource,\n  ComputedNodeData,\n  StaticNodeData,\n  NodeState,\n  AgentFunctionContext,\n  AgentFunction,\n  AgentFilterInfo,\n  AgentFilterParams,\n  DefaultParamsType,\n  DefaultInputData,\n  PassThrough,\n} from \"@/type\";\nimport { parseNodeName, assert, isLogicallyTrue, isObject } from \"@/utils/utils\";\nimport { TransactionLog } from \"@/transaction_log\";\n\nexport class Node {\n  public readonly nodeId: string;\n  public readonly waitlist = new Set<string>(); // List of nodes which need data from this node.\n  public state = NodeState.Waiting;\n  public result: ResultData | undefined = undefined;\n\n  protected graph: GraphAI;\n  protected log: TransactionLog;\n  protected console: Record<string, string | boolean>; // console output option (before and/or after)\n\n  constructor(nodeId: string, graph: GraphAI) {\n    this.nodeId = nodeId;\n    this.graph = graph;\n    this.log = new TransactionLog(nodeId);\n    this.console = {};\n  }\n\n  public asString() {\n    return `${this.nodeId}: ${this.state} ${[...this.waitlist]}`;\n  }\n\n  // This method is called either as the result of computation (computed node) or\n  // injection (static node).\n  protected onSetResult() {\n    this.waitlist.forEach((waitingNodeId) => {\n      const waitingNode = this.graph.nodes[waitingNodeId];\n      if (waitingNode.isComputedNode) {\n        waitingNode.removePending(this.nodeId);\n        this.graph.pushQueueIfReadyAndRunning(waitingNode);\n      }\n    });\n  }\n\n  protected afterConsoleLog(result: ResultData) {\n    if (this.console.after === true) {\n      console.log(typeof result === \"string\" ? result : JSON.stringify(result, null, 2));\n    } else if (this.console.after) {\n      console.log(this.console.after);\n    }\n  }\n}\n\nexport class ComputedNode extends Node {\n  public readonly graphId: string;\n  public readonly isResult: boolean;\n  public readonly params: NodeDataParams; // Agent-specific parameters\n  private readonly filterParams: AgentFilterParams;\n  private readonly dynamicParams: Record<string, DataSource>;\n  public readonly nestedGraph?: GraphData | DataSource;\n  public readonly retryLimit: number;\n  public retryCount: number = 0;\n  private readonly agentId?: string;\n  private readonly agentFunction?: AgentFunction<any, any, any, any>;\n  public readonly timeout?: number; // msec\n  public readonly priority: number;\n  public error?: Error;\n  public transactionId: undefined | number; // To reject callbacks from timed-out transactions\n  private readonly passThrough?: PassThrough;\n\n  public readonly anyInput: boolean; // any input makes this node ready\n  public dataSources: DataSource[] = []; // no longer needed. This is for transaction log.\n  private inputs?: Array<any> | Record<string, any>;\n  public isNamedInputs: boolean = false;\n  public pendings: Set<string>; // List of nodes this node is waiting data from.\n  private ifSource?: DataSource; // conditional execution\n  private unlessSource?: DataSource; // conditional execution\n\n  public readonly isStaticNode = false;\n  public readonly isComputedNode = true;\n\n  constructor(graphId: string, nodeId: string, data: ComputedNodeData, graph: GraphAI) {\n    super(nodeId, graph);\n    this.graphId = graphId;\n    this.params = data.params ?? {};\n    this.console = data.console ?? {};\n    this.filterParams = data.filterParams ?? {};\n    this.passThrough = data.passThrough;\n    this.retryLimit = data.retry ?? graph.retryLimit ?? 0;\n    this.timeout = data.timeout;\n    this.isResult = data.isResult ?? false;\n    this.priority = data.priority ?? 0;\n\n    this.anyInput = data.anyInput ?? false;\n    this.inputs = data.inputs;\n    this.isNamedInputs = isObject(data.inputs) && !Array.isArray(data.inputs);\n    this.dataSources = data.inputs ? inputs2dataSources(data.inputs).flat(10) : [];\n    if (data.inputs && !this.isNamedInputs) {\n      console.warn(`array inputs have been deprecated. nodeId: ${nodeId}: see https://github.com/receptron/graphai/blob/main/docs/NamedInputs.md`);\n    }\n\n    this.pendings = new Set(dataSourceNodeIds(this.dataSources));\n    assert([\"function\", \"string\"].includes(typeof data.agent), \"agent must be either string or function\");\n    if (typeof data.agent === \"string\") {\n      this.agentId = data.agent;\n    } else {\n      const agent = data.agent;\n      this.agentFunction = this.isNamedInputs ? async ({ namedInputs }) => agent(namedInputs) : async ({ inputs }) => agent(...inputs);\n    }\n    if (data.graph) {\n      this.nestedGraph = typeof data.graph === \"string\" ? this.addPendingNode(data.graph) : data.graph;\n    }\n    if (data.graphLoader && graph.graphLoader) {\n      this.nestedGraph = graph.graphLoader(data.graphLoader);\n    }\n    if (data.if) {\n      this.ifSource = this.addPendingNode(data.if);\n    }\n    if (data.unless) {\n      this.unlessSource = this.addPendingNode(data.unless);\n    }\n    this.dynamicParams = Object.keys(this.params).reduce((tmp: Record<string, DataSource>, key) => {\n      const dataSource = parseNodeName(this.params[key]);\n      if (dataSource.nodeId) {\n        assert(!this.anyInput, \"Dynamic params are not supported with anyInput\");\n        tmp[key] = dataSource;\n        this.pendings.add(dataSource.nodeId);\n      }\n      return tmp;\n    }, {});\n\n    this.log.initForComputedNode(this, graph);\n  }\n\n  public getAgentId() {\n    return this.agentId ?? \"__custom__function\"; // only for display purpose in the log.\n  }\n\n  private addPendingNode(nodeId: string) {\n    const source = parseNodeName(nodeId);\n    assert(!!source.nodeId, `Invalid data source ${nodeId}`);\n    this.pendings.add(source.nodeId);\n    return source;\n  }\n\n  public isReadyNode() {\n    if (this.state !== NodeState.Waiting || this.pendings.size !== 0) {\n      return false;\n    }\n    if (\n      (this.ifSource && !isLogicallyTrue(this.graph.resultOf(this.ifSource))) ||\n      (this.unlessSource && isLogicallyTrue(this.graph.resultOf(this.unlessSource)))\n    ) {\n      this.state = NodeState.Skipped;\n      this.log.onSkipped(this, this.graph);\n      return false;\n    }\n    return true;\n  }\n\n  // This private method (only called while executing execute()) performs\n  // the \"retry\" if specified. The transaction log must be updated before\n  // callling this method.\n  private retry(state: NodeState, error: Error) {\n    this.state = state; // this.execute() will update to NodeState.Executing\n    this.log.onError(this, this.graph, error.message);\n\n    if (this.retryCount < this.retryLimit) {\n      this.retryCount++;\n      this.execute();\n    } else {\n      this.result = undefined;\n      this.error = error;\n      this.transactionId = undefined; // This is necessary for timeout case\n      this.graph.onExecutionComplete(this);\n    }\n  }\n\n  private checkDataAvailability() {\n    return Object.values(this.graph.resultsOf(this.inputs))\n      .flat()\n      .some((result) => result !== undefined);\n  }\n\n  // This method is called right before the Graph add this node to the task manager.\n  public beforeAddTask() {\n    this.state = NodeState.Queued;\n    this.log.beforeAddTask(this, this.graph);\n  }\n\n  // This method is called when the data became available on one of nodes,\n  // which this node needs data from.\n  public removePending(nodeId: string) {\n    if (this.anyInput) {\n      if (this.checkDataAvailability()) {\n        this.pendings.clear();\n      }\n    } else {\n      this.pendings.delete(nodeId);\n    }\n  }\n\n  private isCurrentTransaction(transactionId: number) {\n    return this.transactionId === transactionId;\n  }\n\n  // This private method (called only fro execute) checks if the callback from\n  // the timer came before the completion of agent function call, record it\n  // and attempt to retry (if specified).\n  private executeTimeout(transactionId: number) {\n    if (this.state === NodeState.Executing && this.isCurrentTransaction(transactionId)) {\n      console.warn(`-- timeout ${this.timeout} with ${this.nodeId}`);\n      this.retry(NodeState.TimedOut, Error(\"Timeout\"));\n    }\n  }\n\n  // Check if we need to apply this filter to this node or not.\n  private shouldApplyAgentFilter(agentFilter: AgentFilterInfo) {\n    if (agentFilter.agentIds && Array.isArray(agentFilter.agentIds) && agentFilter.agentIds.length > 0) {\n      if (this.agentId && agentFilter.agentIds.includes(this.agentId)) {\n        return true;\n      }\n    }\n    if (agentFilter.nodeIds && Array.isArray(agentFilter.nodeIds) && agentFilter.nodeIds.length > 0) {\n      if (agentFilter.nodeIds.includes(this.nodeId)) {\n        return true;\n      }\n    }\n    return !agentFilter.agentIds && !agentFilter.nodeIds;\n  }\n\n  private agentFilterHandler(context: AgentFunctionContext, agentFunction: AgentFunction): Promise<ResultData> {\n    let index = 0;\n\n    const next = (innerContext: AgentFunctionContext): Promise<ResultData> => {\n      const agentFilter = this.graph.agentFilters[index++];\n      if (agentFilter) {\n        if (this.shouldApplyAgentFilter(agentFilter)) {\n          if (agentFilter.filterParams) {\n            innerContext.filterParams = { ...agentFilter.filterParams, ...innerContext.filterParams };\n          }\n          return agentFilter.agent(innerContext, next);\n        }\n        return next(innerContext);\n      }\n      return agentFunction(innerContext);\n    };\n\n    return next(context);\n  }\n\n  // This method is called when this computed node became ready to run.\n  // It asynchronously calls the associated with agent function and set the result,\n  // then it removes itself from the \"running node\" list of the graph.\n  // Notice that setting the result of this node may make other nodes ready to run.\n  public async execute() {\n    const previousResults = this.graph.resultsOf(this.inputs, this.anyInput);\n    const transactionId = Date.now();\n    this.prepareExecute(transactionId, Object.values(previousResults));\n\n    if (this.timeout && this.timeout > 0) {\n      setTimeout(() => {\n        this.executeTimeout(transactionId);\n      }, this.timeout);\n    }\n\n    try {\n      const agentFunction = this.agentFunction ?? this.graph.getAgentFunctionInfo(this.agentId).agent;\n      const localLog: TransactionLog[] = [];\n      const context = this.getContext(previousResults, localLog);\n\n      // NOTE: We use the existence of graph object in the agent-specific params to determine\n      // if this is a nested agent or not.\n      if (this.nestedGraph) {\n        this.graph.taskManager.prepareForNesting();\n        context.taskManager = this.graph.taskManager;\n        context.onLogCallback = this.graph.onLogCallback;\n        if (\"nodes\" in this.nestedGraph) {\n          context.graphData = this.nestedGraph;\n        } else {\n          context.graphData = this.graph.resultOf(this.nestedGraph) as GraphData; // HACK: compiler work-around\n        }\n        context.agents = this.graph.agentFunctionInfoDictionary;\n        context.forNestedGraph = {\n          graphData: context.graphData,\n          agents: context.agents,\n          graphOptions: {\n            agentFilters: this.graph.agentFilters,\n            taskManager: this.graph.taskManager,\n            bypassAgentIds: this.graph.bypassAgentIds,\n            config: this.graph.config,\n            graphLoader: this.graph.graphLoader,\n          },\n        };\n      }\n\n      this.beforeConsoleLog(context);\n      const result = await this.agentFilterHandler(context as AgentFunctionContext, agentFunction);\n      this.afterConsoleLog(result);\n\n      if (this.nestedGraph) {\n        this.graph.taskManager.restoreAfterNesting();\n      }\n\n      if (!this.isCurrentTransaction(transactionId)) {\n        // This condition happens when the agent function returns\n        // after the timeout (either retried or not).\n        console.log(`-- transactionId mismatch with ${this.nodeId} (probably timeout)`);\n        return;\n      }\n\n      this.state = NodeState.Completed;\n      this.result = this.getResult(result);\n      this.log.onComplete(this, this.graph, localLog);\n\n      this.onSetResult();\n\n      this.graph.onExecutionComplete(this);\n    } catch (error) {\n      this.errorProcess(error, transactionId, previousResults);\n    }\n  }\n\n  // This private method (called only by execute()) prepares the ComputedNode object\n  // for execution, and create a new transaction to record it.\n  private prepareExecute(transactionId: number, inputs: Array<ResultData>) {\n    this.state = NodeState.Executing;\n    this.log.beforeExecute(this, this.graph, transactionId, inputs);\n    this.transactionId = transactionId;\n  }\n\n  // This private method (called only by execute) processes an error received from\n  // the agent function. It records the error in the transaction log and handles\n  // the retry if specified.\n  private errorProcess(error: unknown, transactionId: number, namedInputs: DefaultInputData) {\n    if (error instanceof Error && error.message !== strIntentionalError) {\n      console.error(`<-- NodeId: ${this.nodeId}, Agent: ${this.agentId}`);\n      console.error({ namedInputs });\n      console.error(error);\n      console.error(\"-->\");\n    }\n    if (!this.isCurrentTransaction(transactionId)) {\n      console.warn(`-- transactionId mismatch with ${this.nodeId} (not timeout)`);\n      return;\n    }\n\n    if (error instanceof Error) {\n      this.retry(NodeState.Failed, error);\n    } else {\n      console.error(`-- NodeId: ${this.nodeId}: Unknown error was caught`);\n      this.retry(NodeState.Failed, Error(\"Unknown\"));\n    }\n  }\n\n  private getParams() {\n    return Object.keys(this.dynamicParams).reduce(\n      (tmp, key) => {\n        const result = this.graph.resultOf(this.dynamicParams[key]);\n        tmp[key] = result;\n        return tmp;\n      },\n      { ...this.params },\n    );\n  }\n  private getInputs(previousResults: Record<string, ResultData | undefined>) {\n    if (Array.isArray(this.inputs)) {\n      return (this.inputs ?? []).map((key) => previousResults[String(key)]).filter((a) => !this.anyInput || a);\n    }\n    return [];\n  }\n\n  private getContext(previousResults: Record<string, ResultData | undefined>, localLog: TransactionLog[]) {\n    const context: AgentFunctionContext<DefaultParamsType, DefaultInputData | string | number | boolean | undefined> = {\n      params: this.getParams(),\n      inputs: this.getInputs(previousResults),\n      namedInputs: this.isNamedInputs ? previousResults : {},\n      inputSchema: this.agentFunction ? undefined : this.graph.getAgentFunctionInfo(this.agentId)?.inputs,\n      debugInfo: this.getDebugInfo(),\n      filterParams: this.filterParams,\n      agentFilters: this.graph.agentFilters,\n      config: this.graph.config,\n      log: localLog,\n    };\n    return context;\n  }\n\n  private getResult(result: ResultData) {\n    if (result && this.passThrough) {\n      if (isObject(result) && !Array.isArray(result)) {\n        return { ...result, ...this.passThrough };\n      } else if (Array.isArray(result)) {\n        return result.map((r) => (isObject(r) && !Array.isArray(r) ? { ...r, ...this.passThrough } : r));\n      }\n    }\n    return result;\n  }\n\n  private getDebugInfo() {\n    return {\n      nodeId: this.nodeId,\n      agentId: this.agentId,\n      retry: this.retryCount,\n      verbose: this.graph.verbose,\n      version: this.graph.version,\n      isResult: this.isResult,\n    };\n  }\n\n  private beforeConsoleLog(context: AgentFunctionContext<DefaultParamsType, string | number | boolean | DefaultInputData | undefined>) {\n    if (this.console.before === true) {\n      console.log(JSON.stringify(this.isNamedInputs ? context.namedInputs : context.inputs, null, 2));\n    } else if (this.console.before) {\n      console.log(this.console.before);\n    }\n  }\n}\n\nexport class StaticNode extends Node {\n  public value?: ResultData;\n  public readonly update?: DataSource;\n  public readonly isResult: boolean;\n  public readonly isStaticNode = true;\n  public readonly isComputedNode = false;\n\n  constructor(nodeId: string, data: StaticNodeData, graph: GraphAI) {\n    super(nodeId, graph);\n    this.value = data.value;\n    this.update = data.update ? parseNodeName(data.update) : undefined;\n    this.isResult = data.isResult ?? false;\n    this.console = data.console ?? {};\n  }\n\n  public injectValue(value: ResultData, injectFrom?: string) {\n    this.state = NodeState.Injected;\n    this.result = value;\n    this.log.onInjected(this, this.graph, injectFrom);\n    this.onSetResult();\n  }\n\n  public consoleLog() {\n    this.afterConsoleLog(this.result);\n  }\n}\n\nexport type GraphNodes = Record<string, ComputedNode | StaticNode>;\n","import { PropFunction } from \"@/type\";\nimport { isObject } from \"./utils\";\n\nexport const propFunctionRegex = /^[a-zA-Z]+\\([^)]*\\)$/;\n\nconst propArrayFunction: PropFunction = (result, propId) => {\n  if (Array.isArray(result)) {\n    if (propId === \"length()\") {\n      return result.length;\n    }\n    if (propId === \"flat()\") {\n      return result.flat();\n    }\n    if (propId === \"toJSON()\") {\n      return JSON.stringify(result);\n    }\n    if (propId === \"isEmpty()\") {\n      return result.length === 0;\n    }\n    // array join\n    const matchJoin = propId.match(/^join\\(([,-]?)\\)$/);\n    if (matchJoin && Array.isArray(matchJoin)) {\n      return result.join(matchJoin[1] ?? \"\");\n    }\n  }\n  return undefined;\n};\n\nconst propObjectFunction: PropFunction = (result, propId) => {\n  if (isObject(result)) {\n    if (propId === \"keys()\") {\n      return Object.keys(result);\n    }\n    if (propId === \"values()\") {\n      return Object.values(result);\n    }\n    if (propId === \"toJSON()\") {\n      return JSON.stringify(result);\n    }\n  }\n  return undefined;\n};\n\nconst propStringFunction: PropFunction = (result, propId) => {\n  if (typeof result === \"string\") {\n    if (propId === \"codeBlock()\") {\n      const match = (\"\\n\" + result).match(/\\n```[a-zA-z]*([\\s\\S]*?)\\n```/);\n      if (match) {\n        return match[1];\n      }\n    }\n    if (propId === \"jsonParse()\") {\n      return JSON.parse(result);\n    }\n    if (propId === \"toNumber()\") {\n      const ret = Number(result);\n      if (!isNaN(ret)) {\n        return ret;\n      }\n    }\n  }\n  return undefined;\n};\nconst propNumberFunction: PropFunction = (result, propId) => {\n  if (result !== undefined && Number.isFinite(result)) {\n    if (propId === \"toString()\") {\n      return String(result);\n    }\n    const regex = /^add\\((-?\\d+)\\)$/;\n    const match = propId.match(regex);\n    if (match) {\n      return Number(result) + Number(match[1]);\n    }\n  }\n  return undefined;\n};\nconst propBooleanFunction: PropFunction = (result, propId) => {\n  if (typeof result === \"boolean\") {\n    if (propId === \"not()\") {\n      return !result;\n    }\n  }\n  return undefined;\n};\n\nexport const propFunctions = [propArrayFunction, propObjectFunction, propStringFunction, propNumberFunction, propBooleanFunction];\n","import { ResultData, DataSource, PropFunction } from \"@/type\";\nimport { isObject, isNull } from \"./utils\";\nimport { propFunctionRegex } from \"./prop_function\";\n\nconst getNestedData = (result: ResultData, propId: string, propFunctions: PropFunction[]) => {\n  const match = propId.match(propFunctionRegex);\n  if (match) {\n    for (const propFunction of propFunctions) {\n      const ret = propFunction(result, propId);\n      if (!isNull(ret)) {\n        return ret;\n      }\n    }\n  }\n\n  // for array.\n  if (Array.isArray(result)) {\n    // $0, $1. array value.\n    const regex = /^\\$(\\d+)$/;\n    const match = propId.match(regex);\n    if (match) {\n      const index = parseInt(match[1], 10);\n      return result[index];\n    }\n    if (propId === \"$last\") {\n      return result[result.length - 1];\n    }\n  } else if (isObject(result)) {\n    if (propId in result) {\n      return result[propId];\n    }\n  }\n  return undefined;\n};\n\nconst innerGetDataFromSource = (result: ResultData, propIds: string[] | undefined, propFunctions: PropFunction[]): ResultData | undefined => {\n  if (!isNull(result) && propIds && propIds.length > 0) {\n    const propId = propIds[0];\n    const ret = getNestedData(result, propId, propFunctions);\n    if (ret === undefined) {\n      console.error(`prop: ${propIds.join(\".\")} is not hit`);\n    }\n    if (propIds.length > 1) {\n      return innerGetDataFromSource(ret, propIds.slice(1), propFunctions);\n    }\n    return ret;\n  }\n  return result;\n};\n\nexport const getDataFromSource = (result: ResultData | undefined, source: DataSource, propFunctions: PropFunction[] = []): ResultData | undefined => {\n  if (!source.nodeId) {\n    return source.value;\n  }\n  return innerGetDataFromSource(result, source.propIds, propFunctions);\n};\n","import { DataSource, ResultData, PropFunction } from \"@/type\";\n\nimport { GraphNodes } from \"@/node\";\n\nimport { parseNodeName, isNamedInputs, isObject, isNull } from \"@/utils/utils\";\nimport { getDataFromSource } from \"@/utils/data_source\";\n\nconst resultsOfInner = (input: any, nodes: GraphNodes, propFunctions: PropFunction[]): ResultData => {\n  if (Array.isArray(input)) {\n    return input.map((inp) => resultsOfInner(inp, nodes, propFunctions));\n  }\n  if (isNamedInputs(input)) {\n    return resultsOf(input, nodes, propFunctions);\n  }\n  if (typeof input === \"string\") {\n    const templateMatch = [...input.matchAll(/\\${(:[^}]+)}/g)].map((m) => m[1]);\n    if (templateMatch.length > 0) {\n      const results = resultsOfInner(templateMatch, nodes, propFunctions);\n      return Array.from(templateMatch.keys()).reduce((tmp, key) => {\n        return tmp.replaceAll(\"${\" + templateMatch[key] + \"}\", (results as any)[key]);\n      }, input);\n    }\n  }\n  return resultOf(parseNodeName(input), nodes, propFunctions);\n};\n\nexport const resultsOf = (inputs: Record<string, any> | Array<string>, nodes: GraphNodes, propFunctions: PropFunction[]) => {\n  // for inputs. TODO remove if array input is not supported\n  if (Array.isArray(inputs)) {\n    return inputs.reduce((tmp: Record<string, ResultData>, key) => {\n      tmp[key] = resultsOfInner(key, nodes, propFunctions);\n      return tmp;\n    }, {});\n  }\n  return Object.keys(inputs).reduce((tmp: Record<string, ResultData>, key) => {\n    const input = inputs[key];\n    tmp[key] = isNamedInputs(input) ? resultsOf(input, nodes, propFunctions) : resultsOfInner(input, nodes, propFunctions);\n    return tmp;\n  }, {});\n};\n\nexport const resultOf = (source: DataSource, nodes: GraphNodes, propFunctions: PropFunction[]) => {\n  const { result } = source.nodeId ? nodes[source.nodeId] : { result: undefined };\n  return getDataFromSource(result, source, propFunctions);\n};\n\n// clean up object for anyInput\nexport const cleanResultInner = (results: ResultData): ResultData | null => {\n  if (Array.isArray(results)) {\n    return results.map((result: ResultData) => cleanResultInner(result)).filter((result) => !isNull(result));\n  }\n\n  if (isObject(results)) {\n    return Object.keys(results).reduce((tmp: Record<string, ResultData>, key: string) => {\n      const value = cleanResultInner(results[key]);\n      if (!isNull(value)) {\n        tmp[key] = value;\n      }\n      return tmp;\n    }, {});\n  }\n\n  return results;\n};\n\nexport const cleanResult = (results: Record<string, ResultData | undefined>) => {\n  return Object.keys(results).reduce((tmp: Record<string, ResultData | undefined>, key: string) => {\n    const value = cleanResultInner(results[key]);\n    if (!isNull(value)) {\n      tmp[key] = value;\n    }\n    return tmp;\n  }, {});\n};\n","export const graphDataAttributeKeys = [\"nodes\", \"concurrency\", \"agentId\", \"loop\", \"verbose\", \"version\"];\n\nexport const computedNodeAttributeKeys = [\n  \"inputs\",\n  \"anyInput\",\n  \"params\",\n  \"retry\",\n  \"timeout\",\n  \"agent\",\n  \"graph\",\n  \"graphLoader\",\n  \"isResult\",\n  \"priority\",\n  \"if\",\n  \"unless\",\n  \"filterParams\",\n  \"console\",\n  \"passThrough\",\n];\nexport const staticNodeAttributeKeys = [\"value\", \"update\", \"isResult\", \"console\"];\n\nexport class ValidationError extends Error {\n  constructor(message: string) {\n    super(`\\x1b[41m${message}\\x1b[0m`); // Pass the message to the base Error class\n\n    // Set the prototype explicitly to ensure correct prototype chain\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n}\n","import { GraphData } from \"@/type\";\nimport { graphDataAttributeKeys, ValidationError } from \"@/validators/common\";\n\nexport const graphNodesValidator = (data: GraphData) => {\n  if (data.nodes === undefined) {\n    throw new ValidationError(\"Invalid Graph Data: no nodes\");\n  }\n  if (typeof data.nodes !== \"object\") {\n    throw new ValidationError(\"Invalid Graph Data: invalid nodes\");\n  }\n  if (Array.isArray(data.nodes)) {\n    throw new ValidationError(\"Invalid Graph Data: nodes must be object\");\n  }\n  if (Object.keys(data.nodes).length === 0) {\n    throw new ValidationError(\"Invalid Graph Data: nodes is empty\");\n  }\n  Object.keys(data).forEach((key) => {\n    if (!graphDataAttributeKeys.includes(key)) {\n      throw new ValidationError(\"Graph Data does not allow \" + key);\n    }\n  });\n};\nexport const graphDataValidator = (data: GraphData) => {\n  if (data.loop) {\n    if (data.loop.count === undefined && data.loop.while === undefined) {\n      throw new ValidationError(\"Loop: Either count or while is required in loop\");\n    }\n    if (data.loop.count !== undefined && data.loop.while !== undefined) {\n      throw new ValidationError(\"Loop: Both count and while cannot be set\");\n    }\n  }\n  if (data.concurrency !== undefined) {\n    if (!Number.isInteger(data.concurrency)) {\n      throw new ValidationError(\"Concurrency must be an integer\");\n    }\n    if (data.concurrency < 1) {\n      throw new ValidationError(\"Concurrency must be a positive integer\");\n    }\n  }\n};\n","import { GraphData } from \"@/type\";\n\nimport { graphNodesValidator, graphDataValidator } from \"@/validators/graph_data_validator\";\nimport { nodeValidator } from \"@/validators/nodeValidator\";\nimport { staticNodeValidator } from \"@/validators/static_node_validator\";\nimport { computedNodeValidator } from \"@/validators/computed_node_validator\";\nimport { relationValidator } from \"@/validators/relation_validator\";\nimport { agentValidator } from \"@/validators/agent_validator\";\n\nexport const validateGraphData = (data: GraphData, agentIds: string[]) => {\n  graphNodesValidator(data);\n  graphDataValidator(data);\n  const computedNodeIds: string[] = [];\n  const staticNodeIds: string[] = [];\n  const graphAgentIds = new Set<string>();\n  Object.keys(data.nodes).forEach((nodeId) => {\n    const node = data.nodes[nodeId];\n    const isStaticNode = \"value\" in node;\n    nodeValidator(node);\n    const agentId = isStaticNode ? \"\" : node.agent;\n    isStaticNode && staticNodeValidator(node) && staticNodeIds.push(nodeId);\n    !isStaticNode && computedNodeValidator(node) && computedNodeIds.push(nodeId) && typeof agentId === \"string\" && graphAgentIds.add(agentId);\n  });\n  agentValidator(graphAgentIds, new Set<string>(agentIds));\n  relationValidator(data, staticNodeIds, computedNodeIds);\n\n  return true;\n};\n","import { NodeData, StaticNodeData, ComputedNodeData } from \"@/type\";\nimport { ValidationError } from \"@/validators/common\";\n\nexport const nodeValidator = (nodeData: NodeData) => {\n  if ((nodeData as ComputedNodeData).agent && (nodeData as StaticNodeData).value) {\n    throw new ValidationError(\"Cannot set both agent and value\");\n  }\n  if (!(\"agent\" in nodeData) && !(\"value\" in nodeData)) {\n    throw new ValidationError(\"Either agent or value is required\");\n  }\n  return true;\n};\n","import { StaticNodeData } from \"@/type\";\nimport { staticNodeAttributeKeys, ValidationError } from \"@/validators/common\";\n\nexport const staticNodeValidator = (nodeData: StaticNodeData) => {\n  Object.keys(nodeData).forEach((key) => {\n    if (!staticNodeAttributeKeys.includes(key)) {\n      throw new ValidationError(\"Static node does not allow \" + key);\n    }\n  });\n  return true;\n};\n","import { ComputedNodeData } from \"@/type\";\nimport { computedNodeAttributeKeys, ValidationError } from \"@/validators/common\";\n\nexport const computedNodeValidator = (nodeData: ComputedNodeData) => {\n  Object.keys(nodeData).forEach((key) => {\n    if (!computedNodeAttributeKeys.includes(key)) {\n      throw new ValidationError(\"Computed node does not allow \" + key);\n    }\n  });\n  return true;\n};\n","import { ValidationError } from \"@/validators/common\";\n\nexport const agentValidator = (graphAgentIds: Set<string>, agentIds: Set<string>) => {\n  graphAgentIds.forEach((agentId) => {\n    if (!agentIds.has(agentId)) {\n      throw new ValidationError(\"Invalid Agent : \" + agentId + \" is not in AgentFunctionInfoDictionary.\");\n    }\n  });\n  return true;\n};\n","import { GraphData } from \"@/type\";\nimport { parseNodeName } from \"@/utils/utils\";\nimport { ValidationError } from \"@/validators/common\";\nimport { inputs2dataSources, dataSourceNodeIds } from \"@/utils/nodeUtils\";\n\nexport const relationValidator = (data: GraphData, staticNodeIds: string[], computedNodeIds: string[]) => {\n  const nodeIds = new Set<string>(Object.keys(data.nodes));\n\n  const pendings: Record<string, Set<string>> = {};\n  const waitlist: Record<string, Set<string>> = {};\n\n  // validate input relation and set pendings and wait list\n  computedNodeIds.forEach((computedNodeId) => {\n    const nodeData = data.nodes[computedNodeId];\n    pendings[computedNodeId] = new Set<string>();\n\n    const dataSourceValidator = (sourceType: string, sourceNodeIds: string[]) => {\n      sourceNodeIds.forEach((sourceNodeId) => {\n        if (sourceNodeId) {\n          if (!nodeIds.has(sourceNodeId)) {\n            throw new ValidationError(`${sourceType} not match: NodeId ${computedNodeId}, Inputs: ${sourceNodeId}`);\n          }\n          waitlist[sourceNodeId] === undefined && (waitlist[sourceNodeId] = new Set<string>());\n          pendings[computedNodeId].add(sourceNodeId);\n          waitlist[sourceNodeId].add(computedNodeId);\n        }\n      });\n    };\n    if (\"agent\" in nodeData && nodeData) {\n      if (nodeData.inputs) {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources(nodeData.inputs));\n        dataSourceValidator(\"Inputs\", sourceNodeIds);\n      }\n      if (nodeData.if) {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources({ if: nodeData.if }));\n        dataSourceValidator(\"If\", sourceNodeIds);\n      }\n      if (nodeData.unless) {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources({ unless: nodeData.unless }));\n        dataSourceValidator(\"Unless\", sourceNodeIds);\n      }\n      if (nodeData.graph && typeof nodeData?.graph === \"string\") {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources({ graph: nodeData.graph }));\n        dataSourceValidator(\"Graph\", sourceNodeIds);\n      }\n    }\n  });\n\n  // TODO. validate update\n  staticNodeIds.forEach((staticNodeId) => {\n    const nodeData = data.nodes[staticNodeId];\n    if (\"value\" in nodeData && nodeData.update) {\n      const update = nodeData.update;\n      const updateNodeId = parseNodeName(update).nodeId;\n      if (!updateNodeId) {\n        throw new ValidationError(\"Update it a literal\");\n      }\n      if (!nodeIds.has(updateNodeId)) {\n        throw new ValidationError(`Update not match: NodeId ${staticNodeId}, update: ${update}`);\n      }\n    }\n  });\n\n  const cycle = (possibles: string[]) => {\n    possibles.forEach((possobleNodeId) => {\n      (waitlist[possobleNodeId] || []).forEach((waitingNodeId) => {\n        pendings[waitingNodeId].delete(possobleNodeId);\n      });\n    });\n\n    const running: string[] = [];\n    Object.keys(pendings).forEach((pendingNodeId) => {\n      if (pendings[pendingNodeId].size === 0) {\n        running.push(pendingNodeId);\n        delete pendings[pendingNodeId];\n      }\n    });\n    return running;\n  };\n\n  let runningQueue = cycle(staticNodeIds);\n  if (runningQueue.length === 0) {\n    throw new ValidationError(\"No Initial Runnning Node\");\n  }\n\n  do {\n    runningQueue = cycle(runningQueue);\n  } while (runningQueue.length > 0);\n\n  if (Object.keys(pendings).length > 0) {\n    throw new ValidationError(\"Some nodes are not executed: \" + Object.keys(pendings).join(\", \"));\n  }\n};\n","import { ComputedNode } from \"@/node\";\nimport { assert } from \"@/utils/utils\";\n\ntype TaskEntry = {\n  node: ComputedNode;\n  graphId: string;\n  callback: (node: ComputedNode) => void;\n};\n\n// TaskManage object controls the concurrency of ComputedNode execution.\n//\n// NOTE: A TaskManager instance will be shared between parent graph and its children\n// when nested agents are involved.\nexport class TaskManager {\n  private concurrency: number;\n  private taskQueue: Array<TaskEntry> = [];\n  private runningNodes = new Set<ComputedNode>();\n\n  constructor(concurrency: number) {\n    this.concurrency = concurrency;\n  }\n\n  // This internal method dequeus a task from the task queue\n  // and call the associated callback method, if the number of\n  // running task is lower than the spcified limit.\n  private dequeueTaskIfPossible() {\n    if (this.runningNodes.size < this.concurrency) {\n      const task = this.taskQueue.shift();\n      if (task) {\n        this.runningNodes.add(task.node);\n        task.callback(task.node);\n      }\n    }\n  }\n\n  // Node will call this method to put itself in the execution queue.\n  // We call the associated callback function when it is dequeued.\n  public addTask(node: ComputedNode, graphId: string, callback: (node: ComputedNode) => void) {\n    // Finder tasks in the queue, which has either the same or higher priority.\n    const count = this.taskQueue.filter((task) => {\n      return task.node.priority >= node.priority;\n    }).length;\n    assert(count <= this.taskQueue.length, \"TaskManager.addTask: Something is really wrong.\");\n    this.taskQueue.splice(count, 0, { node, graphId, callback });\n    this.dequeueTaskIfPossible();\n  }\n\n  public isRunning(graphId: string) {\n    const count = [...this.runningNodes].filter((node) => {\n      return node.graphId == graphId;\n    }).length;\n    return count > 0 || Array.from(this.taskQueue).filter((data) => data.graphId === graphId).length > 0;\n  }\n\n  // Node MUST call this method once the execution of agent function is completed\n  // either successfully or not.\n  public onComplete(node: ComputedNode) {\n    assert(this.runningNodes.has(node), `TaskManager.onComplete node(${node.nodeId}) is not in list`);\n    this.runningNodes.delete(node);\n    this.dequeueTaskIfPossible();\n  }\n\n  // Node will call this method before it hands the task manager from the graph\n  // to a nested agent. We need to make it sure that there is enough room to run\n  // computed nodes inside the nested graph to avoid a deadlock.\n  public prepareForNesting() {\n    this.concurrency++;\n  }\n\n  public restoreAfterNesting() {\n    this.concurrency--;\n  }\n\n  public getStatus(verbose: boolean = false) {\n    const runningNodes = Array.from(this.runningNodes).map((node) => node.nodeId);\n    const queuedNodes = this.taskQueue.map((task) => task.node.nodeId);\n    const nodes = verbose ? { runningNodes, queuedNodes } : {};\n    return {\n      concurrency: this.concurrency,\n      queue: this.taskQueue.length,\n      running: this.runningNodes.size,\n      ...nodes,\n    };\n  }\n}\n","import {\n  AgentFunctionInfoDictionary,\n  AgentFilterInfo,\n  GraphData,\n  DataSource,\n  LoopData,\n  ResultDataDictionary,\n  ResultData,\n  DefaultResultData,\n  GraphOptions,\n  PropFunction,\n  GraphDataLoader,\n} from \"@/type\";\nimport { TransactionLog } from \"@/transaction_log\";\n\nimport { ComputedNode, StaticNode, GraphNodes } from \"@/node\";\n\nimport { resultsOf, resultOf, cleanResult } from \"@/utils/result\";\nimport { propFunctions } from \"@/utils/prop_function\";\nimport { parseNodeName, assert, isLogicallyTrue } from \"@/utils/utils\";\nimport { getDataFromSource } from \"@/utils/data_source\";\n\nimport { validateGraphData } from \"@/validator\";\nimport { TaskManager } from \"@/task_manager\";\n\nexport const defaultConcurrency = 8;\nexport const graphDataLatestVersion = 0.5;\n\nexport class GraphAI {\n  public readonly version: number;\n  private readonly graphId: string;\n  private readonly data: GraphData;\n  private readonly loop?: LoopData;\n  private readonly logs: Array<TransactionLog> = [];\n  public readonly bypassAgentIds: string[];\n  public readonly config?: Record<string, unknown> = {};\n  public readonly agentFunctionInfoDictionary: AgentFunctionInfoDictionary;\n  public readonly taskManager: TaskManager;\n  public readonly agentFilters: AgentFilterInfo[];\n  public readonly retryLimit?: number;\n  private readonly propFunctions: PropFunction[];\n  public readonly graphLoader?: GraphDataLoader;\n\n  public nodes: GraphNodes;\n  public onLogCallback = (__log: TransactionLog, __isUpdate: boolean) => {};\n  public verbose: boolean; // REVIEW: Do we need this?\n\n  private onComplete: () => void;\n  private repeatCount = 0;\n\n  // This method is called when either the GraphAI obect was created,\n  // or we are about to start n-th iteration (n>2).\n  private createNodes(data: GraphData) {\n    const nodes = Object.keys(data.nodes).reduce((_nodes: GraphNodes, nodeId: string) => {\n      const nodeData = data.nodes[nodeId];\n      if (\"value\" in nodeData) {\n        _nodes[nodeId] = new StaticNode(nodeId, nodeData, this);\n      } else if (\"agent\" in nodeData) {\n        _nodes[nodeId] = new ComputedNode(this.graphId, nodeId, nodeData, this);\n      } else {\n        throw new Error(\"Unknown node type (neither value nor agent): \" + nodeId);\n      }\n      return _nodes;\n    }, {});\n\n    // Generate the waitlist for each node.\n    Object.keys(nodes).forEach((nodeId) => {\n      const node = nodes[nodeId];\n      if (node.isComputedNode) {\n        node.pendings.forEach((pending) => {\n          if (nodes[pending]) {\n            nodes[pending].waitlist.add(nodeId); // previousNode\n          } else {\n            throw new Error(`createNode: invalid input ${pending} for node, ${nodeId}`);\n          }\n        });\n      }\n    });\n    return nodes;\n  }\n\n  private getValueFromResults(source: DataSource, results: ResultDataDictionary<DefaultResultData>) {\n    return getDataFromSource(source.nodeId ? results[source.nodeId] : undefined, source, this.propFunctions);\n  }\n\n  // for static\n  private initializeStaticNodes(enableConsoleLog: boolean = false) {\n    // If the result property is specified, inject it.\n    // If the previousResults exists (indicating we are in a loop),\n    // process the update property (nodeId or nodeId.propId).\n    Object.keys(this.data.nodes).forEach((nodeId) => {\n      const node = this.nodes[nodeId];\n      if (node?.isStaticNode) {\n        const value = node?.value;\n        if (value !== undefined) {\n          this.injectValue(nodeId, value, nodeId);\n        }\n        if (enableConsoleLog) {\n          node.consoleLog();\n        }\n      }\n    });\n  }\n\n  private updateStaticNodes(previousResults?: ResultDataDictionary<DefaultResultData>, enableConsoleLog: boolean = false) {\n    // If the result property is specified, inject it.\n    // If the previousResults exists (indicating we are in a loop),\n    // process the update property (nodeId or nodeId.propId).\n    Object.keys(this.data.nodes).forEach((nodeId) => {\n      const node = this.nodes[nodeId];\n      if (node?.isStaticNode) {\n        const update = node?.update;\n        if (update && previousResults) {\n          const result = this.getValueFromResults(update, previousResults);\n          this.injectValue(nodeId, result, update.nodeId);\n        }\n        if (enableConsoleLog) {\n          node.consoleLog();\n        }\n      }\n    });\n  }\n\n  constructor(\n    data: GraphData,\n    agentFunctionInfoDictionary: AgentFunctionInfoDictionary,\n    options: GraphOptions = {\n      taskManager: undefined,\n      agentFilters: [],\n      bypassAgentIds: [],\n      config: {},\n      graphLoader: undefined,\n    },\n  ) {\n    if (!data.version && !options.taskManager) {\n      console.warn(\"------------ missing version number\");\n    }\n    this.version = data.version ?? graphDataLatestVersion;\n    if (this.version < graphDataLatestVersion) {\n      console.warn(`------------ upgrade to ${graphDataLatestVersion}!`);\n    }\n    this.retryLimit = data.retry; // optional\n    this.graphId = URL.createObjectURL(new Blob()).slice(-36);\n    this.data = data;\n    this.agentFunctionInfoDictionary = agentFunctionInfoDictionary;\n    this.propFunctions = propFunctions;\n    this.taskManager = options.taskManager ?? new TaskManager(data.concurrency ?? defaultConcurrency);\n    this.agentFilters = options.agentFilters ?? [];\n    this.bypassAgentIds = options.bypassAgentIds ?? [];\n    this.config = options.config;\n    this.graphLoader = options.graphLoader;\n    this.loop = data.loop;\n    this.verbose = data.verbose === true;\n    this.onComplete = () => {\n      throw new Error(\"SOMETHING IS WRONG: onComplete is called without run()\");\n    };\n\n    validateGraphData(data, [...Object.keys(agentFunctionInfoDictionary), ...this.bypassAgentIds]);\n\n    this.nodes = this.createNodes(data);\n    this.initializeStaticNodes(true);\n  }\n\n  public getAgentFunctionInfo(agentId?: string) {\n    if (agentId && this.agentFunctionInfoDictionary[agentId]) {\n      return this.agentFunctionInfoDictionary[agentId];\n    }\n    if (agentId && this.bypassAgentIds.includes(agentId)) {\n      return {\n        agent: async () => {\n          return null;\n        },\n        inputs: null,\n      };\n    }\n    // We are not supposed to hit this error because the validator will catch it.\n    throw new Error(\"No agent: \" + agentId);\n  }\n\n  public asString() {\n    return Object.values(this.nodes)\n      .map((node) => node.asString())\n      .join(\"\\n\");\n  }\n\n  // Public API\n  public results<T = DefaultResultData>(all: boolean): ResultDataDictionary<T> {\n    return Object.keys(this.nodes)\n      .filter((nodeId) => all || this.nodes[nodeId].isResult)\n      .reduce((results: ResultDataDictionary<T>, nodeId) => {\n        const node = this.nodes[nodeId];\n        if (node.result !== undefined) {\n          results[nodeId] = node.result as T;\n        }\n        return results;\n      }, {});\n  }\n\n  // Public API\n  public errors(): Record<string, Error> {\n    return Object.keys(this.nodes).reduce((errors: Record<string, Error>, nodeId) => {\n      const node = this.nodes[nodeId];\n      if (node.isComputedNode) {\n        if (node.error !== undefined) {\n          errors[nodeId] = node.error;\n        }\n      }\n      return errors;\n    }, {});\n  }\n\n  private pushReadyNodesIntoQueue() {\n    // Nodes without pending data should run immediately.\n    Object.keys(this.nodes).forEach((nodeId) => {\n      const node = this.nodes[nodeId];\n      if (node.isComputedNode) {\n        this.pushQueueIfReady(node);\n      }\n    });\n  }\n\n  private pushQueueIfReady(node: ComputedNode) {\n    if (node.isReadyNode()) {\n      this.pushQueue(node);\n    }\n  }\n\n  public pushQueueIfReadyAndRunning(node: ComputedNode) {\n    if (this.isRunning()) {\n      this.pushQueueIfReady(node);\n    }\n  }\n\n  // for computed\n  public pushQueue(node: ComputedNode) {\n    node.beforeAddTask();\n\n    this.taskManager.addTask(node, this.graphId, (_node) => {\n      assert(node.nodeId === _node.nodeId, \"GraphAI.pushQueue node mismatch\");\n      node.execute();\n    });\n  }\n\n  // Public API\n  public async run<T = DefaultResultData>(all: boolean = false): Promise<ResultDataDictionary<T>> {\n    if (this.isRunning()) {\n      throw new Error(\"This GraphUI instance is already running\");\n    }\n\n    this.pushReadyNodesIntoQueue();\n\n    if (!this.isRunning()) {\n      console.warn(\"-- nothing to execute\");\n      return {};\n    }\n\n    return new Promise((resolve, reject) => {\n      this.onComplete = () => {\n        const errors = this.errors();\n        const nodeIds = Object.keys(errors);\n        if (nodeIds.length > 0) {\n          reject(errors[nodeIds[0]]);\n        } else {\n          resolve(this.results(all));\n        }\n      };\n    });\n  }\n\n  // Public only for testing\n  public isRunning() {\n    return this.taskManager.isRunning(this.graphId);\n  }\n\n  // callback from execute\n  public onExecutionComplete(node: ComputedNode) {\n    this.taskManager.onComplete(node);\n    if (this.isRunning() || this.processLoopIfNecessary()) {\n      return; // continue running\n    }\n    this.onComplete(); // Nothing to run. Finish it.\n  }\n\n  // Must be called only from onExecutionComplete righ after removeRunning\n  // Check if there is any running computed nodes.\n  // In case of no running computed note, start the another iteration if ncessary (loop)\n  private processLoopIfNecessary() {\n    this.repeatCount++;\n    const loop = this.loop;\n    if (!loop) {\n      return false;\n    }\n\n    // We need to update static nodes, before checking the condition\n    const previousResults = this.results(true); // results from previous loop\n    this.updateStaticNodes(previousResults);\n\n    if (loop.count === undefined || this.repeatCount < loop.count) {\n      if (loop.while) {\n        const source = parseNodeName(loop.while);\n        const value = this.getValueFromResults(source, this.results(true));\n        // NOTE: We treat an empty array as false.\n        if (!isLogicallyTrue(value)) {\n          return false; // while condition is not met\n        }\n      }\n      this.nodes = this.createNodes(this.data);\n      this.initializeStaticNodes();\n      this.updateStaticNodes(previousResults, true);\n\n      this.pushReadyNodesIntoQueue();\n      return true; // Indicating that we are going to continue.\n    }\n    return false;\n  }\n\n  public setLoopLog(log: TransactionLog) {\n    log.isLoop = !!this.loop;\n    log.repeatCount = this.repeatCount;\n  }\n\n  public appendLog(log: TransactionLog) {\n    this.logs.push(log);\n    this.onLogCallback(log, false);\n  }\n\n  public updateLog(log: TransactionLog) {\n    this.onLogCallback(log, true);\n  }\n\n  // Public API\n  public transactionLogs() {\n    return this.logs;\n  }\n\n  // Public API\n  public injectValue(nodeId: string, value: ResultData, injectFrom?: string): void {\n    const node = this.nodes[nodeId];\n    if (node && node.isStaticNode) {\n      node.injectValue(value, injectFrom);\n    } else {\n      throw new Error(`injectValue with Invalid nodeId, ${nodeId}`);\n    }\n  }\n\n  public resultsOf(inputs?: Array<any> | Record<string, any>, anyInput: boolean = false) {\n    const results = resultsOf(inputs ?? [], this.nodes, this.propFunctions);\n    if (anyInput) {\n      return cleanResult(results);\n    }\n    return results;\n  }\n  public resultOf(source: DataSource) {\n    return resultOf(source, this.nodes, this.propFunctions);\n  }\n}\n"],"names":["parseNodeName","inputNodeId","regex","match","value","parts","split","length","nodeId","propIds","slice","assert","condition","message","isWarn","Error","console","warn","isObject","x","isNull","data","strIntentionalError","defaultAgentInfo","name","samples","inputs","params","result","description","category","author","repository","license","objectToKeyArray","innerData","ret","Object","keys","forEach","key","push","tmp","debugResultKeyInner","Array","isArray","from","reduce","index","String","isLogicallyTrue","isNamedInputs","namedInputs","inputs2dataSources","map","inp","flat","values","input","templateMatch","matchAll","m","dataSourceNodeIds","sources","filter","source","NodeState","TransactionLog","constructor","this","state","Waiting","initForComputedNode","node","graph","agentId","getAgentId","appendLog","onInjected","injectFrom","isUpdating","endTime","Date","now","setLoopLog","updateLog","onComplete","localLog","resultKeys","objectKeys","join","log","beforeExecute","transactionId","retryCount","undefined","startTime","dataSources","inputsData","beforeAddTask","onError","errorMessage","onSkipped","Node","waitlist","Set","asString","onSetResult","waitingNodeId","waitingNode","nodes","isComputedNode","removePending","pushQueueIfReadyAndRunning","afterConsoleLog","after","JSON","stringify","ComputedNode","graphId","super","isStaticNode","filterParams","passThrough","retryLimit","retry","timeout","isResult","priority","anyInput","pendings","includes","agent","agentFunction","async","nestedGraph","addPendingNode","graphLoader","if","ifSource","unless","unlessSource","dynamicParams","dataSource","add","isReadyNode","size","resultOf","Skipped","error","execute","onExecutionComplete","checkDataAvailability","resultsOf","some","Queued","clear","delete","isCurrentTransaction","executeTimeout","Executing","TimedOut","shouldApplyAgentFilter","agentFilter","agentIds","nodeIds","agentFilterHandler","context","next","innerContext","agentFilters","previousResults","prepareExecute","setTimeout","getAgentFunctionInfo","getContext","taskManager","prepareForNesting","onLogCallback","graphData","agents","agentFunctionInfoDictionary","forNestedGraph","graphOptions","bypassAgentIds","config","beforeConsoleLog","restoreAfterNesting","Completed","getResult","errorProcess","Failed","getParams","getInputs","a","inputSchema","debugInfo","getDebugInfo","r","verbose","version","before","StaticNode","update","injectValue","Injected","consoleLog","propFunctionRegex","propFunctions","propId","matchJoin","parse","Number","isNaN","isFinite","innerGetDataFromSource","propFunction","parseInt","getNestedData","getDataFromSource","resultsOfInner","results","replaceAll","cleanResultInner","graphDataAttributeKeys","computedNodeAttributeKeys","staticNodeAttributeKeys","ValidationError","setPrototypeOf","prototype","validateGraphData","graphNodesValidator","loop","count","while","concurrency","isInteger","graphDataValidator","computedNodeIds","staticNodeIds","graphAgentIds","nodeData","nodeValidator","computedNodeValidator","has","agentValidator","computedNodeId","dataSourceValidator","sourceType","sourceNodeIds","sourceNodeId","staticNodeId","updateNodeId","cycle","possibles","possobleNodeId","running","pendingNodeId","runningQueue","relationValidator","TaskManager","taskQueue","runningNodes","dequeueTaskIfPossible","task","shift","callback","addTask","splice","isRunning","getStatus","queuedNodes","queue","graphDataLatestVersion","createNodes","_nodes","pending","getValueFromResults","initializeStaticNodes","enableConsoleLog","updateStaticNodes","options","logs","__log","__isUpdate","repeatCount","URL","createObjectURL","Blob","all","errors","pushReadyNodesIntoQueue","pushQueueIfReady","pushQueue","_node","run","Promise","resolve","reject","processLoopIfNecessary","isLoop","transactionLogs","cleanResult","mock","milliseconds"],"mappings":"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"}