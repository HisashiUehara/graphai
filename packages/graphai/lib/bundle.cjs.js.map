{"version":3,"file":"bundle.cjs.js","sources":["../src/utils/utils.ts","../src/utils/nodeUtils.ts","../src/type.ts","../src/transaction_log.ts","../src/utils/prop_function.ts","../src/utils/data_source.ts","../src/utils/result.ts","../src/node.ts","../src/validators/common.ts","../src/validators/graph_data_validator.ts","../src/validator.ts","../src/validators/nodeValidator.ts","../src/validators/static_node_validator.ts","../src/validators/computed_node_validator.ts","../src/validators/agent_validator.ts","../src/validators/relation_validator.ts","../src/task_manager.ts","../src/graphai.ts"],"sourcesContent":["import { DataSource, AgentFunction, DefaultInputData } from \"@/type\";\n\nexport const sleep = async (milliseconds: number) => {\n  return await new Promise((resolve) => setTimeout(resolve, milliseconds));\n};\n\nexport const parseNodeName = (inputNodeId: any, isSelfNode: boolean = false): DataSource => {\n  if (isSelfNode) {\n    if (typeof inputNodeId === \"string\" && inputNodeId[0] === \".\") {\n      const parts = inputNodeId.split(\".\");\n      return { nodeId: \"self\", propIds: parts.slice(1) };\n    }\n    return { value: inputNodeId };\n  }\n  if (typeof inputNodeId === \"string\") {\n    const regex = /^:(.*)$/;\n    const match = inputNodeId.match(regex);\n    if (!match) {\n      return { value: inputNodeId }; // string literal\n    }\n    const parts = match[1].split(\".\");\n    if (parts.length == 1) {\n      return { nodeId: parts[0] };\n    }\n    return { nodeId: parts[0], propIds: parts.slice(1) };\n  }\n  return { value: inputNodeId }; // non-string literal\n};\n\nexport function assert(condition: boolean, message: string, isWarn: boolean = false): asserts condition {\n  if (!condition) {\n    if (!isWarn) {\n      throw new Error(message);\n    }\n    console.warn(\"warn: \" + message);\n  }\n}\n\nexport const isObject = (x: unknown) => {\n  return x !== null && typeof x === \"object\";\n};\n\nexport const isNull = (data: unknown) => {\n  return data === null || data === undefined;\n};\n\nexport const strIntentionalError = \"Intentional Error for Debugging\";\n\nexport const defaultAgentInfo = {\n  name: \"defaultAgentInfo\",\n  samples: [\n    {\n      inputs: [],\n      params: {},\n      result: {},\n    },\n  ],\n  description: \"\",\n  category: [],\n  author: \"\",\n  repository: \"\",\n  license: \"\",\n};\n\nexport const agentInfoWrapper = (agent: AgentFunction<any, any, any>) => {\n  return {\n    agent,\n    mock: agent,\n    ...defaultAgentInfo,\n  };\n};\n\nconst objectToKeyArray = (innerData: any) => {\n  const ret: string[][] = [];\n  Object.keys(innerData).forEach((key: string) => {\n    ret.push([key]);\n    if (Object.keys(innerData[key]).length > 0) {\n      objectToKeyArray(innerData[key]).forEach((tmp: string[]) => {\n        ret.push([key, ...tmp]);\n      });\n    }\n  });\n  return ret;\n};\n\nexport const debugResultKey = (agentId: string, result: any) => {\n  return objectToKeyArray({ [agentId]: debugResultKeyInner(result) }).map((objectKeys: string[]) => {\n    return \":\" + objectKeys.join(\".\");\n  });\n};\n\nconst debugResultKeyInner = (result: any) => {\n  if (result === null || result === undefined) {\n    return {};\n  }\n  if (typeof result === \"string\") {\n    return {};\n  }\n  if (Array.isArray(result)) {\n    return Array.from(result.keys()).reduce((tmp: Record<string, any>, index: number) => {\n      tmp[\"$\" + String(index)] = debugResultKeyInner(result[index]);\n      return tmp;\n    }, {});\n  }\n  return Object.keys(result).reduce((tmp: Record<string, any>, key: string) => {\n    tmp[key] = debugResultKeyInner(result[key]);\n    return tmp;\n  }, {});\n};\n\nexport const isLogicallyTrue = (value: any) => {\n  // Notice that empty aray is not true under GraphAI\n  if (Array.isArray(value) ? value.length === 0 : !value) {\n    return false;\n  }\n  return true;\n};\n\nexport const defaultTestContext = {\n  debugInfo: {\n    nodeId: \"test\",\n    retry: 0,\n    verbose: true,\n  },\n  params: {},\n  filterParams: {},\n  agents: {},\n  log: [],\n};\n\nexport const isNamedInputs = <NamedInput = DefaultInputData>(namedInputs: NamedInput) => {\n  return isObject(namedInputs) && !Array.isArray(namedInputs) && Object.keys(namedInputs || {}).length > 0;\n};\n","import { parseNodeName, isObject } from \"./utils\";\nimport { DataSource } from \"@/type\";\n\n// for dataSource\nexport const inputs2dataSources = (inputs: any): DataSource[] => {\n  if (Array.isArray(inputs)) {\n    return inputs.map((inp) => inputs2dataSources(inp)).flat();\n  }\n  if (isObject(inputs)) {\n    return Object.values(inputs)\n      .map((input) => inputs2dataSources(input))\n      .flat();\n  }\n  if (typeof inputs === \"string\") {\n    const templateMatch = [...inputs.matchAll(/\\${(:[^}]+)}/g)].map((m) => m[1]);\n    if (templateMatch.length > 0) {\n      return inputs2dataSources(templateMatch);\n    }\n  }\n\n  return parseNodeName(inputs) as any;\n};\n\nexport const dataSourceNodeIds = (sources: DataSource[]): string[] => {\n  return sources.filter((source: DataSource) => source.nodeId).map((source) => source.nodeId!);\n};\n","import type { TransactionLog } from \"@/transaction_log\";\nimport type { TaskManager } from \"@/task_manager\";\n\nexport enum NodeState {\n  Waiting = \"waiting\",\n  Queued = \"queued\",\n  Executing = \"executing\",\n  ExecutingServer = \"executing-server\",\n  Failed = \"failed\",\n  TimedOut = \"timed-out\",\n  Completed = \"completed\",\n  Injected = \"injected\",\n  Skipped = \"skipped\",\n}\n\nexport type DefaultResultData = Record<string, any> | string | number | boolean | Array<DefaultResultData>;\nexport type DefaultInputData = Record<string, any>;\nexport type ResultData<ResultType = DefaultResultData> = ResultType | undefined;\nexport type ResultDataDictionary<ResultType = DefaultResultData> = Record<string, ResultData<ResultType>>;\n\nexport type DefaultParamsType = Record<string, any>;\nexport type NodeDataParams<ParamsType = DefaultParamsType> = ParamsType; // Agent-specific parameters\n\nexport type PassThrough = Record<string, any>;\n\nexport type DataSource = {\n  nodeId?: string;\n  value?: any;\n  propIds?: string[];\n};\n\ntype ConsoleAttribute = boolean | string | Record<string, any>;\nexport type ConsoleElement = boolean | { before?: ConsoleAttribute; after?: ConsoleAttribute };\n\nexport type StaticNodeData = {\n  value?: ResultData; // initial value for static node.\n  update?: string; // nodeId (+.propId) to get value after a loop\n  isResult?: boolean;\n  console?: ConsoleElement;\n};\nexport type AgentAnonymousFunction = (...params: any[]) => unknown;\n\nexport type AgentFilterParams = Record<string, any>;\n\nexport type GraphDataLoaderOption = { fileName: string; option?: any };\n\nexport type ComputedNodeData = {\n  agent: string | AgentAnonymousFunction;\n  inputs?: Record<string, any>;\n  output?: Record<string, any>;\n  anyInput?: boolean; // any input makes this node ready\n  params?: NodeDataParams;\n  filterParams?: AgentFilterParams; // agent filter\n  retry?: number;\n  timeout?: number; // msec\n  if?: string; // conditional execution\n  unless?: string; // conditional execution\n  defaultValue?: ResultData;\n  graph?: GraphData | string;\n  graphLoader?: GraphDataLoaderOption;\n  isResult?: boolean;\n  priority?: number; // The default is 0.\n  passThrough?: PassThrough; // data that pass trough to result\n  console?: ConsoleElement;\n};\n\nexport type NodeData = StaticNodeData | ComputedNodeData;\n\nexport type LoopData = {\n  count?: number;\n  while?: string;\n};\n\nexport type GraphData = {\n  version?: number; // major version, 0.1, 0.2, ...\n  nodes: Record<string, NodeData>;\n  concurrency?: number;\n  loop?: LoopData;\n  verbose?: boolean;\n  retry?: number;\n  metadata?: any; // Stores information about GraphData. GraphAI itself is not used this data.\n};\n\nexport type GraphDataLoader = (loaderOption: GraphDataLoaderOption) => GraphData;\n\nexport type GraphOptions = {\n  agentFilters?: AgentFilterInfo[] | undefined;\n  taskManager?: TaskManager | undefined;\n  bypassAgentIds?: string[] | undefined;\n  config?: Record<string, unknown>;\n  graphLoader?: GraphDataLoader;\n};\n\nexport type CacheTypes = \"pureAgent\" | \"impureAgent\";\n\nexport type AgentFunctionContext<ParamsType = DefaultParamsType, NamedInputDataType = DefaultInputData> = {\n  params: NodeDataParams<ParamsType>;\n  inputSchema?: any;\n  namedInputs: NamedInputDataType;\n  debugInfo: {\n    verbose: boolean;\n    nodeId: string;\n    retry: number;\n    agentId?: string;\n    version?: number;\n    isResult?: boolean;\n  };\n  forNestedGraph?: {\n    graphData: GraphData; // nested graph\n    agents: AgentFunctionInfoDictionary; // for nested graph\n    graphOptions: GraphOptions;\n    onLogCallback?: (log: TransactionLog, isUpdate: boolean) => void;\n  };\n  cacheType?: CacheTypes;\n  filterParams: AgentFilterParams; // agent filter\n  agentFilters?: AgentFilterInfo[]; // TODO remove next version\n  log?: TransactionLog[];\n  config?: Record<string, unknown>;\n};\n\nexport type AgentFunction<ParamsType = DefaultParamsType, ResultType = DefaultResultData, NamedInputDataType = DefaultInputData> = (\n  context: AgentFunctionContext<ParamsType, NamedInputDataType>,\n) => Promise<ResultData<ResultType>>;\n\nexport type AgentFilterFunction<ParamsType = DefaultParamsType, ResultType = DefaultResultData, NamedInputDataType = DefaultInputData> = (\n  context: AgentFunctionContext<ParamsType, NamedInputDataType>,\n  agent: AgentFunction,\n) => Promise<ResultData<ResultType>>;\n\nexport type AgentFilterInfo = {\n  name: string;\n  agent: AgentFilterFunction;\n  agentIds?: string[];\n  nodeIds?: string[];\n  filterParams?: AgentFilterParams;\n};\n\nexport type AgentFunctionInfoSample = {\n  inputs: any;\n  params: DefaultParamsType;\n  result: any;\n  graph?: GraphData;\n};\n\nexport type AgentFunctionInfo = {\n  name: string;\n  agent: AgentFunction<any, any, any>;\n  mock: AgentFunction<any, any, any>;\n  inputs?: any;\n  output?: any;\n  outputFormat?: any;\n  params?: any;\n  samples: AgentFunctionInfoSample[];\n  description: string;\n  category: string[];\n  author: string;\n  repository: string;\n  license: string;\n  cacheType?: CacheTypes;\n  environmentVariables?: string[];\n  stream?: boolean;\n  apiKeys?: string[];\n  npms?: string[];\n};\n\nexport type AgentFunctionInfoDictionary = Record<string, AgentFunctionInfo>;\n\nexport type PropFunction = (result: ResultData, propId: string) => ResultData;\n","import { ResultData, NodeDataParams, NodeState } from \"@/type\";\nimport type { GraphAI } from \"@/graphai\";\nimport type { ComputedNode, StaticNode } from \"@/node\";\nimport { debugResultKey } from \"@/utils/utils\";\nimport { dataSourceNodeIds } from \"@/utils/nodeUtils\";\n\nexport class TransactionLog {\n  public nodeId: string;\n  public state: NodeState;\n  public startTime?: number;\n  public endTime?: number;\n  public retryCount?: number;\n  public agentId?: string;\n  public params?: NodeDataParams;\n  public inputs?: string[];\n  public inputsData?: Array<ResultData>;\n  public injectFrom?: string;\n  public errorMessage?: string;\n  public result?: ResultData;\n  public resultKeys?: string[];\n  public mapIndex?: number;\n  public isLoop?: boolean;\n  public repeatCount?: number;\n  public log?: TransactionLog[];\n  constructor(nodeId: string) {\n    this.nodeId = nodeId;\n    this.state = NodeState.Waiting;\n  }\n\n  public initForComputedNode(node: ComputedNode, graph: GraphAI) {\n    this.agentId = node.getAgentId();\n    this.params = node.params;\n    graph.appendLog(this);\n  }\n\n  public onInjected(node: StaticNode, graph: GraphAI, injectFrom?: string) {\n    const isUpdating = \"endTime\" in this;\n    this.result = node.result;\n    this.state = node.state;\n    this.endTime = Date.now();\n    this.injectFrom = injectFrom;\n    graph.setLoopLog(this);\n    // console.log(this)\n    if (isUpdating) {\n      graph.updateLog(this);\n    } else {\n      graph.appendLog(this);\n    }\n  }\n\n  public onComplete(node: ComputedNode, graph: GraphAI, localLog: TransactionLog[]) {\n    this.result = node.result;\n    this.resultKeys = debugResultKey(this.agentId || \"\", node.result);\n    this.state = node.state;\n    this.endTime = Date.now();\n    graph.setLoopLog(this);\n    if (localLog.length > 0) {\n      this.log = localLog;\n    }\n    graph.updateLog(this);\n  }\n\n  public beforeExecute(node: ComputedNode, graph: GraphAI, transactionId: number, inputs: ResultData[]) {\n    this.state = node.state;\n    this.retryCount = node.retryCount > 0 ? node.retryCount : undefined;\n    this.startTime = transactionId;\n    this.inputs = dataSourceNodeIds(node.dataSources);\n    this.inputsData = inputs.length > 0 ? inputs : undefined;\n    graph.setLoopLog(this);\n    graph.appendLog(this);\n  }\n\n  public beforeAddTask(node: ComputedNode, graph: GraphAI) {\n    this.state = node.state;\n    graph.setLoopLog(this);\n    graph.appendLog(this);\n  }\n\n  public onError(node: ComputedNode, graph: GraphAI, errorMessage: string) {\n    this.state = node.state;\n    this.errorMessage = errorMessage;\n    this.endTime = Date.now();\n    graph.setLoopLog(this);\n    graph.updateLog(this);\n  }\n\n  public onSkipped(node: ComputedNode, graph: GraphAI) {\n    this.state = node.state;\n    graph.setLoopLog(this);\n    graph.updateLog(this);\n  }\n}\n","import { PropFunction } from \"@/type\";\nimport { isObject } from \"./utils\";\n\nexport const propFunctionRegex = /^[a-zA-Z]+\\([^)]*\\)$/;\n\nconst propArrayFunction: PropFunction = (result, propId) => {\n  if (Array.isArray(result)) {\n    if (propId === \"length()\") {\n      return result.length;\n    }\n    if (propId === \"flat()\") {\n      return result.flat();\n    }\n    if (propId === \"toJSON()\") {\n      return JSON.stringify(result);\n    }\n    if (propId === \"isEmpty()\") {\n      return result.length === 0;\n    }\n    // array join\n    const matchJoin = propId.match(/^join\\(([,-\\s]?)\\)$/);\n    if (matchJoin && Array.isArray(matchJoin)) {\n      return result.join(matchJoin[1] ?? \"\");\n    }\n  }\n  return undefined;\n};\n\nconst propObjectFunction: PropFunction = (result, propId) => {\n  if (isObject(result)) {\n    if (propId === \"keys()\") {\n      return Object.keys(result);\n    }\n    if (propId === \"values()\") {\n      return Object.values(result);\n    }\n    if (propId === \"toJSON()\") {\n      return JSON.stringify(result);\n    }\n  }\n  return undefined;\n};\n\nconst propStringFunction: PropFunction = (result, propId) => {\n  if (typeof result === \"string\") {\n    if (propId === \"codeBlock()\") {\n      const match = (\"\\n\" + result).match(/\\n```[a-zA-z]*([\\s\\S]*?)\\n```/);\n      if (match) {\n        return match[1];\n      }\n    }\n    if (propId === \"jsonParse()\") {\n      return JSON.parse(result);\n    }\n    if (propId === \"toNumber()\") {\n      const ret = Number(result);\n      if (!isNaN(ret)) {\n        return ret;\n      }\n    }\n    if (propId === \"trim()\") {\n      return result.trim();\n    }\n    if (propId === \"toLowerCase()\") {\n      return result.toLowerCase();\n    }\n    if (propId === \"toUpperCase()\") {\n      return result.toUpperCase();\n    }\n    // split()\n  }\n  return undefined;\n};\nconst propNumberFunction: PropFunction = (result, propId) => {\n  if (result !== undefined && Number.isFinite(result)) {\n    if (propId === \"toString()\") {\n      return String(result);\n    }\n    const regex = /^add\\((-?\\d+)\\)$/;\n    const match = propId.match(regex);\n    if (match) {\n      return Number(result) + Number(match[1]);\n    }\n  }\n  return undefined;\n};\nconst propBooleanFunction: PropFunction = (result, propId) => {\n  if (typeof result === \"boolean\") {\n    if (propId === \"not()\") {\n      return !result;\n    }\n  }\n  return undefined;\n};\n\nexport const propFunctions = [propArrayFunction, propObjectFunction, propStringFunction, propNumberFunction, propBooleanFunction];\n","import { ResultData, DataSource, PropFunction } from \"@/type\";\nimport { isObject, isNull } from \"./utils\";\nimport { propFunctionRegex } from \"./prop_function\";\n\nconst getNestedData = (result: ResultData, propId: string, propFunctions: PropFunction[]) => {\n  const match = propId.match(propFunctionRegex);\n  if (match) {\n    for (const propFunction of propFunctions) {\n      const ret = propFunction(result, propId);\n      if (!isNull(ret)) {\n        return ret;\n      }\n    }\n  }\n\n  // for array.\n  if (Array.isArray(result)) {\n    // $0, $1. array value.\n    const regex = /^\\$(\\d+)$/;\n    const match = propId.match(regex);\n    if (match) {\n      const index = parseInt(match[1], 10);\n      return result[index];\n    }\n    if (propId === \"$last\") {\n      return result[result.length - 1];\n    }\n  } else if (isObject(result)) {\n    if (propId in result) {\n      return result[propId];\n    }\n  }\n  return undefined;\n};\n\nconst innerGetDataFromSource = (result: ResultData, propIds: string[] | undefined, propFunctions: PropFunction[]): ResultData | undefined => {\n  if (!isNull(result) && propIds && propIds.length > 0) {\n    const propId = propIds[0];\n    const ret = getNestedData(result, propId, propFunctions);\n    if (ret === undefined) {\n      console.error(`prop: ${propIds.join(\".\")} is not hit`);\n    }\n    if (propIds.length > 1) {\n      return innerGetDataFromSource(ret, propIds.slice(1), propFunctions);\n    }\n    return ret;\n  }\n  return result;\n};\n\nexport const getDataFromSource = (result: ResultData | undefined, source: DataSource, propFunctions: PropFunction[] = []): ResultData | undefined => {\n  if (!source.nodeId) {\n    return source.value;\n  }\n  return innerGetDataFromSource(result, source.propIds, propFunctions);\n};\n","import { DataSource, ResultData, PropFunction } from \"@/type\";\n\nimport { GraphNodes } from \"@/node\";\n\nimport { parseNodeName, isNamedInputs, isObject, isNull } from \"@/utils/utils\";\nimport { getDataFromSource } from \"@/utils/data_source\";\n\nconst resultsOfInner = (input: any, nodes: GraphNodes, propFunctions: PropFunction[], isSelfNode: boolean = false): ResultData => {\n  if (Array.isArray(input)) {\n    return input.map((inp) => resultsOfInner(inp, nodes, propFunctions, isSelfNode));\n  }\n  if (isNamedInputs(input)) {\n    return resultsOf(input, nodes, propFunctions, isSelfNode);\n  }\n  if (typeof input === \"string\") {\n    const templateMatch = [...input.matchAll(/\\${(:[^}]+)}/g)].map((m) => m[1]);\n    if (templateMatch.length > 0) {\n      const results = resultsOfInner(templateMatch, nodes, propFunctions, isSelfNode);\n      return Array.from(templateMatch.keys()).reduce((tmp, key) => {\n        return tmp.replaceAll(\"${\" + templateMatch[key] + \"}\", (results as any)[key]);\n      }, input);\n    }\n  }\n  return resultOf(parseNodeName(input, isSelfNode), nodes, propFunctions);\n};\n\nexport const resultsOf = (inputs: Record<string, any>, nodes: GraphNodes, propFunctions: PropFunction[], isSelfNode: boolean = false) => {\n  return Object.keys(inputs).reduce((tmp: Record<string, ResultData>, key) => {\n    const input = inputs[key];\n    tmp[key] = isNamedInputs(input) ? resultsOf(input, nodes, propFunctions, isSelfNode) : resultsOfInner(input, nodes, propFunctions, isSelfNode);\n    return tmp;\n  }, {});\n};\n\nexport const resultOf = (source: DataSource, nodes: GraphNodes, propFunctions: PropFunction[]) => {\n  const { result } = source.nodeId ? nodes[source.nodeId] : { result: undefined };\n  return getDataFromSource(result, source, propFunctions);\n};\n\n// clean up object for anyInput\nexport const cleanResultInner = (results: ResultData): ResultData | null => {\n  if (Array.isArray(results)) {\n    return results.map((result: ResultData) => cleanResultInner(result)).filter((result) => !isNull(result));\n  }\n\n  if (isObject(results)) {\n    return Object.keys(results).reduce((tmp: Record<string, ResultData>, key: string) => {\n      const value = cleanResultInner(results[key]);\n      if (!isNull(value)) {\n        tmp[key] = value;\n      }\n      return tmp;\n    }, {});\n  }\n\n  return results;\n};\n\nexport const cleanResult = (results: Record<string, ResultData | undefined>) => {\n  return Object.keys(results).reduce((tmp: Record<string, ResultData | undefined>, key: string) => {\n    const value = cleanResultInner(results[key]);\n    if (!isNull(value)) {\n      tmp[key] = value;\n    }\n    return tmp;\n  }, {});\n};\n","import type { GraphAI, GraphData } from \"@/index\";\nimport { strIntentionalError } from \"@/utils/utils\";\nimport { inputs2dataSources, dataSourceNodeIds } from \"@/utils/nodeUtils\";\n\nimport {\n  NodeDataParams,\n  ResultData,\n  DataSource,\n  ComputedNodeData,\n  StaticNodeData,\n  NodeState,\n  AgentFunctionContext,\n  AgentFunction,\n  AgentFilterInfo,\n  AgentFilterParams,\n  DefaultParamsType,\n  DefaultInputData,\n  PassThrough,\n  ConsoleElement,\n} from \"@/type\";\nimport { parseNodeName, assert, isLogicallyTrue, isObject } from \"@/utils/utils\";\nimport { TransactionLog } from \"@/transaction_log\";\nimport { resultsOf } from \"@/utils/result\";\n\nexport class Node {\n  public readonly nodeId: string;\n  public readonly waitlist = new Set<string>(); // List of nodes which need data from this node.\n  public state = NodeState.Waiting;\n  public result: ResultData | undefined = undefined;\n\n  protected graph: GraphAI;\n  protected log: TransactionLog;\n  protected console: ConsoleElement; // console output option (before and/or after)\n\n  constructor(nodeId: string, graph: GraphAI) {\n    this.nodeId = nodeId;\n    this.graph = graph;\n    this.log = new TransactionLog(nodeId);\n    this.console = {};\n  }\n\n  public asString() {\n    return `${this.nodeId}: ${this.state} ${[...this.waitlist]}`;\n  }\n\n  // This method is called either as the result of computation (computed node) or\n  // injection (static node).\n  protected onSetResult() {\n    this.waitlist.forEach((waitingNodeId) => {\n      const waitingNode = this.graph.nodes[waitingNodeId];\n      if (waitingNode.isComputedNode) {\n        waitingNode.removePending(this.nodeId);\n        this.graph.pushQueueIfReadyAndRunning(waitingNode);\n      }\n    });\n  }\n\n  protected afterConsoleLog(result: ResultData) {\n    if (this.console === false) {\n      return;\n    } else if (this.console === true || this.console.after === true) {\n      console.log(typeof result === \"string\" ? result : JSON.stringify(result, null, 2));\n    } else if (this.console.after) {\n      if (isObject(this.console.after)) {\n        console.log(\n          JSON.stringify(resultsOf(this.console.after, { self: this as unknown as ComputedNode | StaticNode }, this.graph.propFunctions, true), null, 2),\n        );\n      } else {\n        console.log(this.console.after);\n      }\n    }\n  }\n}\n\nexport class ComputedNode extends Node {\n  public readonly graphId: string;\n  public readonly isResult: boolean;\n  public readonly params: NodeDataParams; // Agent-specific parameters\n  private readonly filterParams: AgentFilterParams;\n  public readonly nestedGraph?: GraphData | DataSource;\n  public readonly retryLimit: number;\n  public retryCount: number = 0;\n  private readonly agentId?: string;\n  private readonly agentFunction?: AgentFunction<any, any, any>;\n  public readonly timeout?: number; // msec\n  public readonly priority: number;\n  public error?: Error;\n  public transactionId: undefined | number; // To reject callbacks from timed-out transactions\n  private readonly passThrough?: PassThrough;\n\n  public readonly anyInput: boolean; // any input makes this node ready\n  public dataSources: DataSource[] = []; // no longer needed. This is for transaction log.\n  private inputs?: Record<string, any>;\n  private output?: Record<string, any>;\n  public pendings: Set<string>; // List of nodes this node is waiting data from.\n  private ifSource?: DataSource; // conditional execution\n  private unlessSource?: DataSource; // conditional execution\n  private defaultValue?: ResultData;\n  private isSkip: boolean = false;\n\n  public readonly isStaticNode = false;\n  public readonly isComputedNode = true;\n\n  constructor(graphId: string, nodeId: string, data: ComputedNodeData, graph: GraphAI) {\n    super(nodeId, graph);\n    this.graphId = graphId;\n    this.params = data.params ?? {};\n    this.console = data.console ?? {};\n    this.filterParams = data.filterParams ?? {};\n    this.passThrough = data.passThrough;\n    this.retryLimit = data.retry ?? graph.retryLimit ?? 0;\n    this.timeout = data.timeout;\n    this.isResult = data.isResult ?? false;\n    this.priority = data.priority ?? 0;\n\n    assert([\"function\", \"string\"].includes(typeof data.agent), \"agent must be either string or function\");\n    if (typeof data.agent === \"string\") {\n      this.agentId = data.agent;\n    } else {\n      const agent = data.agent;\n      this.agentFunction = async ({ namedInputs, params }) => agent(namedInputs, params);\n    }\n\n    this.anyInput = data.anyInput ?? false;\n    this.inputs = data.inputs;\n    this.output = data.output;\n    this.dataSources = [\n      ...(data.inputs ? inputs2dataSources(data.inputs).flat(10) : []),\n      ...(data.params ? inputs2dataSources(data.params).flat(10) : []),\n      ...(this.agentId ? [parseNodeName(this.agentId)] : []),\n    ];\n    if (data.inputs && Array.isArray(data.inputs)) {\n      throw new Error(`array inputs have been deprecated. nodeId: ${nodeId}: see https://github.com/receptron/graphai/blob/main/docs/NamedInputs.md`);\n    }\n\n    this.pendings = new Set(dataSourceNodeIds(this.dataSources));\n    if (data.graph) {\n      this.nestedGraph = typeof data.graph === \"string\" ? this.addPendingNode(data.graph) : data.graph;\n    }\n    if (data.graphLoader && graph.graphLoader) {\n      this.nestedGraph = graph.graphLoader(data.graphLoader);\n    }\n    if (data.if) {\n      this.ifSource = this.addPendingNode(data.if);\n    }\n    if (data.unless) {\n      this.unlessSource = this.addPendingNode(data.unless);\n    }\n    if (data.defaultValue) {\n      this.defaultValue = data.defaultValue;\n    }\n    this.isSkip = false;\n    this.log.initForComputedNode(this, graph);\n  }\n\n  public getAgentId() {\n    return this.agentId ?? \"__custom__function\"; // only for display purpose in the log.\n  }\n\n  private addPendingNode(nodeId: string) {\n    const source = parseNodeName(nodeId);\n    assert(!!source.nodeId, `Invalid data source ${nodeId}`);\n    this.pendings.add(source.nodeId);\n    return source;\n  }\n\n  public isReadyNode() {\n    if (this.state !== NodeState.Waiting || this.pendings.size !== 0) {\n      return false;\n    }\n    this.isSkip = !!(\n      (this.ifSource && !isLogicallyTrue(this.graph.resultOf(this.ifSource))) ||\n      (this.unlessSource && isLogicallyTrue(this.graph.resultOf(this.unlessSource)))\n    );\n\n    if (this.isSkip && this.defaultValue === undefined) {\n      this.state = NodeState.Skipped;\n      this.log.onSkipped(this, this.graph);\n      return false;\n    }\n    return true;\n  }\n\n  // This private method (only called while executing execute()) performs\n  // the \"retry\" if specified. The transaction log must be updated before\n  // callling this method.\n  private retry(state: NodeState, error: Error) {\n    this.state = state; // this.execute() will update to NodeState.Executing\n    this.log.onError(this, this.graph, error.message);\n\n    if (this.retryCount < this.retryLimit) {\n      this.retryCount++;\n      this.execute();\n    } else {\n      this.result = undefined;\n      this.error = error;\n      this.transactionId = undefined; // This is necessary for timeout case\n      this.graph.onExecutionComplete(this);\n    }\n  }\n\n  private checkDataAvailability() {\n    return Object.values(this.graph.resultsOf(this.inputs))\n      .flat()\n      .some((result) => result !== undefined);\n  }\n\n  // This method is called right before the Graph add this node to the task manager.\n  public beforeAddTask() {\n    this.state = NodeState.Queued;\n    this.log.beforeAddTask(this, this.graph);\n  }\n\n  // This method is called when the data became available on one of nodes,\n  // which this node needs data from.\n  public removePending(nodeId: string) {\n    if (this.anyInput) {\n      if (this.checkDataAvailability()) {\n        this.pendings.clear();\n      }\n    } else {\n      this.pendings.delete(nodeId);\n    }\n  }\n\n  private isCurrentTransaction(transactionId: number) {\n    return this.transactionId === transactionId;\n  }\n\n  // This private method (called only fro execute) checks if the callback from\n  // the timer came before the completion of agent function call, record it\n  // and attempt to retry (if specified).\n  private executeTimeout(transactionId: number) {\n    if (this.state === NodeState.Executing && this.isCurrentTransaction(transactionId)) {\n      console.warn(`-- timeout ${this.timeout} with ${this.nodeId}`);\n      this.retry(NodeState.TimedOut, Error(\"Timeout\"));\n    }\n  }\n\n  // Check if we need to apply this filter to this node or not.\n  private shouldApplyAgentFilter(agentFilter: AgentFilterInfo, agentId?: string) {\n    if (agentFilter.agentIds && Array.isArray(agentFilter.agentIds) && agentFilter.agentIds.length > 0) {\n      if (agentId && agentFilter.agentIds.includes(agentId)) {\n        return true;\n      }\n    }\n    if (agentFilter.nodeIds && Array.isArray(agentFilter.nodeIds) && agentFilter.nodeIds.length > 0) {\n      if (agentFilter.nodeIds.includes(this.nodeId)) {\n        return true;\n      }\n    }\n    return !agentFilter.agentIds && !agentFilter.nodeIds;\n  }\n\n  private agentFilterHandler(context: AgentFunctionContext, agentFunction: AgentFunction, agentId?: string): Promise<ResultData> {\n    let index = 0;\n\n    const next = (innerContext: AgentFunctionContext): Promise<ResultData> => {\n      const agentFilter = this.graph.agentFilters[index++];\n      if (agentFilter) {\n        if (this.shouldApplyAgentFilter(agentFilter, agentId)) {\n          if (agentFilter.filterParams) {\n            innerContext.filterParams = { ...agentFilter.filterParams, ...innerContext.filterParams };\n          }\n          return agentFilter.agent(innerContext, next);\n        }\n        return next(innerContext);\n      }\n      return agentFunction(innerContext);\n    };\n\n    return next(context);\n  }\n\n  // This method is called when this computed node became ready to run.\n  // It asynchronously calls the associated with agent function and set the result,\n  // then it removes itself from the \"running node\" list of the graph.\n  // Notice that setting the result of this node may make other nodes ready to run.\n  public async execute() {\n    if (this.isSkip) {\n      this.afterExecute(this.defaultValue, []);\n      return;\n    }\n    const previousResults = this.graph.resultsOf(this.inputs, this.anyInput);\n    const agentId = this.agentId ? (this.graph.resultOf(parseNodeName(this.agentId)) as string) : this.agentId;\n    const transactionId = Date.now();\n    this.prepareExecute(transactionId, Object.values(previousResults));\n\n    if (this.timeout && this.timeout > 0) {\n      setTimeout(() => {\n        this.executeTimeout(transactionId);\n      }, this.timeout);\n    }\n\n    try {\n      const agentFunction = this.agentFunction ?? this.graph.getAgentFunctionInfo(agentId).agent;\n      const localLog: TransactionLog[] = [];\n      const context = this.getContext(previousResults, localLog, agentId);\n\n      // NOTE: We use the existence of graph object in the agent-specific params to determine\n      // if this is a nested agent or not.\n      if (this.nestedGraph) {\n        this.graph.taskManager.prepareForNesting();\n        context.forNestedGraph = {\n          graphData: \"nodes\" in this.nestedGraph ? this.nestedGraph : (this.graph.resultOf(this.nestedGraph) as GraphData), // HACK: compiler work-around\n          agents: this.graph.agentFunctionInfoDictionary,\n          graphOptions: {\n            agentFilters: this.graph.agentFilters,\n            taskManager: this.graph.taskManager,\n            bypassAgentIds: this.graph.bypassAgentIds,\n            config: this.graph.config,\n            graphLoader: this.graph.graphLoader,\n          },\n          onLogCallback: this.graph.onLogCallback,\n        };\n      }\n\n      this.beforeConsoleLog(context);\n      const result = await this.agentFilterHandler(context as AgentFunctionContext, agentFunction, agentId);\n      this.afterConsoleLog(result);\n\n      if (this.nestedGraph) {\n        this.graph.taskManager.restoreAfterNesting();\n      }\n\n      if (!this.isCurrentTransaction(transactionId)) {\n        // This condition happens when the agent function returns\n        // after the timeout (either retried or not).\n        console.log(`-- transactionId mismatch with ${this.nodeId} (probably timeout)`);\n        return;\n      }\n\n      // after process\n      this.afterExecute(result, localLog);\n    } catch (error) {\n      this.errorProcess(error, transactionId, previousResults);\n    }\n  }\n\n  private afterExecute(result: ResultData, localLog: TransactionLog[]) {\n    this.state = NodeState.Completed;\n    this.result = this.getResult(result);\n    if (this.output) {\n      this.result = resultsOf(this.output, { self: this }, this.graph.propFunctions, true);\n    }\n    this.log.onComplete(this, this.graph, localLog);\n\n    this.onSetResult();\n\n    this.graph.onExecutionComplete(this);\n  }\n\n  // This private method (called only by execute()) prepares the ComputedNode object\n  // for execution, and create a new transaction to record it.\n  private prepareExecute(transactionId: number, inputs: Array<ResultData>) {\n    this.state = NodeState.Executing;\n    this.log.beforeExecute(this, this.graph, transactionId, inputs);\n    this.transactionId = transactionId;\n  }\n\n  // This private method (called only by execute) processes an error received from\n  // the agent function. It records the error in the transaction log and handles\n  // the retry if specified.\n  private errorProcess(error: unknown, transactionId: number, namedInputs: DefaultInputData) {\n    if (error instanceof Error && error.message !== strIntentionalError) {\n      console.error(`<-- NodeId: ${this.nodeId}, Agent: ${this.agentId}`);\n      console.error({ namedInputs });\n      console.error(error);\n      console.error(\"-->\");\n    }\n    if (!this.isCurrentTransaction(transactionId)) {\n      console.warn(`-- transactionId mismatch with ${this.nodeId} (not timeout)`);\n      return;\n    }\n\n    if (error instanceof Error) {\n      this.retry(NodeState.Failed, error);\n    } else {\n      console.error(`-- NodeId: ${this.nodeId}: Unknown error was caught`);\n      this.retry(NodeState.Failed, Error(\"Unknown\"));\n    }\n  }\n\n  private getContext(previousResults: Record<string, ResultData | undefined>, localLog: TransactionLog[], agentId?: string) {\n    const context: AgentFunctionContext<DefaultParamsType, DefaultInputData | string | number | boolean | undefined> = {\n      params: this.graph.resultsOf(this.params),\n      namedInputs: previousResults,\n      inputSchema: this.agentFunction ? undefined : this.graph.getAgentFunctionInfo(agentId)?.inputs,\n      debugInfo: this.getDebugInfo(agentId),\n      cacheType: this.agentFunction ? undefined : this.graph.getAgentFunctionInfo(agentId)?.cacheType,\n      filterParams: this.filterParams,\n      agentFilters: this.graph.agentFilters,\n      config: this.graph.config,\n      log: localLog,\n    };\n    return context;\n  }\n\n  private getResult(result: ResultData) {\n    if (result && this.passThrough) {\n      if (isObject(result) && !Array.isArray(result)) {\n        return { ...result, ...this.passThrough };\n      } else if (Array.isArray(result)) {\n        return result.map((r) => (isObject(r) && !Array.isArray(r) ? { ...r, ...this.passThrough } : r));\n      }\n    }\n    return result;\n  }\n\n  private getDebugInfo(agentId?: string) {\n    return {\n      nodeId: this.nodeId,\n      agentId,\n      retry: this.retryCount,\n      verbose: this.graph.verbose,\n      version: this.graph.version,\n      isResult: this.isResult,\n    };\n  }\n\n  private beforeConsoleLog(context: AgentFunctionContext<DefaultParamsType, string | number | boolean | DefaultInputData | undefined>) {\n    if (this.console === false) {\n      return;\n    } else if (this.console === true || this.console.before === true) {\n      console.log(JSON.stringify(context.namedInputs, null, 2));\n    } else if (this.console.before) {\n      console.log(this.console.before);\n    }\n  }\n}\n\nexport class StaticNode extends Node {\n  public value?: ResultData;\n  public readonly update?: DataSource;\n  public readonly isResult: boolean;\n  public readonly isStaticNode = true;\n  public readonly isComputedNode = false;\n\n  constructor(nodeId: string, data: StaticNodeData, graph: GraphAI) {\n    super(nodeId, graph);\n    this.value = data.value;\n    this.update = data.update ? parseNodeName(data.update) : undefined;\n    this.isResult = data.isResult ?? false;\n    this.console = data.console ?? {};\n  }\n\n  public injectValue(value: ResultData, injectFrom?: string) {\n    this.state = NodeState.Injected;\n    this.result = value;\n    this.log.onInjected(this, this.graph, injectFrom);\n    this.onSetResult();\n  }\n\n  public consoleLog() {\n    this.afterConsoleLog(this.result);\n  }\n}\n\nexport type GraphNodes = Record<string, ComputedNode | StaticNode>;\n","export const graphDataAttributeKeys = [\"nodes\", \"concurrency\", \"agentId\", \"loop\", \"verbose\", \"version\"];\n\nexport const computedNodeAttributeKeys = [\n  \"inputs\",\n  \"output\",\n  \"anyInput\",\n  \"params\",\n  \"retry\",\n  \"timeout\",\n  \"agent\",\n  \"graph\",\n  \"graphLoader\",\n  \"isResult\",\n  \"priority\",\n  \"if\",\n  \"unless\",\n  \"defaultValue\",\n  \"filterParams\",\n  \"console\",\n  \"passThrough\",\n];\nexport const staticNodeAttributeKeys = [\"value\", \"update\", \"isResult\", \"console\"];\n\nexport class ValidationError extends Error {\n  constructor(message: string) {\n    super(`\\x1b[41m${message}\\x1b[0m`); // Pass the message to the base Error class\n\n    // Set the prototype explicitly to ensure correct prototype chain\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n}\n","import { GraphData } from \"@/type\";\nimport { graphDataAttributeKeys, ValidationError } from \"@/validators/common\";\n\nexport const graphNodesValidator = (data: GraphData) => {\n  if (data.nodes === undefined) {\n    throw new ValidationError(\"Invalid Graph Data: no nodes\");\n  }\n  if (typeof data.nodes !== \"object\") {\n    throw new ValidationError(\"Invalid Graph Data: invalid nodes\");\n  }\n  if (Array.isArray(data.nodes)) {\n    throw new ValidationError(\"Invalid Graph Data: nodes must be object\");\n  }\n  if (Object.keys(data.nodes).length === 0) {\n    throw new ValidationError(\"Invalid Graph Data: nodes is empty\");\n  }\n  Object.keys(data).forEach((key) => {\n    if (!graphDataAttributeKeys.includes(key)) {\n      throw new ValidationError(\"Graph Data does not allow \" + key);\n    }\n  });\n};\nexport const graphDataValidator = (data: GraphData) => {\n  if (data.loop) {\n    if (data.loop.count === undefined && data.loop.while === undefined) {\n      throw new ValidationError(\"Loop: Either count or while is required in loop\");\n    }\n    if (data.loop.count !== undefined && data.loop.while !== undefined) {\n      throw new ValidationError(\"Loop: Both count and while cannot be set\");\n    }\n  }\n  if (data.concurrency !== undefined) {\n    if (!Number.isInteger(data.concurrency)) {\n      throw new ValidationError(\"Concurrency must be an integer\");\n    }\n    if (data.concurrency < 1) {\n      throw new ValidationError(\"Concurrency must be a positive integer\");\n    }\n  }\n};\n","import { GraphData, AgentFunctionInfoDictionary } from \"@/type\";\n\nimport { graphNodesValidator, graphDataValidator } from \"@/validators/graph_data_validator\";\nimport { nodeValidator } from \"@/validators/nodeValidator\";\nimport { staticNodeValidator } from \"@/validators/static_node_validator\";\nimport { computedNodeValidator } from \"@/validators/computed_node_validator\";\nimport { relationValidator } from \"@/validators/relation_validator\";\nimport { agentValidator } from \"@/validators/agent_validator\";\n\nimport { ValidationError } from \"@/validators/common\";\n\nexport const validateGraphData = (data: GraphData, agentIds: string[]) => {\n  graphNodesValidator(data);\n  graphDataValidator(data);\n  const computedNodeIds: string[] = [];\n  const staticNodeIds: string[] = [];\n  const graphAgentIds = new Set<string>();\n  Object.keys(data.nodes).forEach((nodeId) => {\n    const node = data.nodes[nodeId];\n    const isStaticNode = !(\"agent\" in node);\n    nodeValidator(node);\n    const agentId = isStaticNode ? \"\" : node.agent;\n    isStaticNode && staticNodeValidator(node) && staticNodeIds.push(nodeId);\n    !isStaticNode && computedNodeValidator(node) && computedNodeIds.push(nodeId) && typeof agentId === \"string\" && graphAgentIds.add(agentId);\n  });\n  agentValidator(graphAgentIds, new Set<string>(agentIds));\n  relationValidator(data, staticNodeIds, computedNodeIds);\n\n  return true;\n};\n\nexport const validateAgent = (agentFunctionInfoDictionary: AgentFunctionInfoDictionary) => {\n  Object.keys(agentFunctionInfoDictionary).forEach((agentId: string) => {\n    if (agentId !== \"default\") {\n      const agentInfo = agentFunctionInfoDictionary[agentId];\n      if (!agentInfo || !agentInfo.agent) {\n        throw new ValidationError(\"No Agent: \" + agentId + \" is not in AgentFunctionInfoDictionary.\");\n      }\n    }\n  });\n};\n","import { NodeData, StaticNodeData, ComputedNodeData } from \"@/type\";\nimport { ValidationError } from \"@/validators/common\";\n\nexport const nodeValidator = (nodeData: NodeData) => {\n  if ((nodeData as ComputedNodeData).agent && (nodeData as StaticNodeData).value) {\n    throw new ValidationError(\"Cannot set both agent and value\");\n  }\n  // if (!(\"agent\" in nodeData) && !(\"value\" in nodeData)) {\n  //   throw new ValidationError(\"Either agent or value is required\");\n  // }\n  return true;\n};\n","import { StaticNodeData } from \"@/type\";\nimport { staticNodeAttributeKeys, ValidationError } from \"@/validators/common\";\n\nexport const staticNodeValidator = (nodeData: StaticNodeData) => {\n  Object.keys(nodeData).forEach((key) => {\n    if (!staticNodeAttributeKeys.includes(key)) {\n      throw new ValidationError(\"Static node does not allow \" + key);\n    }\n  });\n  return true;\n};\n","import { ComputedNodeData } from \"@/type\";\nimport { computedNodeAttributeKeys, ValidationError } from \"@/validators/common\";\n\nexport const computedNodeValidator = (nodeData: ComputedNodeData) => {\n  Object.keys(nodeData).forEach((key) => {\n    if (!computedNodeAttributeKeys.includes(key)) {\n      throw new ValidationError(\"Computed node does not allow \" + key);\n    }\n  });\n  return true;\n};\n","import { ValidationError } from \"@/validators/common\";\n\nexport const agentValidator = (graphAgentIds: Set<string>, agentIds: Set<string>) => {\n  graphAgentIds.forEach((agentId) => {\n    // agentId or dynamic agentId\n    if (!agentIds.has(agentId) && agentId[0] !== \":\") {\n      throw new ValidationError(\"Invalid Agent : \" + agentId + \" is not in AgentFunctionInfoDictionary.\");\n    }\n  });\n  return true;\n};\n","import { GraphData } from \"@/type\";\nimport { parseNodeName } from \"@/utils/utils\";\nimport { ValidationError } from \"@/validators/common\";\nimport { inputs2dataSources, dataSourceNodeIds } from \"@/utils/nodeUtils\";\n\nexport const relationValidator = (graphData: GraphData, staticNodeIds: string[], computedNodeIds: string[]) => {\n  const nodeIds = new Set<string>(Object.keys(graphData.nodes));\n\n  const pendings: Record<string, Set<string>> = {};\n  const waitlist: Record<string, Set<string>> = {};\n\n  // validate input relation and set pendings and wait list\n  computedNodeIds.forEach((computedNodeId) => {\n    const nodeData = graphData.nodes[computedNodeId];\n    pendings[computedNodeId] = new Set<string>();\n\n    const dataSourceValidator = (sourceType: string, sourceNodeIds: string[]) => {\n      sourceNodeIds.forEach((sourceNodeId) => {\n        if (sourceNodeId) {\n          if (!nodeIds.has(sourceNodeId)) {\n            throw new ValidationError(`${sourceType} not match: NodeId ${computedNodeId}, Inputs: ${sourceNodeId}`);\n          }\n          waitlist[sourceNodeId] === undefined && (waitlist[sourceNodeId] = new Set<string>());\n          pendings[computedNodeId].add(sourceNodeId);\n          waitlist[sourceNodeId].add(computedNodeId);\n        }\n      });\n    };\n    if (\"agent\" in nodeData && nodeData) {\n      if (nodeData.inputs) {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources(nodeData.inputs));\n        dataSourceValidator(\"Inputs\", sourceNodeIds);\n      }\n      if (nodeData.params) {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources(nodeData.params));\n        dataSourceValidator(\"Params\", sourceNodeIds);\n      }\n      if (nodeData.if) {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources({ if: nodeData.if }));\n        dataSourceValidator(\"If\", sourceNodeIds);\n      }\n      if (nodeData.unless) {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources({ unless: nodeData.unless }));\n        dataSourceValidator(\"Unless\", sourceNodeIds);\n      }\n      if (nodeData.graph && typeof nodeData?.graph === \"string\") {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources({ graph: nodeData.graph }));\n        dataSourceValidator(\"Graph\", sourceNodeIds);\n      }\n      if (typeof nodeData.agent === \"string\" && nodeData.agent[0] === \":\") {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources({ agent: nodeData.agent }));\n        dataSourceValidator(\"Agent\", sourceNodeIds);\n      }\n    }\n  });\n\n  // TODO. validate update\n  staticNodeIds.forEach((staticNodeId) => {\n    const nodeData = graphData.nodes[staticNodeId];\n    if (\"value\" in nodeData && nodeData.update) {\n      const update = nodeData.update;\n      const updateNodeId = parseNodeName(update).nodeId;\n      if (!updateNodeId) {\n        throw new ValidationError(\"Update it a literal\");\n      }\n      if (!nodeIds.has(updateNodeId)) {\n        throw new ValidationError(`Update not match: NodeId ${staticNodeId}, update: ${update}`);\n      }\n    }\n  });\n\n  const cycle = (possibles: string[]) => {\n    possibles.forEach((possobleNodeId) => {\n      (waitlist[possobleNodeId] || []).forEach((waitingNodeId) => {\n        pendings[waitingNodeId].delete(possobleNodeId);\n      });\n    });\n\n    const running: string[] = [];\n    Object.keys(pendings).forEach((pendingNodeId) => {\n      if (pendings[pendingNodeId].size === 0) {\n        running.push(pendingNodeId);\n        delete pendings[pendingNodeId];\n      }\n    });\n    return running;\n  };\n\n  let runningQueue = cycle(staticNodeIds);\n  if (runningQueue.length === 0) {\n    throw new ValidationError(\"No Initial Runnning Node\");\n  }\n\n  do {\n    runningQueue = cycle(runningQueue);\n  } while (runningQueue.length > 0);\n\n  if (Object.keys(pendings).length > 0) {\n    throw new ValidationError(\"Some nodes are not executed: \" + Object.keys(pendings).join(\", \"));\n  }\n};\n","import { ComputedNode } from \"@/node\";\nimport { assert } from \"@/utils/utils\";\n\ntype TaskEntry = {\n  node: ComputedNode;\n  graphId: string;\n  callback: (node: ComputedNode) => void;\n};\n\n// TaskManage object controls the concurrency of ComputedNode execution.\n//\n// NOTE: A TaskManager instance will be shared between parent graph and its children\n// when nested agents are involved.\nexport class TaskManager {\n  private concurrency: number;\n  private taskQueue: Array<TaskEntry> = [];\n  private runningNodes = new Set<ComputedNode>();\n\n  constructor(concurrency: number) {\n    this.concurrency = concurrency;\n  }\n\n  // This internal method dequeus a task from the task queue\n  // and call the associated callback method, if the number of\n  // running task is lower than the spcified limit.\n  private dequeueTaskIfPossible() {\n    if (this.runningNodes.size < this.concurrency) {\n      const task = this.taskQueue.shift();\n      if (task) {\n        this.runningNodes.add(task.node);\n        task.callback(task.node);\n      }\n    }\n  }\n\n  // Node will call this method to put itself in the execution queue.\n  // We call the associated callback function when it is dequeued.\n  public addTask(node: ComputedNode, graphId: string, callback: (node: ComputedNode) => void) {\n    // Finder tasks in the queue, which has either the same or higher priority.\n    const count = this.taskQueue.filter((task) => {\n      return task.node.priority >= node.priority;\n    }).length;\n    assert(count <= this.taskQueue.length, \"TaskManager.addTask: Something is really wrong.\");\n    this.taskQueue.splice(count, 0, { node, graphId, callback });\n    this.dequeueTaskIfPossible();\n  }\n\n  public isRunning(graphId: string) {\n    const count = [...this.runningNodes].filter((node) => {\n      return node.graphId == graphId;\n    }).length;\n    return count > 0 || Array.from(this.taskQueue).filter((data) => data.graphId === graphId).length > 0;\n  }\n\n  // Node MUST call this method once the execution of agent function is completed\n  // either successfully or not.\n  public onComplete(node: ComputedNode) {\n    assert(this.runningNodes.has(node), `TaskManager.onComplete node(${node.nodeId}) is not in list`);\n    this.runningNodes.delete(node);\n    this.dequeueTaskIfPossible();\n  }\n\n  // Node will call this method before it hands the task manager from the graph\n  // to a nested agent. We need to make it sure that there is enough room to run\n  // computed nodes inside the nested graph to avoid a deadlock.\n  public prepareForNesting() {\n    this.concurrency++;\n  }\n\n  public restoreAfterNesting() {\n    this.concurrency--;\n  }\n\n  public getStatus(verbose: boolean = false) {\n    const runningNodes = Array.from(this.runningNodes).map((node) => node.nodeId);\n    const queuedNodes = this.taskQueue.map((task) => task.node.nodeId);\n    const nodes = verbose ? { runningNodes, queuedNodes } : {};\n    return {\n      concurrency: this.concurrency,\n      queue: this.taskQueue.length,\n      running: this.runningNodes.size,\n      ...nodes,\n    };\n  }\n}\n","import {\n  AgentFunctionInfoDictionary,\n  AgentFilterInfo,\n  GraphData,\n  DataSource,\n  LoopData,\n  ResultDataDictionary,\n  ResultData,\n  DefaultResultData,\n  GraphOptions,\n  PropFunction,\n  GraphDataLoader,\n} from \"@/type\";\nimport { TransactionLog } from \"@/transaction_log\";\n\nimport { ComputedNode, StaticNode, GraphNodes } from \"@/node\";\n\nimport { resultsOf, resultOf, cleanResult } from \"@/utils/result\";\nimport { propFunctions } from \"@/utils/prop_function\";\nimport { parseNodeName, assert, isLogicallyTrue } from \"@/utils/utils\";\nimport { getDataFromSource } from \"@/utils/data_source\";\n\nimport { validateGraphData, validateAgent } from \"@/validator\";\nimport { TaskManager } from \"@/task_manager\";\n\nexport const defaultConcurrency = 8;\nexport const graphDataLatestVersion = 0.5;\n\nexport class GraphAI {\n  public readonly version: number;\n  private readonly graphId: string;\n  private readonly graphData: GraphData;\n  private readonly loop?: LoopData;\n  private readonly logs: Array<TransactionLog> = [];\n  public readonly bypassAgentIds: string[];\n  public readonly config?: Record<string, unknown> = {};\n  public readonly agentFunctionInfoDictionary: AgentFunctionInfoDictionary;\n  public readonly taskManager: TaskManager;\n  public readonly agentFilters: AgentFilterInfo[];\n  public readonly retryLimit?: number;\n  public readonly propFunctions: PropFunction[];\n  public readonly graphLoader?: GraphDataLoader;\n\n  public nodes: GraphNodes;\n  public onLogCallback = (__log: TransactionLog, __isUpdate: boolean) => {};\n  public verbose: boolean; // REVIEW: Do we need this?\n\n  private onComplete: () => void;\n  private repeatCount = 0;\n\n  // This method is called when either the GraphAI obect was created,\n  // or we are about to start n-th iteration (n>2).\n  private createNodes(graphData: GraphData) {\n    const nodes = Object.keys(graphData.nodes).reduce((_nodes: GraphNodes, nodeId: string) => {\n      const nodeData = graphData.nodes[nodeId];\n      if (\"agent\" in nodeData) {\n        _nodes[nodeId] = new ComputedNode(this.graphId, nodeId, nodeData, this);\n      } else {\n        _nodes[nodeId] = new StaticNode(nodeId, nodeData, this);\n      }\n      return _nodes;\n    }, {});\n\n    // Generate the waitlist for each node.\n    Object.keys(nodes).forEach((nodeId) => {\n      const node = nodes[nodeId];\n      if (node.isComputedNode) {\n        node.pendings.forEach((pending) => {\n          if (nodes[pending]) {\n            nodes[pending].waitlist.add(nodeId); // previousNode\n          } else {\n            throw new Error(`createNode: invalid input ${pending} for node, ${nodeId}`);\n          }\n        });\n      }\n    });\n    return nodes;\n  }\n\n  private getValueFromResults(source: DataSource, results: ResultDataDictionary<DefaultResultData>) {\n    return getDataFromSource(source.nodeId ? results[source.nodeId] : undefined, source, this.propFunctions);\n  }\n\n  // for static\n  private initializeStaticNodes(enableConsoleLog: boolean = false) {\n    // If the result property is specified, inject it.\n    // If the previousResults exists (indicating we are in a loop),\n    // process the update property (nodeId or nodeId.propId).\n    Object.keys(this.graphData.nodes).forEach((nodeId) => {\n      const node = this.nodes[nodeId];\n      if (node?.isStaticNode) {\n        const value = node?.value;\n        if (value !== undefined) {\n          this.injectValue(nodeId, value, nodeId);\n        }\n        if (enableConsoleLog) {\n          node.consoleLog();\n        }\n      }\n    });\n  }\n\n  private updateStaticNodes(previousResults?: ResultDataDictionary<DefaultResultData>, enableConsoleLog: boolean = false) {\n    // If the result property is specified, inject it.\n    // If the previousResults exists (indicating we are in a loop),\n    // process the update property (nodeId or nodeId.propId).\n    Object.keys(this.graphData.nodes).forEach((nodeId) => {\n      const node = this.nodes[nodeId];\n      if (node?.isStaticNode) {\n        const update = node?.update;\n        if (update && previousResults) {\n          const result = this.getValueFromResults(update, previousResults);\n          this.injectValue(nodeId, result, update.nodeId);\n        }\n        if (enableConsoleLog) {\n          node.consoleLog();\n        }\n      }\n    });\n  }\n\n  constructor(\n    graphData: GraphData,\n    agentFunctionInfoDictionary: AgentFunctionInfoDictionary,\n    options: GraphOptions = {\n      taskManager: undefined,\n      agentFilters: [],\n      bypassAgentIds: [],\n      config: {},\n      graphLoader: undefined,\n    },\n  ) {\n    if (!graphData.version && !options.taskManager) {\n      console.warn(\"------------ missing version number\");\n    }\n    this.version = graphData.version ?? graphDataLatestVersion;\n    if (this.version < graphDataLatestVersion) {\n      console.warn(`------------ upgrade to ${graphDataLatestVersion}!`);\n    }\n    this.retryLimit = graphData.retry; // optional\n    this.graphId = URL.createObjectURL(new Blob()).slice(-36);\n    this.graphData = graphData;\n    this.agentFunctionInfoDictionary = agentFunctionInfoDictionary;\n    this.propFunctions = propFunctions;\n    this.taskManager = options.taskManager ?? new TaskManager(graphData.concurrency ?? defaultConcurrency);\n    this.agentFilters = options.agentFilters ?? [];\n    this.bypassAgentIds = options.bypassAgentIds ?? [];\n    this.config = options.config;\n    this.graphLoader = options.graphLoader;\n    this.loop = graphData.loop;\n    this.verbose = graphData.verbose === true;\n    this.onComplete = () => {\n      throw new Error(\"SOMETHING IS WRONG: onComplete is called without run()\");\n    };\n\n    validateGraphData(graphData, [...Object.keys(agentFunctionInfoDictionary), ...this.bypassAgentIds]);\n    validateAgent(agentFunctionInfoDictionary);\n\n    this.nodes = this.createNodes(graphData);\n    this.initializeStaticNodes(true);\n  }\n\n  public getAgentFunctionInfo(agentId?: string) {\n    if (agentId && this.agentFunctionInfoDictionary[agentId]) {\n      return this.agentFunctionInfoDictionary[agentId];\n    }\n    if (agentId && this.bypassAgentIds.includes(agentId)) {\n      return {\n        agent: async () => {\n          return null;\n        },\n        inputs: null,\n        cacheType: undefined, // for node.getContext\n      };\n    }\n    // We are not supposed to hit this error because the validator will catch it.\n    throw new Error(\"No agent: \" + agentId);\n  }\n\n  public asString() {\n    return Object.values(this.nodes)\n      .map((node) => node.asString())\n      .join(\"\\n\");\n  }\n\n  // Public API\n  public results<T = DefaultResultData>(all: boolean): ResultDataDictionary<T> {\n    return Object.keys(this.nodes)\n      .filter((nodeId) => all || this.nodes[nodeId].isResult)\n      .reduce((results: ResultDataDictionary<T>, nodeId) => {\n        const node = this.nodes[nodeId];\n        if (node.result !== undefined) {\n          results[nodeId] = node.result as T;\n        }\n        return results;\n      }, {});\n  }\n\n  // Public API\n  public errors(): Record<string, Error> {\n    return Object.keys(this.nodes).reduce((errors: Record<string, Error>, nodeId) => {\n      const node = this.nodes[nodeId];\n      if (node.isComputedNode) {\n        if (node.error !== undefined) {\n          errors[nodeId] = node.error;\n        }\n      }\n      return errors;\n    }, {});\n  }\n\n  private pushReadyNodesIntoQueue() {\n    // Nodes without pending data should run immediately.\n    Object.keys(this.nodes).forEach((nodeId) => {\n      const node = this.nodes[nodeId];\n      if (node.isComputedNode) {\n        this.pushQueueIfReady(node);\n      }\n    });\n  }\n\n  private pushQueueIfReady(node: ComputedNode) {\n    if (node.isReadyNode()) {\n      this.pushQueue(node);\n    }\n  }\n\n  public pushQueueIfReadyAndRunning(node: ComputedNode) {\n    if (this.isRunning()) {\n      this.pushQueueIfReady(node);\n    }\n  }\n\n  // for computed\n  public pushQueue(node: ComputedNode) {\n    node.beforeAddTask();\n\n    this.taskManager.addTask(node, this.graphId, (_node) => {\n      assert(node.nodeId === _node.nodeId, \"GraphAI.pushQueue node mismatch\");\n      node.execute();\n    });\n  }\n\n  // Public API\n  public async run<T = DefaultResultData>(all: boolean = false): Promise<ResultDataDictionary<T>> {\n    if (\n      Object.values(this.nodes)\n        .filter((node) => node.isStaticNode)\n        .some((node) => node.result === undefined && node.update === undefined)\n    ) {\n      throw new Error(\"Static node must have value. Set value or injectValue or set update\");\n    }\n    if (this.isRunning()) {\n      throw new Error(\"This GraphAI instance is already running\");\n    }\n\n    this.pushReadyNodesIntoQueue();\n\n    if (!this.isRunning()) {\n      console.warn(\"-- nothing to execute\");\n      return {};\n    }\n\n    return new Promise((resolve, reject) => {\n      this.onComplete = () => {\n        const errors = this.errors();\n        const nodeIds = Object.keys(errors);\n        if (nodeIds.length > 0) {\n          reject(errors[nodeIds[0]]);\n        } else {\n          resolve(this.results(all));\n        }\n      };\n    });\n  }\n\n  // Public only for testing\n  public isRunning() {\n    return this.taskManager.isRunning(this.graphId);\n  }\n\n  // callback from execute\n  public onExecutionComplete(node: ComputedNode) {\n    this.taskManager.onComplete(node);\n    if (this.isRunning() || this.processLoopIfNecessary()) {\n      return; // continue running\n    }\n    this.onComplete(); // Nothing to run. Finish it.\n  }\n\n  // Must be called only from onExecutionComplete righ after removeRunning\n  // Check if there is any running computed nodes.\n  // In case of no running computed note, start the another iteration if ncessary (loop)\n  private processLoopIfNecessary() {\n    this.repeatCount++;\n    const loop = this.loop;\n    if (!loop) {\n      return false;\n    }\n\n    // We need to update static nodes, before checking the condition\n    const previousResults = this.results(true); // results from previous loop\n    this.updateStaticNodes(previousResults);\n\n    if (loop.count === undefined || this.repeatCount < loop.count) {\n      if (loop.while) {\n        const source = parseNodeName(loop.while);\n        const value = this.getValueFromResults(source, this.results(true));\n        // NOTE: We treat an empty array as false.\n        if (!isLogicallyTrue(value)) {\n          return false; // while condition is not met\n        }\n      }\n      this.initializeGraphAI();\n      this.updateStaticNodes(previousResults, true);\n      this.pushReadyNodesIntoQueue();\n      return true; // Indicating that we are going to continue.\n    }\n    return false;\n  }\n\n  public initializeGraphAI() {\n    if (this.isRunning()) {\n      throw new Error(\"This GraphAI instance is running\");\n    }\n    this.nodes = this.createNodes(this.graphData);\n    this.initializeStaticNodes();\n  }\n  public setPreviousResults(previousResults: ResultDataDictionary<DefaultResultData>) {\n    this.updateStaticNodes(previousResults);\n  }\n  public setLoopLog(log: TransactionLog) {\n    log.isLoop = !!this.loop;\n    log.repeatCount = this.repeatCount;\n  }\n\n  public appendLog(log: TransactionLog) {\n    this.logs.push(log);\n    this.onLogCallback(log, false);\n  }\n\n  public updateLog(log: TransactionLog) {\n    this.onLogCallback(log, true);\n  }\n\n  // Public API\n  public transactionLogs() {\n    return this.logs;\n  }\n\n  // Public API\n  public injectValue(nodeId: string, value: ResultData, injectFrom?: string): void {\n    const node = this.nodes[nodeId];\n    if (node && node.isStaticNode) {\n      node.injectValue(value, injectFrom);\n    } else {\n      throw new Error(`injectValue with Invalid nodeId, ${nodeId}`);\n    }\n  }\n\n  public resultsOf(inputs?: Record<string, any>, anyInput: boolean = false) {\n    const results = resultsOf(inputs ?? [], this.nodes, this.propFunctions);\n    if (anyInput) {\n      return cleanResult(results);\n    }\n    return results;\n  }\n  public resultOf(source: DataSource) {\n    return resultOf(source, this.nodes, this.propFunctions);\n  }\n}\n"],"names":["parseNodeName","inputNodeId","isSelfNode","nodeId","propIds","split","slice","value","regex","match","parts","length","assert","condition","message","isWarn","Error","console","warn","isObject","x","isNull","data","strIntentionalError","defaultAgentInfo","name","samples","inputs","params","result","description","category","author","repository","license","objectToKeyArray","innerData","ret","Object","keys","forEach","key","push","tmp","debugResultKey","agentId","debugResultKeyInner","map","objectKeys","join","Array","isArray","from","reduce","index","String","isLogicallyTrue","isNamedInputs","namedInputs","inputs2dataSources","inp","flat","values","input","templateMatch","matchAll","m","dataSourceNodeIds","sources","filter","source","NodeState","TransactionLog","constructor","this","state","Waiting","initForComputedNode","node","graph","getAgentId","appendLog","onInjected","injectFrom","isUpdating","endTime","Date","now","setLoopLog","updateLog","onComplete","localLog","resultKeys","log","beforeExecute","transactionId","retryCount","undefined","startTime","dataSources","inputsData","beforeAddTask","onError","errorMessage","onSkipped","propFunctionRegex","propFunctions","propId","JSON","stringify","matchJoin","parse","Number","isNaN","trim","toLowerCase","toUpperCase","isFinite","innerGetDataFromSource","propFunction","parseInt","getNestedData","error","getDataFromSource","resultsOfInner","nodes","resultsOf","results","replaceAll","resultOf","cleanResultInner","Node","waitlist","Set","asString","onSetResult","waitingNodeId","waitingNode","isComputedNode","removePending","pushQueueIfReadyAndRunning","afterConsoleLog","after","self","ComputedNode","graphId","super","isSkip","isStaticNode","filterParams","passThrough","retryLimit","retry","timeout","isResult","priority","includes","agent","agentFunction","async","anyInput","output","pendings","nestedGraph","addPendingNode","graphLoader","if","ifSource","unless","unlessSource","defaultValue","add","isReadyNode","size","Skipped","execute","onExecutionComplete","checkDataAvailability","some","Queued","clear","delete","isCurrentTransaction","executeTimeout","Executing","TimedOut","shouldApplyAgentFilter","agentFilter","agentIds","nodeIds","agentFilterHandler","context","next","innerContext","agentFilters","afterExecute","previousResults","prepareExecute","setTimeout","getAgentFunctionInfo","getContext","taskManager","prepareForNesting","forNestedGraph","graphData","agents","agentFunctionInfoDictionary","graphOptions","bypassAgentIds","config","onLogCallback","beforeConsoleLog","restoreAfterNesting","errorProcess","Completed","getResult","Failed","inputSchema","debugInfo","getDebugInfo","cacheType","r","verbose","version","before","StaticNode","update","injectValue","Injected","consoleLog","graphDataAttributeKeys","computedNodeAttributeKeys","staticNodeAttributeKeys","ValidationError","setPrototypeOf","prototype","validateGraphData","graphNodesValidator","loop","count","while","concurrency","isInteger","graphDataValidator","computedNodeIds","staticNodeIds","graphAgentIds","nodeData","nodeValidator","computedNodeValidator","has","agentValidator","computedNodeId","dataSourceValidator","sourceType","sourceNodeIds","sourceNodeId","staticNodeId","updateNodeId","cycle","possibles","possobleNodeId","running","pendingNodeId","runningQueue","relationValidator","TaskManager","taskQueue","runningNodes","dequeueTaskIfPossible","task","shift","callback","addTask","splice","isRunning","getStatus","queuedNodes","queue","graphDataLatestVersion","createNodes","_nodes","pending","getValueFromResults","initializeStaticNodes","enableConsoleLog","updateStaticNodes","options","logs","__log","__isUpdate","repeatCount","URL","createObjectURL","Blob","agentInfo","validateAgent","all","errors","pushReadyNodesIntoQueue","pushQueueIfReady","pushQueue","_node","run","Promise","resolve","reject","processLoopIfNecessary","initializeGraphAI","setPreviousResults","isLoop","transactionLogs","cleanResult","mock","milliseconds"],"mappings":"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"}