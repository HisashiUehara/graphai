{"version":3,"file":"bundle.min.mjs","sources":["../src/utils/utils.ts","../src/utils/nodeUtils.ts","../src/type.ts","../src/transaction_log.ts","../src/node.ts","../src/utils/prop_function.ts","../src/utils/data_source.ts","../src/utils/result.ts","../src/validators/common.ts","../src/validators/graph_data_validator.ts","../src/validator.ts","../src/validators/nodeValidator.ts","../src/validators/static_node_validator.ts","../src/validators/computed_node_validator.ts","../src/validators/agent_validator.ts","../src/validators/relation_validator.ts","../src/task_manager.ts","../src/graphai.ts"],"sourcesContent":["import { DataSource, AgentFunction, DefaultInputData } from \"@/type\";\n\nexport const sleep = async (milliseconds: number) => {\n  return await new Promise((resolve) => setTimeout(resolve, milliseconds));\n};\n\nexport const parseNodeName = (inputNodeId: any): DataSource => {\n  if (typeof inputNodeId === \"string\") {\n    const regex = /^:(.*)$/;\n    const match = inputNodeId.match(regex);\n    if (!match) {\n      return { value: inputNodeId }; // string literal\n    }\n    const parts = match[1].split(\".\");\n    if (parts.length == 1) {\n      return { nodeId: parts[0] };\n    }\n    return { nodeId: parts[0], propIds: parts.slice(1) };\n  }\n  return { value: inputNodeId }; // non-string literal\n};\n\nexport function assert(condition: boolean, message: string, isWarn: boolean = false): asserts condition {\n  if (!condition) {\n    if (!isWarn) {\n      throw new Error(message);\n    }\n    console.warn(\"warn: \" + message);\n  }\n}\n\nexport const isObject = (x: unknown) => {\n  return x !== null && typeof x === \"object\";\n};\n\nexport const isNull = (data: unknown) => {\n  return data === null || data === undefined;\n};\n\nexport const strIntentionalError = \"Intentional Error for Debugging\";\n\nexport const defaultAgentInfo = {\n  name: \"defaultAgentInfo\",\n  samples: [\n    {\n      inputs: [],\n      params: {},\n      result: {},\n    },\n  ],\n  description: \"\",\n  category: [],\n  author: \"\",\n  repository: \"\",\n  license: \"\",\n};\n\nexport const agentInfoWrapper = (agent: AgentFunction<any, any, any, any>) => {\n  return {\n    agent,\n    mock: agent,\n    ...defaultAgentInfo,\n  };\n};\n\nconst objectToKeyArray = (innerData: any) => {\n  const ret: string[][] = [];\n  Object.keys(innerData).forEach((key: string) => {\n    ret.push([key]);\n    if (Object.keys(innerData[key]).length > 0) {\n      objectToKeyArray(innerData[key]).forEach((tmp: string[]) => {\n        ret.push([key, ...tmp]);\n      });\n    }\n  });\n  return ret;\n};\n\nexport const debugResultKey = (agentId: string, result: any) => {\n  return objectToKeyArray({ [agentId]: debugResultKeyInner(result) }).map((objectKeys: string[]) => {\n    return \":\" + objectKeys.join(\".\");\n  });\n};\n\nconst debugResultKeyInner = (result: any) => {\n  if (result === null || result === undefined) {\n    return {};\n  }\n  if (typeof result === \"string\") {\n    return {};\n  }\n  if (Array.isArray(result)) {\n    return Array.from(result.keys()).reduce((tmp: Record<string, any>, index: number) => {\n      tmp[\"$\" + String(index)] = debugResultKeyInner(result[index]);\n      return tmp;\n    }, {});\n  }\n  return Object.keys(result).reduce((tmp: Record<string, any>, key: string) => {\n    tmp[key] = debugResultKeyInner(result[key]);\n    return tmp;\n  }, {});\n};\n\nexport const isLogicallyTrue = (value: any) => {\n  // Notice that empty aray is not true under GraphAI\n  if (Array.isArray(value) ? value.length === 0 : !value) {\n    return false;\n  }\n  return true;\n};\n\nexport const defaultTestContext = {\n  debugInfo: {\n    nodeId: \"test\",\n    retry: 0,\n    verbose: true,\n  },\n  params: {},\n  filterParams: {},\n  agents: {},\n  log: [],\n};\n\nexport const isNamedInputs = <NamedInput = DefaultInputData>(namedInputs: NamedInput) => {\n  return isObject(namedInputs) && !Array.isArray(namedInputs) && Object.keys(namedInputs || {}).length > 0;\n};\n","import { parseNodeName, isObject } from \"./utils\";\nimport { DataSource } from \"@/type\";\n\n// for dataSource\nexport const inputs2dataSources = (inputs: any): DataSource[] => {\n  if (Array.isArray(inputs)) {\n    return inputs.map((inp) => inputs2dataSources(inp)).flat();\n  }\n  if (isObject(inputs)) {\n    return Object.values(inputs)\n      .map((input) => inputs2dataSources(input))\n      .flat();\n  }\n  if (typeof inputs === \"string\") {\n    const templateMatch = [...inputs.matchAll(/\\${(:[^}]+)}/g)].map((m) => m[1]);\n    if (templateMatch.length > 0) {\n      return inputs2dataSources(templateMatch);\n    }\n  }\n\n  return parseNodeName(inputs) as any;\n};\n\nexport const dataSourceNodeIds = (sources: DataSource[]): string[] => {\n  return sources.filter((source: DataSource) => source.nodeId).map((source) => source.nodeId!);\n};\n","import type { TransactionLog } from \"@/transaction_log\";\nimport type { TaskManager } from \"@/task_manager\";\n\nexport enum NodeState {\n  Waiting = \"waiting\",\n  Queued = \"queued\",\n  Executing = \"executing\",\n  ExecutingServer = \"executing-server\",\n  Failed = \"failed\",\n  TimedOut = \"timed-out\",\n  Completed = \"completed\",\n  Injected = \"injected\",\n  Skipped = \"skipped\",\n}\n\nexport type DefaultResultData = Record<string, any> | string | number | boolean | Array<DefaultResultData>;\nexport type DefaultInputData = Record<string, any>;\nexport type ResultData<ResultType = DefaultResultData> = ResultType | undefined;\nexport type ResultDataDictionary<ResultType = DefaultResultData> = Record<string, ResultData<ResultType>>;\n\nexport type DefaultParamsType = Record<string, any>;\nexport type NodeDataParams<ParamsType = DefaultParamsType> = ParamsType; // Agent-specific parameters\n\nexport type PassThrough = Record<string, any>;\n\nexport type DataSource = {\n  nodeId?: string;\n  value?: any;\n  propIds?: string[];\n};\n\nexport type StaticNodeData = {\n  value: ResultData; // initial value for static node.\n  update?: string; // nodeId (+.propId) to get value after a loop\n  isResult?: boolean;\n  console?: Record<string, string | boolean>;\n};\nexport type AgentAnonymousFunction = (...params: any[]) => unknown;\n\nexport type AgentFilterParams = Record<string, any>;\n\nexport type GraphDataLoaderOption = { fileName: string; option?: any };\n\nexport type ComputedNodeData = {\n  agent: string | AgentAnonymousFunction;\n  inputs?: Array<any> | Record<string, any>;\n  anyInput?: boolean; // any input makes this node ready\n  params?: NodeDataParams;\n  filterParams?: AgentFilterParams; // agent filter\n  retry?: number;\n  timeout?: number; // msec\n  if?: string; // conditional execution\n  unless?: string; // conditional execution\n  graph?: GraphData | string;\n  graphLoader?: GraphDataLoaderOption;\n  isResult?: boolean;\n  priority?: number; // The default is 0.\n  passThrough?: PassThrough; // data that pass trough to result\n  console?: Record<string, string | boolean>;\n};\n\nexport type NodeData = StaticNodeData | ComputedNodeData;\n\nexport type LoopData = {\n  count?: number;\n  while?: string;\n};\n\nexport type GraphData = {\n  version?: number; // major version, 0.1, 0.2, ...\n  nodes: Record<string, NodeData>;\n  concurrency?: number;\n  loop?: LoopData;\n  verbose?: boolean;\n  retry?: number;\n  metadata?: any; // Stores information about GraphData. GraphAI itself is not used this data.\n};\n\nexport type GraphDataLoader = (loaderOption: GraphDataLoaderOption) => GraphData;\n\nexport type GraphOptions = {\n  agentFilters?: AgentFilterInfo[] | undefined;\n  taskManager?: TaskManager | undefined;\n  bypassAgentIds?: string[] | undefined;\n  config?: Record<string, unknown>;\n  graphLoader?: GraphDataLoader;\n};\n\nexport type AgentFunctionContext<ParamsType = DefaultParamsType, InputDataType = DefaultInputData, NamedInputDataType = DefaultInputData> = {\n  params: NodeDataParams<ParamsType>;\n  inputs: Array<InputDataType>;\n  inputSchema?: any;\n  namedInputs: NamedInputDataType;\n  debugInfo: {\n    verbose: boolean;\n    nodeId: string;\n    retry: number;\n    agentId?: string;\n    version?: number;\n    isResult?: boolean;\n  };\n  graphData?: GraphData; // nested graph\n  agents?: AgentFunctionInfoDictionary; // for nested graph\n  taskManager?: TaskManager; // for nested graph\n  onLogCallback?: (log: TransactionLog, isUpdate: boolean) => void;\n  filterParams: AgentFilterParams; // agent filter\n  agentFilters?: AgentFilterInfo[];\n  log?: TransactionLog[];\n  config?: Record<string, unknown>;\n};\n\nexport type AgentFunction<\n  ParamsType = DefaultParamsType,\n  ResultType = DefaultResultData,\n  InputDataType = DefaultInputData,\n  NamedInputDataType = DefaultInputData,\n> = (context: AgentFunctionContext<ParamsType, InputDataType, NamedInputDataType>) => Promise<ResultData<ResultType>>;\n\nexport type AgentFilterFunction<\n  ParamsType = DefaultParamsType,\n  ResultType = DefaultResultData,\n  InputDataType = DefaultInputData,\n  NamedInputDataType = DefaultInputData,\n> = (context: AgentFunctionContext<ParamsType, InputDataType, NamedInputDataType>, agent: AgentFunction) => Promise<ResultData<ResultType>>;\n\nexport type AgentFilterInfo = {\n  name: string;\n  agent: AgentFilterFunction;\n  agentIds?: string[];\n  nodeIds?: string[];\n  filterParams?: AgentFilterParams;\n};\n\nexport type AgentFunctionInfoSample = {\n  inputs: any;\n  params: DefaultParamsType;\n  result: any;\n  graph?: GraphData;\n};\n\nexport type AgentFunctionInfo = {\n  name: string;\n  agent: AgentFunction<any, any, any, any>;\n  mock: AgentFunction<any, any, any, any>;\n  inputs?: any;\n  output?: any;\n  outputFormat?: any;\n  params?: any;\n  samples: AgentFunctionInfoSample[];\n  description: string;\n  category: string[];\n  author: string;\n  repository: string;\n  license: string;\n\n  environmentVariables?: string[];\n  stream?: boolean;\n  apiKeys?: string[];\n  npms?: string[];\n};\n\nexport type AgentFunctionInfoDictionary = Record<string, AgentFunctionInfo>;\n\nexport type PropFunction = (result: ResultData, propId: string) => ResultData;\n","import { ResultData, NodeDataParams, NodeState } from \"@/type\";\nimport type { GraphAI } from \"@/graphai\";\nimport type { ComputedNode, StaticNode } from \"@/node\";\nimport { debugResultKey } from \"@/utils/utils\";\nimport { dataSourceNodeIds } from \"@/utils/nodeUtils\";\n\nexport class TransactionLog {\n  public nodeId: string;\n  public state: NodeState;\n  public startTime?: number;\n  public endTime?: number;\n  public retryCount?: number;\n  public agentId?: string;\n  public params?: NodeDataParams;\n  public inputs?: string[];\n  public inputsData?: Array<ResultData>;\n  public injectFrom?: string;\n  public errorMessage?: string;\n  public result?: ResultData;\n  public resultKeys?: string[];\n  public mapIndex?: number;\n  public isLoop?: boolean;\n  public repeatCount?: number;\n  public log?: TransactionLog[];\n  constructor(nodeId: string) {\n    this.nodeId = nodeId;\n    this.state = NodeState.Waiting;\n  }\n\n  public initForComputedNode(node: ComputedNode, graph: GraphAI) {\n    this.agentId = node.getAgentId();\n    this.params = node.params;\n    graph.appendLog(this);\n  }\n\n  public onInjected(node: StaticNode, graph: GraphAI, injectFrom?: string) {\n    const isUpdating = \"endTime\" in this;\n    this.result = node.result;\n    this.state = node.state;\n    this.endTime = Date.now();\n    this.injectFrom = injectFrom;\n    graph.setLoopLog(this);\n    // console.log(this)\n    if (isUpdating) {\n      graph.updateLog(this);\n    } else {\n      graph.appendLog(this);\n    }\n  }\n\n  public onComplete(node: ComputedNode, graph: GraphAI, localLog: TransactionLog[]) {\n    this.result = node.result;\n    this.resultKeys = debugResultKey(this.agentId || \"\", node.result);\n    this.state = node.state;\n    this.endTime = Date.now();\n    graph.setLoopLog(this);\n    if (localLog.length > 0) {\n      this.log = localLog;\n    }\n    graph.updateLog(this);\n  }\n\n  public beforeExecute(node: ComputedNode, graph: GraphAI, transactionId: number, inputs: ResultData[]) {\n    this.state = node.state;\n    this.retryCount = node.retryCount > 0 ? node.retryCount : undefined;\n    this.startTime = transactionId;\n    this.inputs = dataSourceNodeIds(node.dataSources);\n    this.inputsData = inputs.length > 0 ? inputs : undefined;\n    graph.setLoopLog(this);\n    graph.appendLog(this);\n  }\n\n  public beforeAddTask(node: ComputedNode, graph: GraphAI) {\n    this.state = node.state;\n    graph.setLoopLog(this);\n    graph.appendLog(this);\n  }\n\n  public onError(node: ComputedNode, graph: GraphAI, errorMessage: string) {\n    this.state = node.state;\n    this.errorMessage = errorMessage;\n    this.endTime = Date.now();\n    graph.setLoopLog(this);\n    graph.updateLog(this);\n  }\n\n  public onSkipped(node: ComputedNode, graph: GraphAI) {\n    this.state = node.state;\n    graph.setLoopLog(this);\n    graph.updateLog(this);\n  }\n}\n","import type { GraphAI, GraphData } from \"@/index\";\nimport { strIntentionalError } from \"@/utils/utils\";\nimport { inputs2dataSources, dataSourceNodeIds } from \"@/utils/nodeUtils\";\n\nimport {\n  NodeDataParams,\n  ResultData,\n  DataSource,\n  ComputedNodeData,\n  StaticNodeData,\n  NodeState,\n  AgentFunctionContext,\n  AgentFunction,\n  AgentFilterInfo,\n  AgentFilterParams,\n  DefaultParamsType,\n  DefaultInputData,\n  PassThrough,\n} from \"@/type\";\nimport { parseNodeName, assert, isLogicallyTrue, isObject } from \"@/utils/utils\";\nimport { TransactionLog } from \"@/transaction_log\";\n\nexport class Node {\n  public readonly nodeId: string;\n  public readonly waitlist = new Set<string>(); // List of nodes which need data from this node.\n  public state = NodeState.Waiting;\n  public result: ResultData | undefined = undefined;\n\n  protected graph: GraphAI;\n  protected log: TransactionLog;\n  protected console: Record<string, string | boolean>; // console output option (before and/or after)\n\n  constructor(nodeId: string, graph: GraphAI) {\n    this.nodeId = nodeId;\n    this.graph = graph;\n    this.log = new TransactionLog(nodeId);\n    this.console = {};\n  }\n\n  public asString() {\n    return `${this.nodeId}: ${this.state} ${[...this.waitlist]}`;\n  }\n\n  // This method is called either as the result of computation (computed node) or\n  // injection (static node).\n  protected onSetResult() {\n    this.waitlist.forEach((waitingNodeId) => {\n      const waitingNode = this.graph.nodes[waitingNodeId];\n      if (waitingNode.isComputedNode) {\n        waitingNode.removePending(this.nodeId);\n        this.graph.pushQueueIfReadyAndRunning(waitingNode);\n      }\n    });\n  }\n\n  protected afterConsoleLog(result: ResultData) {\n    if (this.console.after === true) {\n      console.log(typeof result === \"string\" ? result : JSON.stringify(result, null, 2));\n    } else if (this.console.after) {\n      console.log(this.console.after);\n    }\n  }\n}\n\nexport class ComputedNode extends Node {\n  public readonly graphId: string;\n  public readonly isResult: boolean;\n  public readonly params: NodeDataParams; // Agent-specific parameters\n  private readonly filterParams: AgentFilterParams;\n  private readonly dynamicParams: Record<string, DataSource>;\n  public readonly nestedGraph?: GraphData | DataSource;\n  public readonly retryLimit: number;\n  public retryCount: number = 0;\n  private readonly agentId?: string;\n  private readonly agentFunction?: AgentFunction<any, any, any, any>;\n  public readonly timeout?: number; // msec\n  public readonly priority: number;\n  public error?: Error;\n  public transactionId: undefined | number; // To reject callbacks from timed-out transactions\n  private readonly passThrough?: PassThrough;\n\n  public readonly anyInput: boolean; // any input makes this node ready\n  public dataSources: DataSource[] = []; // no longer needed. This is for transaction log.\n  private inputs?: Array<any> | Record<string, any>;\n  public isNamedInputs: boolean = false;\n  public pendings: Set<string>; // List of nodes this node is waiting data from.\n  private ifSource?: DataSource; // conditional execution\n  private unlessSource?: DataSource; // conditional execution\n\n  public readonly isStaticNode = false;\n  public readonly isComputedNode = true;\n\n  constructor(graphId: string, nodeId: string, data: ComputedNodeData, graph: GraphAI) {\n    super(nodeId, graph);\n    this.graphId = graphId;\n    this.params = data.params ?? {};\n    this.console = data.console ?? {};\n    this.filterParams = data.filterParams ?? {};\n    this.passThrough = data.passThrough;\n    this.retryLimit = data.retry ?? graph.retryLimit ?? 0;\n    this.timeout = data.timeout;\n    this.isResult = data.isResult ?? false;\n    this.priority = data.priority ?? 0;\n\n    this.anyInput = data.anyInput ?? false;\n    this.inputs = data.inputs;\n    this.isNamedInputs = isObject(data.inputs) && !Array.isArray(data.inputs);\n    this.dataSources = data.inputs ? inputs2dataSources(data.inputs).flat(10) : [];\n    if (data.inputs && !this.isNamedInputs) {\n      console.warn(`array inputs have been deprecated. nodeId: ${nodeId}: see https://github.com/receptron/graphai/blob/main/docs/NamedInputs.md`);\n    }\n\n    this.pendings = new Set(dataSourceNodeIds(this.dataSources));\n    assert([\"function\", \"string\"].includes(typeof data.agent), \"agent must be either string or function\");\n    if (typeof data.agent === \"string\") {\n      this.agentId = data.agent;\n    } else {\n      const agent = data.agent;\n      this.agentFunction = this.isNamedInputs ? async ({ namedInputs }) => agent(namedInputs) : async ({ inputs }) => agent(...inputs);\n    }\n    if (data.graph) {\n      this.nestedGraph = typeof data.graph === \"string\" ? this.addPendingNode(data.graph) : data.graph;\n    }\n    if (data.graphLoader && graph.graphLoader) {\n      this.nestedGraph = graph.graphLoader(data.graphLoader);\n    }\n    if (data.if) {\n      this.ifSource = this.addPendingNode(data.if);\n    }\n    if (data.unless) {\n      this.unlessSource = this.addPendingNode(data.unless);\n    }\n    this.dynamicParams = Object.keys(this.params).reduce((tmp: Record<string, DataSource>, key) => {\n      const dataSource = parseNodeName(this.params[key]);\n      if (dataSource.nodeId) {\n        assert(!this.anyInput, \"Dynamic params are not supported with anyInput\");\n        tmp[key] = dataSource;\n        this.pendings.add(dataSource.nodeId);\n      }\n      return tmp;\n    }, {});\n\n    this.log.initForComputedNode(this, graph);\n  }\n\n  public getAgentId() {\n    return this.agentId ?? \"__custom__function\"; // only for display purpose in the log.\n  }\n\n  private addPendingNode(nodeId: string) {\n    const source = parseNodeName(nodeId);\n    assert(!!source.nodeId, `Invalid data source ${nodeId}`);\n    this.pendings.add(source.nodeId);\n    return source;\n  }\n\n  public isReadyNode() {\n    if (this.state !== NodeState.Waiting || this.pendings.size !== 0) {\n      return false;\n    }\n    if (\n      (this.ifSource && !isLogicallyTrue(this.graph.resultOf(this.ifSource))) ||\n      (this.unlessSource && isLogicallyTrue(this.graph.resultOf(this.unlessSource)))\n    ) {\n      this.state = NodeState.Skipped;\n      this.log.onSkipped(this, this.graph);\n      return false;\n    }\n    return true;\n  }\n\n  // This private method (only called while executing execute()) performs\n  // the \"retry\" if specified. The transaction log must be updated before\n  // callling this method.\n  private retry(state: NodeState, error: Error) {\n    this.state = state; // this.execute() will update to NodeState.Executing\n    this.log.onError(this, this.graph, error.message);\n\n    if (this.retryCount < this.retryLimit) {\n      this.retryCount++;\n      this.execute();\n    } else {\n      this.result = undefined;\n      this.error = error;\n      this.transactionId = undefined; // This is necessary for timeout case\n      this.graph.onExecutionComplete(this);\n    }\n  }\n\n  private checkDataAvailability() {\n    return Object.values(this.graph.resultsOf(this.inputs))\n      .flat()\n      .some((result) => result !== undefined);\n  }\n\n  // This method is called right before the Graph add this node to the task manager.\n  public beforeAddTask() {\n    this.state = NodeState.Queued;\n    this.log.beforeAddTask(this, this.graph);\n  }\n\n  // This method is called when the data became available on one of nodes,\n  // which this node needs data from.\n  public removePending(nodeId: string) {\n    if (this.anyInput) {\n      if (this.checkDataAvailability()) {\n        this.pendings.clear();\n      }\n    } else {\n      this.pendings.delete(nodeId);\n    }\n  }\n\n  private isCurrentTransaction(transactionId: number) {\n    return this.transactionId === transactionId;\n  }\n\n  // This private method (called only fro execute) checks if the callback from\n  // the timer came before the completion of agent function call, record it\n  // and attempt to retry (if specified).\n  private executeTimeout(transactionId: number) {\n    if (this.state === NodeState.Executing && this.isCurrentTransaction(transactionId)) {\n      console.warn(`-- timeout ${this.timeout} with ${this.nodeId}`);\n      this.retry(NodeState.TimedOut, Error(\"Timeout\"));\n    }\n  }\n\n  // Check if we need to apply this filter to this node or not.\n  private shouldApplyAgentFilter(agentFilter: AgentFilterInfo) {\n    if (agentFilter.agentIds && Array.isArray(agentFilter.agentIds) && agentFilter.agentIds.length > 0) {\n      if (this.agentId && agentFilter.agentIds.includes(this.agentId)) {\n        return true;\n      }\n    }\n    if (agentFilter.nodeIds && Array.isArray(agentFilter.nodeIds) && agentFilter.nodeIds.length > 0) {\n      if (agentFilter.nodeIds.includes(this.nodeId)) {\n        return true;\n      }\n    }\n    return !agentFilter.agentIds && !agentFilter.nodeIds;\n  }\n\n  private agentFilterHandler(context: AgentFunctionContext, agentFunction: AgentFunction): Promise<ResultData> {\n    let index = 0;\n\n    const next = (innerContext: AgentFunctionContext): Promise<ResultData> => {\n      const agentFilter = this.graph.agentFilters[index++];\n      if (agentFilter) {\n        if (this.shouldApplyAgentFilter(agentFilter)) {\n          if (agentFilter.filterParams) {\n            innerContext.filterParams = { ...agentFilter.filterParams, ...innerContext.filterParams };\n          }\n          return agentFilter.agent(innerContext, next);\n        }\n        return next(innerContext);\n      }\n      return agentFunction(innerContext);\n    };\n\n    return next(context);\n  }\n\n  // This method is called when this computed node became ready to run.\n  // It asynchronously calls the associated with agent function and set the result,\n  // then it removes itself from the \"running node\" list of the graph.\n  // Notice that setting the result of this node may make other nodes ready to run.\n  public async execute() {\n    const previousResults = this.graph.resultsOf(this.inputs, this.anyInput);\n    const transactionId = Date.now();\n    this.prepareExecute(transactionId, Object.values(previousResults));\n\n    if (this.timeout && this.timeout > 0) {\n      setTimeout(() => {\n        this.executeTimeout(transactionId);\n      }, this.timeout);\n    }\n\n    try {\n      const agentFunction = this.agentFunction ?? this.graph.getAgentFunctionInfo(this.agentId).agent;\n      const localLog: TransactionLog[] = [];\n      const context = this.getContext(previousResults, localLog);\n\n      // NOTE: We use the existence of graph object in the agent-specific params to determine\n      // if this is a nested agent or not.\n      if (this.nestedGraph) {\n        this.graph.taskManager.prepareForNesting();\n        context.taskManager = this.graph.taskManager;\n        context.onLogCallback = this.graph.onLogCallback;\n        if (\"nodes\" in this.nestedGraph) {\n          context.graphData = this.nestedGraph;\n        } else {\n          context.graphData = this.graph.resultOf(this.nestedGraph) as GraphData; // HACK: compiler work-around\n        }\n        context.agents = this.graph.agentFunctionInfoDictionary;\n      }\n\n      this.beforeConsoleLog(context);\n      const result = await this.agentFilterHandler(context as AgentFunctionContext, agentFunction);\n      this.afterConsoleLog(result);\n\n      if (this.nestedGraph) {\n        this.graph.taskManager.restoreAfterNesting();\n      }\n\n      if (!this.isCurrentTransaction(transactionId)) {\n        // This condition happens when the agent function returns\n        // after the timeout (either retried or not).\n        console.log(`-- transactionId mismatch with ${this.nodeId} (probably timeout)`);\n        return;\n      }\n\n      this.state = NodeState.Completed;\n      this.result = this.getResult(result);\n      this.log.onComplete(this, this.graph, localLog);\n\n      this.onSetResult();\n\n      this.graph.onExecutionComplete(this);\n    } catch (error) {\n      this.errorProcess(error, transactionId, previousResults);\n    }\n  }\n\n  // This private method (called only by execute()) prepares the ComputedNode object\n  // for execution, and create a new transaction to record it.\n  private prepareExecute(transactionId: number, inputs: Array<ResultData>) {\n    this.state = NodeState.Executing;\n    this.log.beforeExecute(this, this.graph, transactionId, inputs);\n    this.transactionId = transactionId;\n  }\n\n  // This private method (called only by execute) processes an error received from\n  // the agent function. It records the error in the transaction log and handles\n  // the retry if specified.\n  private errorProcess(error: unknown, transactionId: number, namedInputs: DefaultInputData) {\n    if (error instanceof Error && error.message !== strIntentionalError) {\n      console.error(`<-- NodeId: ${this.nodeId}, Agent: ${this.agentId}`);\n      console.error({ namedInputs });\n      console.error(error);\n      console.error(\"-->\");\n    }\n    if (!this.isCurrentTransaction(transactionId)) {\n      console.warn(`-- transactionId mismatch with ${this.nodeId} (not timeout)`);\n      return;\n    }\n\n    if (error instanceof Error) {\n      this.retry(NodeState.Failed, error);\n    } else {\n      console.error(`-- NodeId: ${this.nodeId}: Unknown error was caught`);\n      this.retry(NodeState.Failed, Error(\"Unknown\"));\n    }\n  }\n\n  private getParams() {\n    return Object.keys(this.dynamicParams).reduce(\n      (tmp, key) => {\n        const result = this.graph.resultOf(this.dynamicParams[key]);\n        tmp[key] = result;\n        return tmp;\n      },\n      { ...this.params },\n    );\n  }\n  private getInputs(previousResults: Record<string, ResultData | undefined>) {\n    if (Array.isArray(this.inputs)) {\n      return (this.inputs ?? []).map((key) => previousResults[String(key)]).filter((a) => !this.anyInput || a);\n    }\n    return [];\n  }\n\n  private getContext(previousResults: Record<string, ResultData | undefined>, localLog: TransactionLog[]) {\n    const context: AgentFunctionContext<DefaultParamsType, DefaultInputData | string | number | boolean | undefined> = {\n      params: this.getParams(),\n      inputs: this.getInputs(previousResults),\n      namedInputs: this.isNamedInputs ? previousResults : {},\n      inputSchema: this.agentFunction ? undefined : this.graph.getAgentFunctionInfo(this.agentId)?.inputs,\n      debugInfo: this.getDebugInfo(),\n      filterParams: this.filterParams,\n      agentFilters: this.graph.agentFilters,\n      config: this.graph.config,\n      log: localLog,\n    };\n    return context;\n  }\n\n  private getResult(result: ResultData) {\n    if (result && this.passThrough) {\n      if (isObject(result) && !Array.isArray(result)) {\n        return { ...result, ...this.passThrough };\n      } else if (Array.isArray(result)) {\n        return result.map((r) => (isObject(r) && !Array.isArray(r) ? { ...r, ...this.passThrough } : r));\n      }\n    }\n    return result;\n  }\n\n  private getDebugInfo() {\n    return {\n      nodeId: this.nodeId,\n      agentId: this.agentId,\n      retry: this.retryCount,\n      verbose: this.graph.verbose,\n      version: this.graph.version,\n      isResult: this.isResult,\n    };\n  }\n\n  private beforeConsoleLog(context: AgentFunctionContext<DefaultParamsType, string | number | boolean | DefaultInputData | undefined>) {\n    if (this.console.before === true) {\n      console.log(JSON.stringify(this.isNamedInputs ? context.namedInputs : context.inputs, null, 2));\n    } else if (this.console.before) {\n      console.log(this.console.before);\n    }\n  }\n}\n\nexport class StaticNode extends Node {\n  public value?: ResultData;\n  public readonly update?: DataSource;\n  public readonly isResult: boolean;\n  public readonly isStaticNode = true;\n  public readonly isComputedNode = false;\n\n  constructor(nodeId: string, data: StaticNodeData, graph: GraphAI) {\n    super(nodeId, graph);\n    this.value = data.value;\n    this.update = data.update ? parseNodeName(data.update) : undefined;\n    this.isResult = data.isResult ?? false;\n    this.console = data.console ?? {};\n  }\n\n  public injectValue(value: ResultData, injectFrom?: string) {\n    this.state = NodeState.Injected;\n    this.result = value;\n    this.log.onInjected(this, this.graph, injectFrom);\n    this.onSetResult();\n  }\n\n  public consoleLog() {\n    this.afterConsoleLog(this.result);\n  }\n}\n\nexport type GraphNodes = Record<string, ComputedNode | StaticNode>;\n","import { PropFunction } from \"@/type\";\nimport { isObject } from \"./utils\";\n\nexport const propFunctionRegex = /^[a-zA-Z]+\\([^)]*\\)$/;\n\nconst propArrayFunction: PropFunction = (result, propId) => {\n  if (Array.isArray(result)) {\n    if (propId === \"length()\") {\n      return result.length;\n    }\n    if (propId === \"flat()\") {\n      return result.flat();\n    }\n    if (propId === \"toJSON()\") {\n      return JSON.stringify(result);\n    }\n    if (propId === \"isEmpty()\") {\n      return result.length === 0;\n    }\n    // array join\n    const matchJoin = propId.match(/^join\\(([,-]?)\\)$/);\n    if (matchJoin && Array.isArray(matchJoin)) {\n      return result.join(matchJoin[1] ?? \"\");\n    }\n  }\n  return undefined;\n};\n\nconst propObjectFunction: PropFunction = (result, propId) => {\n  if (isObject(result)) {\n    if (propId === \"keys()\") {\n      return Object.keys(result);\n    }\n    if (propId === \"values()\") {\n      return Object.values(result);\n    }\n    if (propId === \"toJSON()\") {\n      return JSON.stringify(result);\n    }\n  }\n  return undefined;\n};\n\nconst propStringFunction: PropFunction = (result, propId) => {\n  if (typeof result === \"string\") {\n    if (propId === \"codeBlock()\") {\n      const match = (\"\\n\" + result).match(/\\n```[a-zA-z]*([\\s\\S]*?)\\n```/);\n      if (match) {\n        return match[1];\n      }\n    }\n    if (propId === \"jsonParse()\") {\n      return JSON.parse(result);\n    }\n    if (propId === \"toNumber()\") {\n      const ret = Number(result);\n      if (!isNaN(ret)) {\n        return ret;\n      }\n    }\n  }\n  return undefined;\n};\nconst propNumberFunction: PropFunction = (result, propId) => {\n  if (result !== undefined && Number.isFinite(result)) {\n    if (propId === \"toString()\") {\n      return String(result);\n    }\n    const regex = /^add\\((-?\\d+)\\)$/;\n    const match = propId.match(regex);\n    if (match) {\n      return Number(result) + Number(match[1]);\n    }\n  }\n  return undefined;\n};\nconst propBooleanFunction: PropFunction = (result, propId) => {\n  if (typeof result === \"boolean\") {\n    if (propId === \"not()\") {\n      return !result;\n    }\n  }\n  return undefined;\n};\n\nexport const propFunctions = [propArrayFunction, propObjectFunction, propStringFunction, propNumberFunction, propBooleanFunction];\n","import { ResultData, DataSource, PropFunction } from \"@/type\";\nimport { isObject, isNull } from \"./utils\";\nimport { propFunctionRegex } from \"./prop_function\";\n\nconst getNestedData = (result: ResultData, propId: string, propFunctions: PropFunction[]) => {\n  const match = propId.match(propFunctionRegex);\n  if (match) {\n    for (const propFunction of propFunctions) {\n      const ret = propFunction(result, propId);\n      if (!isNull(ret)) {\n        return ret;\n      }\n    }\n  }\n\n  // for array.\n  if (Array.isArray(result)) {\n    // $0, $1. array value.\n    const regex = /^\\$(\\d+)$/;\n    const match = propId.match(regex);\n    if (match) {\n      const index = parseInt(match[1], 10);\n      return result[index];\n    }\n    if (propId === \"$last\") {\n      return result[result.length - 1];\n    }\n  } else if (isObject(result)) {\n    if (propId in result) {\n      return result[propId];\n    }\n  }\n  return undefined;\n};\n\nconst innerGetDataFromSource = (result: ResultData, propIds: string[] | undefined, propFunctions: PropFunction[]): ResultData | undefined => {\n  if (!isNull(result) && propIds && propIds.length > 0) {\n    const propId = propIds[0];\n    const ret = getNestedData(result, propId, propFunctions);\n    if (ret === undefined) {\n      console.error(`prop: ${propIds.join(\".\")} is not hit`);\n    }\n    if (propIds.length > 1) {\n      return innerGetDataFromSource(ret, propIds.slice(1), propFunctions);\n    }\n    return ret;\n  }\n  return result;\n};\n\nexport const getDataFromSource = (result: ResultData | undefined, source: DataSource, propFunctions: PropFunction[] = []): ResultData | undefined => {\n  if (!source.nodeId) {\n    return source.value;\n  }\n  return innerGetDataFromSource(result, source.propIds, propFunctions);\n};\n","import { DataSource, ResultData, PropFunction } from \"@/type\";\n\nimport { GraphNodes } from \"@/node\";\n\nimport { parseNodeName, isNamedInputs, isObject, isNull } from \"@/utils/utils\";\nimport { getDataFromSource } from \"@/utils/data_source\";\n\nconst resultsOfInner = (input: any, nodes: GraphNodes, propFunctions: PropFunction[]): ResultData => {\n  if (Array.isArray(input)) {\n    return input.map((inp) => resultsOfInner(inp, nodes, propFunctions));\n  }\n  if (isNamedInputs(input)) {\n    return resultsOf(input, nodes, propFunctions);\n  }\n  if (typeof input === \"string\") {\n    const templateMatch = [...input.matchAll(/\\${(:[^}]+)}/g)].map((m) => m[1]);\n    if (templateMatch.length > 0) {\n      const results = resultsOfInner(templateMatch, nodes, propFunctions);\n      return Array.from(templateMatch.keys()).reduce((tmp, key) => {\n        return tmp.replaceAll(\"${\" + templateMatch[key] + \"}\", (results as any)[key]);\n      }, input);\n    }\n  }\n  return resultOf(parseNodeName(input), nodes, propFunctions);\n};\n\nexport const resultsOf = (inputs: Record<string, any> | Array<string>, nodes: GraphNodes, propFunctions: PropFunction[]) => {\n  // for inputs. TODO remove if array input is not supported\n  if (Array.isArray(inputs)) {\n    return inputs.reduce((tmp: Record<string, ResultData>, key) => {\n      tmp[key] = resultsOfInner(key, nodes, propFunctions);\n      return tmp;\n    }, {});\n  }\n  return Object.keys(inputs).reduce((tmp: Record<string, ResultData>, key) => {\n    const input = inputs[key];\n    tmp[key] = isNamedInputs(input) ? resultsOf(input, nodes, propFunctions) : resultsOfInner(input, nodes, propFunctions);\n    return tmp;\n  }, {});\n};\n\nexport const resultOf = (source: DataSource, nodes: GraphNodes, propFunctions: PropFunction[]) => {\n  const { result } = source.nodeId ? nodes[source.nodeId] : { result: undefined };\n  return getDataFromSource(result, source, propFunctions);\n};\n\n// clean up object for anyInput\nexport const cleanResultInner = (results: ResultData): ResultData | null => {\n  if (Array.isArray(results)) {\n    return results.map((result: ResultData) => cleanResultInner(result)).filter((result) => !isNull(result));\n  }\n\n  if (isObject(results)) {\n    return Object.keys(results).reduce((tmp: Record<string, ResultData>, key: string) => {\n      const value = cleanResultInner(results[key]);\n      if (!isNull(value)) {\n        tmp[key] = value;\n      }\n      return tmp;\n    }, {});\n  }\n\n  return results;\n};\n\nexport const cleanResult = (results: Record<string, ResultData | undefined>) => {\n  return Object.keys(results).reduce((tmp: Record<string, ResultData | undefined>, key: string) => {\n    const value = cleanResultInner(results[key]);\n    if (!isNull(value)) {\n      tmp[key] = value;\n    }\n    return tmp;\n  }, {});\n};\n","export const graphDataAttributeKeys = [\"nodes\", \"concurrency\", \"agentId\", \"loop\", \"verbose\", \"version\"];\n\nexport const computedNodeAttributeKeys = [\n  \"inputs\",\n  \"anyInput\",\n  \"params\",\n  \"retry\",\n  \"timeout\",\n  \"agent\",\n  \"graph\",\n  \"graphLoader\",\n  \"isResult\",\n  \"priority\",\n  \"if\",\n  \"unless\",\n  \"filterParams\",\n  \"console\",\n  \"passThrough\",\n];\nexport const staticNodeAttributeKeys = [\"value\", \"update\", \"isResult\", \"console\"];\n\nexport class ValidationError extends Error {\n  constructor(message: string) {\n    super(`\\x1b[41m${message}\\x1b[0m`); // Pass the message to the base Error class\n\n    // Set the prototype explicitly to ensure correct prototype chain\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n}\n","import { GraphData } from \"@/type\";\nimport { graphDataAttributeKeys, ValidationError } from \"@/validators/common\";\n\nexport const graphNodesValidator = (data: GraphData) => {\n  if (data.nodes === undefined) {\n    throw new ValidationError(\"Invalid Graph Data: no nodes\");\n  }\n  if (typeof data.nodes !== \"object\") {\n    throw new ValidationError(\"Invalid Graph Data: invalid nodes\");\n  }\n  if (Array.isArray(data.nodes)) {\n    throw new ValidationError(\"Invalid Graph Data: nodes must be object\");\n  }\n  if (Object.keys(data.nodes).length === 0) {\n    throw new ValidationError(\"Invalid Graph Data: nodes is empty\");\n  }\n  Object.keys(data).forEach((key) => {\n    if (!graphDataAttributeKeys.includes(key)) {\n      throw new ValidationError(\"Graph Data does not allow \" + key);\n    }\n  });\n};\nexport const graphDataValidator = (data: GraphData) => {\n  if (data.loop) {\n    if (data.loop.count === undefined && data.loop.while === undefined) {\n      throw new ValidationError(\"Loop: Either count or while is required in loop\");\n    }\n    if (data.loop.count !== undefined && data.loop.while !== undefined) {\n      throw new ValidationError(\"Loop: Both count and while cannot be set\");\n    }\n  }\n  if (data.concurrency !== undefined) {\n    if (!Number.isInteger(data.concurrency)) {\n      throw new ValidationError(\"Concurrency must be an integer\");\n    }\n    if (data.concurrency < 1) {\n      throw new ValidationError(\"Concurrency must be a positive integer\");\n    }\n  }\n};\n","import { GraphData } from \"@/type\";\n\nimport { graphNodesValidator, graphDataValidator } from \"@/validators/graph_data_validator\";\nimport { nodeValidator } from \"@/validators/nodeValidator\";\nimport { staticNodeValidator } from \"@/validators/static_node_validator\";\nimport { computedNodeValidator } from \"@/validators/computed_node_validator\";\nimport { relationValidator } from \"@/validators/relation_validator\";\nimport { agentValidator } from \"@/validators/agent_validator\";\n\nexport const validateGraphData = (data: GraphData, agentIds: string[]) => {\n  graphNodesValidator(data);\n  graphDataValidator(data);\n  const computedNodeIds: string[] = [];\n  const staticNodeIds: string[] = [];\n  const graphAgentIds = new Set<string>();\n  Object.keys(data.nodes).forEach((nodeId) => {\n    const node = data.nodes[nodeId];\n    const isStaticNode = \"value\" in node;\n    nodeValidator(node);\n    const agentId = isStaticNode ? \"\" : node.agent;\n    isStaticNode && staticNodeValidator(node) && staticNodeIds.push(nodeId);\n    !isStaticNode && computedNodeValidator(node) && computedNodeIds.push(nodeId) && typeof agentId === \"string\" && graphAgentIds.add(agentId);\n  });\n  agentValidator(graphAgentIds, new Set<string>(agentIds));\n  relationValidator(data, staticNodeIds, computedNodeIds);\n\n  return true;\n};\n","import { NodeData, StaticNodeData, ComputedNodeData } from \"@/type\";\nimport { ValidationError } from \"@/validators/common\";\n\nexport const nodeValidator = (nodeData: NodeData) => {\n  if ((nodeData as ComputedNodeData).agent && (nodeData as StaticNodeData).value) {\n    throw new ValidationError(\"Cannot set both agent and value\");\n  }\n  if (!(\"agent\" in nodeData) && !(\"value\" in nodeData)) {\n    throw new ValidationError(\"Either agent or value is required\");\n  }\n  return true;\n};\n","import { StaticNodeData } from \"@/type\";\nimport { staticNodeAttributeKeys, ValidationError } from \"@/validators/common\";\n\nexport const staticNodeValidator = (nodeData: StaticNodeData) => {\n  Object.keys(nodeData).forEach((key) => {\n    if (!staticNodeAttributeKeys.includes(key)) {\n      throw new ValidationError(\"Static node does not allow \" + key);\n    }\n  });\n  return true;\n};\n","import { ComputedNodeData } from \"@/type\";\nimport { computedNodeAttributeKeys, ValidationError } from \"@/validators/common\";\n\nexport const computedNodeValidator = (nodeData: ComputedNodeData) => {\n  Object.keys(nodeData).forEach((key) => {\n    if (!computedNodeAttributeKeys.includes(key)) {\n      throw new ValidationError(\"Computed node does not allow \" + key);\n    }\n  });\n  return true;\n};\n","import { ValidationError } from \"@/validators/common\";\n\nexport const agentValidator = (graphAgentIds: Set<string>, agentIds: Set<string>) => {\n  graphAgentIds.forEach((agentId) => {\n    if (!agentIds.has(agentId)) {\n      throw new ValidationError(\"Invalid Agent : \" + agentId + \" is not in AgentFunctionInfoDictionary.\");\n    }\n  });\n  return true;\n};\n","import { GraphData } from \"@/type\";\nimport { parseNodeName } from \"@/utils/utils\";\nimport { ValidationError } from \"@/validators/common\";\nimport { inputs2dataSources, dataSourceNodeIds } from \"@/utils/nodeUtils\";\n\nexport const relationValidator = (data: GraphData, staticNodeIds: string[], computedNodeIds: string[]) => {\n  const nodeIds = new Set<string>(Object.keys(data.nodes));\n\n  const pendings: Record<string, Set<string>> = {};\n  const waitlist: Record<string, Set<string>> = {};\n\n  // validate input relation and set pendings and wait list\n  computedNodeIds.forEach((computedNodeId) => {\n    const nodeData = data.nodes[computedNodeId];\n    pendings[computedNodeId] = new Set<string>();\n\n    const dataSourceValidator = (sourceType: string, sourceNodeIds: string[]) => {\n      sourceNodeIds.forEach((sourceNodeId) => {\n        if (sourceNodeId) {\n          if (!nodeIds.has(sourceNodeId)) {\n            throw new ValidationError(`${sourceType} not match: NodeId ${computedNodeId}, Inputs: ${sourceNodeId}`);\n          }\n          waitlist[sourceNodeId] === undefined && (waitlist[sourceNodeId] = new Set<string>());\n          pendings[computedNodeId].add(sourceNodeId);\n          waitlist[sourceNodeId].add(computedNodeId);\n        }\n      });\n    };\n    if (\"agent\" in nodeData && nodeData) {\n      if (nodeData.inputs) {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources(nodeData.inputs));\n        dataSourceValidator(\"Inputs\", sourceNodeIds);\n      }\n      if (nodeData.if) {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources({ if: nodeData.if }));\n        dataSourceValidator(\"If\", sourceNodeIds);\n      }\n      if (nodeData.unless) {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources({ unless: nodeData.unless }));\n        dataSourceValidator(\"Unless\", sourceNodeIds);\n      }\n      if (nodeData.graph && typeof nodeData?.graph === \"string\") {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources({ graph: nodeData.graph }));\n        dataSourceValidator(\"Graph\", sourceNodeIds);\n      }\n    }\n  });\n\n  // TODO. validate update\n  staticNodeIds.forEach((staticNodeId) => {\n    const nodeData = data.nodes[staticNodeId];\n    if (\"value\" in nodeData && nodeData.update) {\n      const update = nodeData.update;\n      const updateNodeId = parseNodeName(update).nodeId;\n      if (!updateNodeId) {\n        throw new ValidationError(\"Update it a literal\");\n      }\n      if (!nodeIds.has(updateNodeId)) {\n        throw new ValidationError(`Update not match: NodeId ${staticNodeId}, update: ${update}`);\n      }\n    }\n  });\n\n  const cycle = (possibles: string[]) => {\n    possibles.forEach((possobleNodeId) => {\n      (waitlist[possobleNodeId] || []).forEach((waitingNodeId) => {\n        pendings[waitingNodeId].delete(possobleNodeId);\n      });\n    });\n\n    const running: string[] = [];\n    Object.keys(pendings).forEach((pendingNodeId) => {\n      if (pendings[pendingNodeId].size === 0) {\n        running.push(pendingNodeId);\n        delete pendings[pendingNodeId];\n      }\n    });\n    return running;\n  };\n\n  let runningQueue = cycle(staticNodeIds);\n  if (runningQueue.length === 0) {\n    throw new ValidationError(\"No Initial Runnning Node\");\n  }\n\n  do {\n    runningQueue = cycle(runningQueue);\n  } while (runningQueue.length > 0);\n\n  if (Object.keys(pendings).length > 0) {\n    throw new ValidationError(\"Some nodes are not executed: \" + Object.keys(pendings).join(\", \"));\n  }\n};\n","import { ComputedNode } from \"@/node\";\nimport { assert } from \"@/utils/utils\";\n\ntype TaskEntry = {\n  node: ComputedNode;\n  graphId: string;\n  callback: (node: ComputedNode) => void;\n};\n\n// TaskManage object controls the concurrency of ComputedNode execution.\n//\n// NOTE: A TaskManager instance will be shared between parent graph and its children\n// when nested agents are involved.\nexport class TaskManager {\n  private concurrency: number;\n  private taskQueue: Array<TaskEntry> = [];\n  private runningNodes = new Set<ComputedNode>();\n\n  constructor(concurrency: number) {\n    this.concurrency = concurrency;\n  }\n\n  // This internal method dequeus a task from the task queue\n  // and call the associated callback method, if the number of\n  // running task is lower than the spcified limit.\n  private dequeueTaskIfPossible() {\n    if (this.runningNodes.size < this.concurrency) {\n      const task = this.taskQueue.shift();\n      if (task) {\n        this.runningNodes.add(task.node);\n        task.callback(task.node);\n      }\n    }\n  }\n\n  // Node will call this method to put itself in the execution queue.\n  // We call the associated callback function when it is dequeued.\n  public addTask(node: ComputedNode, graphId: string, callback: (node: ComputedNode) => void) {\n    // Finder tasks in the queue, which has either the same or higher priority.\n    const count = this.taskQueue.filter((task) => {\n      return task.node.priority >= node.priority;\n    }).length;\n    assert(count <= this.taskQueue.length, \"TaskManager.addTask: Something is really wrong.\");\n    this.taskQueue.splice(count, 0, { node, graphId, callback });\n    this.dequeueTaskIfPossible();\n  }\n\n  public isRunning(graphId: string) {\n    const count = [...this.runningNodes].filter((node) => {\n      return node.graphId == graphId;\n    }).length;\n    return count > 0 || Array.from(this.taskQueue).filter((data) => data.graphId === graphId).length > 0;\n  }\n\n  // Node MUST call this method once the execution of agent function is completed\n  // either successfully or not.\n  public onComplete(node: ComputedNode) {\n    assert(this.runningNodes.has(node), `TaskManager.onComplete node(${node.nodeId}) is not in list`);\n    this.runningNodes.delete(node);\n    this.dequeueTaskIfPossible();\n  }\n\n  // Node will call this method before it hands the task manager from the graph\n  // to a nested agent. We need to make it sure that there is enough room to run\n  // computed nodes inside the nested graph to avoid a deadlock.\n  public prepareForNesting() {\n    this.concurrency++;\n  }\n\n  public restoreAfterNesting() {\n    this.concurrency--;\n  }\n\n  public getStatus(verbose: boolean = false) {\n    const runningNodes = Array.from(this.runningNodes).map((node) => node.nodeId);\n    const queuedNodes = this.taskQueue.map((task) => task.node.nodeId);\n    const nodes = verbose ? { runningNodes, queuedNodes } : {};\n    return {\n      concurrency: this.concurrency,\n      queue: this.taskQueue.length,\n      running: this.runningNodes.size,\n      ...nodes,\n    };\n  }\n}\n","import {\n  AgentFunctionInfoDictionary,\n  AgentFilterInfo,\n  GraphData,\n  DataSource,\n  LoopData,\n  ResultDataDictionary,\n  ResultData,\n  DefaultResultData,\n  GraphOptions,\n  PropFunction,\n  GraphDataLoader,\n} from \"@/type\";\nimport { TransactionLog } from \"@/transaction_log\";\n\nimport { ComputedNode, StaticNode, GraphNodes } from \"@/node\";\n\nimport { resultsOf, resultOf, cleanResult } from \"@/utils/result\";\nimport { propFunctions } from \"@/utils/prop_function\";\nimport { parseNodeName, assert, isLogicallyTrue } from \"@/utils/utils\";\nimport { getDataFromSource } from \"@/utils/data_source\";\n\nimport { validateGraphData } from \"@/validator\";\nimport { TaskManager } from \"@/task_manager\";\n\nexport const defaultConcurrency = 8;\nexport const graphDataLatestVersion = 0.5;\n\nexport class GraphAI {\n  public readonly version: number;\n  private readonly graphId: string;\n  private readonly data: GraphData;\n  private readonly loop?: LoopData;\n  private readonly logs: Array<TransactionLog> = [];\n  private readonly bypassAgentIds: string[];\n  public readonly config?: Record<string, unknown> = {};\n  public readonly agentFunctionInfoDictionary: AgentFunctionInfoDictionary;\n  public readonly taskManager: TaskManager;\n  public readonly agentFilters: AgentFilterInfo[];\n  public readonly retryLimit?: number;\n  private readonly propFunctions: PropFunction[];\n  public readonly graphLoader?: GraphDataLoader;\n\n  public nodes: GraphNodes;\n  public onLogCallback = (__log: TransactionLog, __isUpdate: boolean) => {};\n  public verbose: boolean; // REVIEW: Do we need this?\n\n  private onComplete: () => void;\n  private repeatCount = 0;\n\n  // This method is called when either the GraphAI obect was created,\n  // or we are about to start n-th iteration (n>2).\n  private createNodes(data: GraphData) {\n    const nodes = Object.keys(data.nodes).reduce((_nodes: GraphNodes, nodeId: string) => {\n      const nodeData = data.nodes[nodeId];\n      if (\"value\" in nodeData) {\n        _nodes[nodeId] = new StaticNode(nodeId, nodeData, this);\n      } else if (\"agent\" in nodeData) {\n        _nodes[nodeId] = new ComputedNode(this.graphId, nodeId, nodeData, this);\n      } else {\n        throw new Error(\"Unknown node type (neither value nor agent): \" + nodeId);\n      }\n      return _nodes;\n    }, {});\n\n    // Generate the waitlist for each node.\n    Object.keys(nodes).forEach((nodeId) => {\n      const node = nodes[nodeId];\n      if (node.isComputedNode) {\n        node.pendings.forEach((pending) => {\n          if (nodes[pending]) {\n            nodes[pending].waitlist.add(nodeId); // previousNode\n          } else {\n            throw new Error(`createNode: invalid input ${pending} for node, ${nodeId}`);\n          }\n        });\n      }\n    });\n    return nodes;\n  }\n\n  private getValueFromResults(source: DataSource, results: ResultDataDictionary<DefaultResultData>) {\n    return getDataFromSource(source.nodeId ? results[source.nodeId] : undefined, source, this.propFunctions);\n  }\n\n  // for static\n  private initializeStaticNodes(enableConsoleLog: boolean = false) {\n    // If the result property is specified, inject it.\n    // If the previousResults exists (indicating we are in a loop),\n    // process the update property (nodeId or nodeId.propId).\n    Object.keys(this.data.nodes).forEach((nodeId) => {\n      const node = this.nodes[nodeId];\n      if (node?.isStaticNode) {\n        const value = node?.value;\n        if (value !== undefined) {\n          this.injectValue(nodeId, value, nodeId);\n        }\n        if (enableConsoleLog) {\n          node.consoleLog();\n        }\n      }\n    });\n  }\n\n  private updateStaticNodes(previousResults?: ResultDataDictionary<DefaultResultData>, enableConsoleLog: boolean = false) {\n    // If the result property is specified, inject it.\n    // If the previousResults exists (indicating we are in a loop),\n    // process the update property (nodeId or nodeId.propId).\n    Object.keys(this.data.nodes).forEach((nodeId) => {\n      const node = this.nodes[nodeId];\n      if (node?.isStaticNode) {\n        const update = node?.update;\n        if (update && previousResults) {\n          const result = this.getValueFromResults(update, previousResults);\n          this.injectValue(nodeId, result, update.nodeId);\n        }\n        if (enableConsoleLog) {\n          node.consoleLog();\n        }\n      }\n    });\n  }\n\n  constructor(\n    data: GraphData,\n    agentFunctionInfoDictionary: AgentFunctionInfoDictionary,\n    options: GraphOptions = {\n      taskManager: undefined,\n      agentFilters: [],\n      bypassAgentIds: [],\n      config: {},\n      graphLoader: undefined,\n    },\n  ) {\n    if (!data.version && !options.taskManager) {\n      console.warn(\"------------ missing version number\");\n    }\n    this.version = data.version ?? graphDataLatestVersion;\n    if (this.version < graphDataLatestVersion) {\n      console.warn(`------------ upgrade to ${graphDataLatestVersion}!`);\n    }\n    this.retryLimit = data.retry; // optional\n    this.graphId = URL.createObjectURL(new Blob()).slice(-36);\n    this.data = data;\n    this.agentFunctionInfoDictionary = agentFunctionInfoDictionary;\n    this.propFunctions = propFunctions;\n    this.taskManager = options.taskManager ?? new TaskManager(data.concurrency ?? defaultConcurrency);\n    this.agentFilters = options.agentFilters ?? [];\n    this.bypassAgentIds = options.bypassAgentIds ?? [];\n    this.config = options.config;\n    this.graphLoader = options.graphLoader;\n    this.loop = data.loop;\n    this.verbose = data.verbose === true;\n    this.onComplete = () => {\n      throw new Error(\"SOMETHING IS WRONG: onComplete is called without run()\");\n    };\n\n    validateGraphData(data, [...Object.keys(agentFunctionInfoDictionary), ...this.bypassAgentIds]);\n\n    this.nodes = this.createNodes(data);\n    this.initializeStaticNodes(true);\n  }\n\n  public getAgentFunctionInfo(agentId?: string) {\n    if (agentId && this.agentFunctionInfoDictionary[agentId]) {\n      return this.agentFunctionInfoDictionary[agentId];\n    }\n    if (agentId && this.bypassAgentIds.includes(agentId)) {\n      return {\n        agent: async () => {\n          return null;\n        },\n        inputs: null,\n      };\n    }\n    // We are not supposed to hit this error because the validator will catch it.\n    throw new Error(\"No agent: \" + agentId);\n  }\n\n  public asString() {\n    return Object.values(this.nodes)\n      .map((node) => node.asString())\n      .join(\"\\n\");\n  }\n\n  // Public API\n  public results<T = DefaultResultData>(all: boolean): ResultDataDictionary<T> {\n    return Object.keys(this.nodes)\n      .filter((nodeId) => all || this.nodes[nodeId].isResult)\n      .reduce((results: ResultDataDictionary<T>, nodeId) => {\n        const node = this.nodes[nodeId];\n        if (node.result !== undefined) {\n          results[nodeId] = node.result as T;\n        }\n        return results;\n      }, {});\n  }\n\n  // Public API\n  public errors(): Record<string, Error> {\n    return Object.keys(this.nodes).reduce((errors: Record<string, Error>, nodeId) => {\n      const node = this.nodes[nodeId];\n      if (node.isComputedNode) {\n        if (node.error !== undefined) {\n          errors[nodeId] = node.error;\n        }\n      }\n      return errors;\n    }, {});\n  }\n\n  private pushReadyNodesIntoQueue() {\n    // Nodes without pending data should run immediately.\n    Object.keys(this.nodes).forEach((nodeId) => {\n      const node = this.nodes[nodeId];\n      if (node.isComputedNode) {\n        this.pushQueueIfReady(node);\n      }\n    });\n  }\n\n  private pushQueueIfReady(node: ComputedNode) {\n    if (node.isReadyNode()) {\n      this.pushQueue(node);\n    }\n  }\n\n  public pushQueueIfReadyAndRunning(node: ComputedNode) {\n    if (this.isRunning()) {\n      this.pushQueueIfReady(node);\n    }\n  }\n\n  // for computed\n  public pushQueue(node: ComputedNode) {\n    node.beforeAddTask();\n\n    this.taskManager.addTask(node, this.graphId, (_node) => {\n      assert(node.nodeId === _node.nodeId, \"GraphAI.pushQueue node mismatch\");\n      node.execute();\n    });\n  }\n\n  // Public API\n  public async run<T = DefaultResultData>(all: boolean = false): Promise<ResultDataDictionary<T>> {\n    if (this.isRunning()) {\n      throw new Error(\"This GraphUI instance is already running\");\n    }\n\n    this.pushReadyNodesIntoQueue();\n\n    if (!this.isRunning()) {\n      console.warn(\"-- nothing to execute\");\n      return {};\n    }\n\n    return new Promise((resolve, reject) => {\n      this.onComplete = () => {\n        const errors = this.errors();\n        const nodeIds = Object.keys(errors);\n        if (nodeIds.length > 0) {\n          reject(errors[nodeIds[0]]);\n        } else {\n          resolve(this.results(all));\n        }\n      };\n    });\n  }\n\n  // Public only for testing\n  public isRunning() {\n    return this.taskManager.isRunning(this.graphId);\n  }\n\n  // callback from execute\n  public onExecutionComplete(node: ComputedNode) {\n    this.taskManager.onComplete(node);\n    if (this.isRunning() || this.processLoopIfNecessary()) {\n      return; // continue running\n    }\n    this.onComplete(); // Nothing to run. Finish it.\n  }\n\n  // Must be called only from onExecutionComplete righ after removeRunning\n  // Check if there is any running computed nodes.\n  // In case of no running computed note, start the another iteration if ncessary (loop)\n  private processLoopIfNecessary() {\n    this.repeatCount++;\n    const loop = this.loop;\n    if (!loop) {\n      return false;\n    }\n\n    // We need to update static nodes, before checking the condition\n    const previousResults = this.results(true); // results from previous loop\n    this.updateStaticNodes(previousResults);\n\n    if (loop.count === undefined || this.repeatCount < loop.count) {\n      if (loop.while) {\n        const source = parseNodeName(loop.while);\n        const value = this.getValueFromResults(source, this.results(true));\n        // NOTE: We treat an empty array as false.\n        if (!isLogicallyTrue(value)) {\n          return false; // while condition is not met\n        }\n      }\n      this.nodes = this.createNodes(this.data);\n      this.initializeStaticNodes();\n      this.updateStaticNodes(previousResults, true);\n\n      this.pushReadyNodesIntoQueue();\n      return true; // Indicating that we are going to continue.\n    }\n    return false;\n  }\n\n  public setLoopLog(log: TransactionLog) {\n    log.isLoop = !!this.loop;\n    log.repeatCount = this.repeatCount;\n  }\n\n  public appendLog(log: TransactionLog) {\n    this.logs.push(log);\n    this.onLogCallback(log, false);\n  }\n\n  public updateLog(log: TransactionLog) {\n    this.onLogCallback(log, true);\n  }\n\n  // Public API\n  public transactionLogs() {\n    return this.logs;\n  }\n\n  // Public API\n  public injectValue(nodeId: string, value: ResultData, injectFrom?: string): void {\n    const node = this.nodes[nodeId];\n    if (node && node.isStaticNode) {\n      node.injectValue(value, injectFrom);\n    } else {\n      throw new Error(`injectValue with Invalid nodeId, ${nodeId}`);\n    }\n  }\n\n  public resultsOf(inputs?: Array<any> | Record<string, any>, anyInput: boolean = false) {\n    const results = resultsOf(inputs ?? [], this.nodes, this.propFunctions);\n    if (anyInput) {\n      return cleanResult(results);\n    }\n    return results;\n  }\n  public resultOf(source: DataSource) {\n    return resultOf(source, this.nodes, this.propFunctions);\n  }\n}\n"],"names":["sleep","async","milliseconds","Promise","resolve","setTimeout","parseNodeName","inputNodeId","regex","match","value","parts","split","length","nodeId","propIds","slice","assert","condition","message","isWarn","Error","console","warn","isObject","x","isNull","data","strIntentionalError","defaultAgentInfo","name","samples","inputs","params","result","description","category","author","repository","license","agentInfoWrapper","agent","mock","objectToKeyArray","innerData","ret","Object","keys","forEach","key","push","tmp","debugResultKeyInner","Array","isArray","from","reduce","index","String","isLogicallyTrue","defaultTestContext","debugInfo","retry","verbose","filterParams","agents","log","isNamedInputs","namedInputs","inputs2dataSources","map","inp","flat","values","input","templateMatch","matchAll","m","dataSourceNodeIds","sources","filter","source","NodeState","TransactionLog","constructor","this","state","Waiting","initForComputedNode","node","graph","agentId","getAgentId","appendLog","onInjected","injectFrom","isUpdating","endTime","Date","now","setLoopLog","updateLog","onComplete","localLog","resultKeys","objectKeys","join","beforeExecute","transactionId","retryCount","undefined","startTime","dataSources","inputsData","beforeAddTask","onError","errorMessage","onSkipped","Node","waitlist","Set","asString","onSetResult","waitingNodeId","waitingNode","nodes","isComputedNode","removePending","pushQueueIfReadyAndRunning","afterConsoleLog","after","JSON","stringify","ComputedNode","graphId","super","isStaticNode","passThrough","retryLimit","timeout","isResult","priority","anyInput","pendings","includes","agentFunction","nestedGraph","addPendingNode","graphLoader","if","ifSource","unless","unlessSource","dynamicParams","dataSource","add","isReadyNode","size","resultOf","Skipped","error","execute","onExecutionComplete","checkDataAvailability","resultsOf","some","Queued","clear","delete","isCurrentTransaction","executeTimeout","Executing","TimedOut","shouldApplyAgentFilter","agentFilter","agentIds","nodeIds","agentFilterHandler","context","next","innerContext","agentFilters","previousResults","prepareExecute","getAgentFunctionInfo","getContext","taskManager","prepareForNesting","onLogCallback","graphData","agentFunctionInfoDictionary","beforeConsoleLog","restoreAfterNesting","Completed","getResult","errorProcess","Failed","getParams","getInputs","a","inputSchema","getDebugInfo","config","r","version","before","StaticNode","update","injectValue","Injected","consoleLog","propFunctionRegex","propFunctions","propId","matchJoin","parse","Number","isNaN","isFinite","innerGetDataFromSource","propFunction","parseInt","getNestedData","getDataFromSource","resultsOfInner","results","replaceAll","cleanResultInner","graphDataAttributeKeys","computedNodeAttributeKeys","staticNodeAttributeKeys","ValidationError","setPrototypeOf","prototype","validateGraphData","graphNodesValidator","loop","count","while","concurrency","isInteger","graphDataValidator","computedNodeIds","staticNodeIds","graphAgentIds","nodeData","nodeValidator","computedNodeValidator","has","agentValidator","computedNodeId","dataSourceValidator","sourceType","sourceNodeIds","sourceNodeId","staticNodeId","updateNodeId","cycle","possibles","possobleNodeId","running","pendingNodeId","runningQueue","relationValidator","TaskManager","taskQueue","runningNodes","dequeueTaskIfPossible","task","shift","callback","addTask","splice","isRunning","getStatus","queuedNodes","queue","defaultConcurrency","graphDataLatestVersion","GraphAI","createNodes","_nodes","pending","getValueFromResults","initializeStaticNodes","enableConsoleLog","updateStaticNodes","options","bypassAgentIds","logs","__log","__isUpdate","repeatCount","URL","createObjectURL","Blob","all","errors","pushReadyNodesIntoQueue","pushQueueIfReady","pushQueue","_node","run","reject","processLoopIfNecessary","isLoop","transactionLogs","cleanResult"],"mappings":"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"}